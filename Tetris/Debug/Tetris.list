
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004944  08004944  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08004944  08004944  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004944  08004944  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800494c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000058  080049a4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080049a4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004754  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001527  00000000  00000000  00024818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  00025d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000045c  00000000  00000000  00026340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b5b  00000000  00000000  0002679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c0c  00000000  00000000  000282f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000731b  00000000  00000000  0002bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001594  00000000  00000000  00033220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000347b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000058 	.word	0x20000058
 800014c:	00000000 	.word	0x00000000
 8000150:	08004628 	.word	0x08004628

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000005c 	.word	0x2000005c
 800016c:	08004628 	.word	0x08004628

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_frsub>:
 8000180:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__addsf3>
 8000186:	bf00      	nop

08000188 <__aeabi_fsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800018c <__addsf3>:
 800018c:	0042      	lsls	r2, r0, #1
 800018e:	bf1f      	itttt	ne
 8000190:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000194:	ea92 0f03 	teqne	r2, r3
 8000198:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800019c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a0:	d06a      	beq.n	8000278 <__addsf3+0xec>
 80001a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001aa:	bfc1      	itttt	gt
 80001ac:	18d2      	addgt	r2, r2, r3
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	4048      	eorgt	r0, r1
 80001b2:	4041      	eorgt	r1, r0
 80001b4:	bfb8      	it	lt
 80001b6:	425b      	neglt	r3, r3
 80001b8:	2b19      	cmp	r3, #25
 80001ba:	bf88      	it	hi
 80001bc:	4770      	bxhi	lr
 80001be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4240      	negne	r0, r0
 80001ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4249      	negne	r1, r1
 80001de:	ea92 0f03 	teq	r2, r3
 80001e2:	d03f      	beq.n	8000264 <__addsf3+0xd8>
 80001e4:	f1a2 0201 	sub.w	r2, r2, #1
 80001e8:	fa41 fc03 	asr.w	ip, r1, r3
 80001ec:	eb10 000c 	adds.w	r0, r0, ip
 80001f0:	f1c3 0320 	rsb	r3, r3, #32
 80001f4:	fa01 f103 	lsl.w	r1, r1, r3
 80001f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001fc:	d502      	bpl.n	8000204 <__addsf3+0x78>
 80001fe:	4249      	negs	r1, r1
 8000200:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000208:	d313      	bcc.n	8000232 <__addsf3+0xa6>
 800020a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020e:	d306      	bcc.n	800021e <__addsf3+0x92>
 8000210:	0840      	lsrs	r0, r0, #1
 8000212:	ea4f 0131 	mov.w	r1, r1, rrx
 8000216:	f102 0201 	add.w	r2, r2, #1
 800021a:	2afe      	cmp	r2, #254	; 0xfe
 800021c:	d251      	bcs.n	80002c2 <__addsf3+0x136>
 800021e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	ea40 0003 	orr.w	r0, r0, r3
 8000230:	4770      	bx	lr
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	eb40 0000 	adc.w	r0, r0, r0
 8000238:	3a01      	subs	r2, #1
 800023a:	bf28      	it	cs
 800023c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000240:	d2ed      	bcs.n	800021e <__addsf3+0x92>
 8000242:	fab0 fc80 	clz	ip, r0
 8000246:	f1ac 0c08 	sub.w	ip, ip, #8
 800024a:	ebb2 020c 	subs.w	r2, r2, ip
 800024e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000252:	bfaa      	itet	ge
 8000254:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000258:	4252      	neglt	r2, r2
 800025a:	4318      	orrge	r0, r3
 800025c:	bfbc      	itt	lt
 800025e:	40d0      	lsrlt	r0, r2
 8000260:	4318      	orrlt	r0, r3
 8000262:	4770      	bx	lr
 8000264:	f092 0f00 	teq	r2, #0
 8000268:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800026c:	bf06      	itte	eq
 800026e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000272:	3201      	addeq	r2, #1
 8000274:	3b01      	subne	r3, #1
 8000276:	e7b5      	b.n	80001e4 <__addsf3+0x58>
 8000278:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800027c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000280:	bf18      	it	ne
 8000282:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000286:	d021      	beq.n	80002cc <__addsf3+0x140>
 8000288:	ea92 0f03 	teq	r2, r3
 800028c:	d004      	beq.n	8000298 <__addsf3+0x10c>
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	bf08      	it	eq
 8000294:	4608      	moveq	r0, r1
 8000296:	4770      	bx	lr
 8000298:	ea90 0f01 	teq	r0, r1
 800029c:	bf1c      	itt	ne
 800029e:	2000      	movne	r0, #0
 80002a0:	4770      	bxne	lr
 80002a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a6:	d104      	bne.n	80002b2 <__addsf3+0x126>
 80002a8:	0040      	lsls	r0, r0, #1
 80002aa:	bf28      	it	cs
 80002ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	4770      	bx	lr
 80002b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b6:	bf3c      	itt	cc
 80002b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bxcc	lr
 80002be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ca:	4770      	bx	lr
 80002cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d0:	bf16      	itet	ne
 80002d2:	4608      	movne	r0, r1
 80002d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d8:	4601      	movne	r1, r0
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	bf06      	itte	eq
 80002de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002e2:	ea90 0f01 	teqeq	r0, r1
 80002e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ea:	4770      	bx	lr

080002ec <__aeabi_ui2f>:
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	e004      	b.n	80002fc <__aeabi_i2f+0x8>
 80002f2:	bf00      	nop

080002f4 <__aeabi_i2f>:
 80002f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f8:	bf48      	it	mi
 80002fa:	4240      	negmi	r0, r0
 80002fc:	ea5f 0c00 	movs.w	ip, r0
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000308:	4601      	mov	r1, r0
 800030a:	f04f 0000 	mov.w	r0, #0
 800030e:	e01c      	b.n	800034a <__aeabi_l2f+0x2a>

08000310 <__aeabi_ul2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	e00a      	b.n	8000334 <__aeabi_l2f+0x14>
 800031e:	bf00      	nop

08000320 <__aeabi_l2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800032c:	d502      	bpl.n	8000334 <__aeabi_l2f+0x14>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	ea5f 0c01 	movs.w	ip, r1
 8000338:	bf02      	ittt	eq
 800033a:	4684      	moveq	ip, r0
 800033c:	4601      	moveq	r1, r0
 800033e:	2000      	moveq	r0, #0
 8000340:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000344:	bf08      	it	eq
 8000346:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800034a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034e:	fabc f28c 	clz	r2, ip
 8000352:	3a08      	subs	r2, #8
 8000354:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000358:	db10      	blt.n	800037c <__aeabi_l2f+0x5c>
 800035a:	fa01 fc02 	lsl.w	ip, r1, r2
 800035e:	4463      	add	r3, ip
 8000360:	fa00 fc02 	lsl.w	ip, r0, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	fa20 f202 	lsr.w	r2, r0, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f102 0220 	add.w	r2, r2, #32
 8000380:	fa01 fc02 	lsl.w	ip, r1, r2
 8000384:	f1c2 0220 	rsb	r2, r2, #32
 8000388:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800038c:	fa21 f202 	lsr.w	r2, r1, r2
 8000390:	eb43 0002 	adc.w	r0, r3, r2
 8000394:	bf08      	it	eq
 8000396:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800039a:	4770      	bx	lr

0800039c <__aeabi_fmul>:
 800039c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a4:	bf1e      	ittt	ne
 80003a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003aa:	ea92 0f0c 	teqne	r2, ip
 80003ae:	ea93 0f0c 	teqne	r3, ip
 80003b2:	d06f      	beq.n	8000494 <__aeabi_fmul+0xf8>
 80003b4:	441a      	add	r2, r3
 80003b6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ba:	0240      	lsls	r0, r0, #9
 80003bc:	bf18      	it	ne
 80003be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c2:	d01e      	beq.n	8000402 <__aeabi_fmul+0x66>
 80003c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d0:	fba0 3101 	umull	r3, r1, r0, r1
 80003d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003dc:	bf3e      	ittt	cc
 80003de:	0049      	lslcc	r1, r1, #1
 80003e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e4:	005b      	lslcc	r3, r3, #1
 80003e6:	ea40 0001 	orr.w	r0, r0, r1
 80003ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ee:	2afd      	cmp	r2, #253	; 0xfd
 80003f0:	d81d      	bhi.n	800042e <__aeabi_fmul+0x92>
 80003f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fa:	bf08      	it	eq
 80003fc:	f020 0001 	biceq.w	r0, r0, #1
 8000400:	4770      	bx	lr
 8000402:	f090 0f00 	teq	r0, #0
 8000406:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040a:	bf08      	it	eq
 800040c:	0249      	lsleq	r1, r1, #9
 800040e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000412:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000416:	3a7f      	subs	r2, #127	; 0x7f
 8000418:	bfc2      	ittt	gt
 800041a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000422:	4770      	bxgt	lr
 8000424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	3a01      	subs	r2, #1
 800042e:	dc5d      	bgt.n	80004ec <__aeabi_fmul+0x150>
 8000430:	f112 0f19 	cmn.w	r2, #25
 8000434:	bfdc      	itt	le
 8000436:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043a:	4770      	bxle	lr
 800043c:	f1c2 0200 	rsb	r2, r2, #0
 8000440:	0041      	lsls	r1, r0, #1
 8000442:	fa21 f102 	lsr.w	r1, r1, r2
 8000446:	f1c2 0220 	rsb	r2, r2, #32
 800044a:	fa00 fc02 	lsl.w	ip, r0, r2
 800044e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000452:	f140 0000 	adc.w	r0, r0, #0
 8000456:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045a:	bf08      	it	eq
 800045c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000460:	4770      	bx	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046a:	bf02      	ittt	eq
 800046c:	0040      	lsleq	r0, r0, #1
 800046e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000472:	3a01      	subeq	r2, #1
 8000474:	d0f9      	beq.n	800046a <__aeabi_fmul+0xce>
 8000476:	ea40 000c 	orr.w	r0, r0, ip
 800047a:	f093 0f00 	teq	r3, #0
 800047e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0049      	lsleq	r1, r1, #1
 8000486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048a:	3b01      	subeq	r3, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xe6>
 800048e:	ea41 010c 	orr.w	r1, r1, ip
 8000492:	e78f      	b.n	80003b4 <__aeabi_fmul+0x18>
 8000494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000498:	ea92 0f0c 	teq	r2, ip
 800049c:	bf18      	it	ne
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d00a      	beq.n	80004ba <__aeabi_fmul+0x11e>
 80004a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a8:	bf18      	it	ne
 80004aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ae:	d1d8      	bne.n	8000462 <__aeabi_fmul+0xc6>
 80004b0:	ea80 0001 	eor.w	r0, r0, r1
 80004b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b8:	4770      	bx	lr
 80004ba:	f090 0f00 	teq	r0, #0
 80004be:	bf17      	itett	ne
 80004c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c4:	4608      	moveq	r0, r1
 80004c6:	f091 0f00 	teqne	r1, #0
 80004ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ce:	d014      	beq.n	80004fa <__aeabi_fmul+0x15e>
 80004d0:	ea92 0f0c 	teq	r2, ip
 80004d4:	d101      	bne.n	80004da <__aeabi_fmul+0x13e>
 80004d6:	0242      	lsls	r2, r0, #9
 80004d8:	d10f      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004da:	ea93 0f0c 	teq	r3, ip
 80004de:	d103      	bne.n	80004e8 <__aeabi_fmul+0x14c>
 80004e0:	024b      	lsls	r3, r1, #9
 80004e2:	bf18      	it	ne
 80004e4:	4608      	movne	r0, r1
 80004e6:	d108      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004e8:	ea80 0001 	eor.w	r0, r0, r1
 80004ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f8:	4770      	bx	lr
 80004fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000502:	4770      	bx	lr

08000504 <__aeabi_fdiv>:
 8000504:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000508:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800050c:	bf1e      	ittt	ne
 800050e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000512:	ea92 0f0c 	teqne	r2, ip
 8000516:	ea93 0f0c 	teqne	r3, ip
 800051a:	d069      	beq.n	80005f0 <__aeabi_fdiv+0xec>
 800051c:	eba2 0203 	sub.w	r2, r2, r3
 8000520:	ea80 0c01 	eor.w	ip, r0, r1
 8000524:	0249      	lsls	r1, r1, #9
 8000526:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800052a:	d037      	beq.n	800059c <__aeabi_fdiv+0x98>
 800052c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000530:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000534:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000538:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800053c:	428b      	cmp	r3, r1
 800053e:	bf38      	it	cc
 8000540:	005b      	lslcc	r3, r3, #1
 8000542:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000546:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800054a:	428b      	cmp	r3, r1
 800054c:	bf24      	itt	cs
 800054e:	1a5b      	subcs	r3, r3, r1
 8000550:	ea40 000c 	orrcs.w	r0, r0, ip
 8000554:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000558:	bf24      	itt	cs
 800055a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000562:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000566:	bf24      	itt	cs
 8000568:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800056c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000570:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000574:	bf24      	itt	cs
 8000576:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800057a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	bf18      	it	ne
 8000582:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000586:	d1e0      	bne.n	800054a <__aeabi_fdiv+0x46>
 8000588:	2afd      	cmp	r2, #253	; 0xfd
 800058a:	f63f af50 	bhi.w	800042e <__aeabi_fmul+0x92>
 800058e:	428b      	cmp	r3, r1
 8000590:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000594:	bf08      	it	eq
 8000596:	f020 0001 	biceq.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a4:	327f      	adds	r2, #127	; 0x7f
 80005a6:	bfc2      	ittt	gt
 80005a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b0:	4770      	bxgt	lr
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	3a01      	subs	r2, #1
 80005bc:	e737      	b.n	800042e <__aeabi_fmul+0x92>
 80005be:	f092 0f00 	teq	r2, #0
 80005c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c6:	bf02      	ittt	eq
 80005c8:	0040      	lsleq	r0, r0, #1
 80005ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ce:	3a01      	subeq	r2, #1
 80005d0:	d0f9      	beq.n	80005c6 <__aeabi_fdiv+0xc2>
 80005d2:	ea40 000c 	orr.w	r0, r0, ip
 80005d6:	f093 0f00 	teq	r3, #0
 80005da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005de:	bf02      	ittt	eq
 80005e0:	0049      	lsleq	r1, r1, #1
 80005e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e6:	3b01      	subeq	r3, #1
 80005e8:	d0f9      	beq.n	80005de <__aeabi_fdiv+0xda>
 80005ea:	ea41 010c 	orr.w	r1, r1, ip
 80005ee:	e795      	b.n	800051c <__aeabi_fdiv+0x18>
 80005f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f4:	ea92 0f0c 	teq	r2, ip
 80005f8:	d108      	bne.n	800060c <__aeabi_fdiv+0x108>
 80005fa:	0242      	lsls	r2, r0, #9
 80005fc:	f47f af7d 	bne.w	80004fa <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	f47f af70 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000608:	4608      	mov	r0, r1
 800060a:	e776      	b.n	80004fa <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	d104      	bne.n	800061c <__aeabi_fdiv+0x118>
 8000612:	024b      	lsls	r3, r1, #9
 8000614:	f43f af4c 	beq.w	80004b0 <__aeabi_fmul+0x114>
 8000618:	4608      	mov	r0, r1
 800061a:	e76e      	b.n	80004fa <__aeabi_fmul+0x15e>
 800061c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000620:	bf18      	it	ne
 8000622:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000626:	d1ca      	bne.n	80005be <__aeabi_fdiv+0xba>
 8000628:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800062c:	f47f af5c 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000630:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000634:	f47f af3c 	bne.w	80004b0 <__aeabi_fmul+0x114>
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0x15e>
 800063a:	bf00      	nop

0800063c <__aeabi_f2uiz>:
 800063c:	0042      	lsls	r2, r0, #1
 800063e:	d20e      	bcs.n	800065e <__aeabi_f2uiz+0x22>
 8000640:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000644:	d30b      	bcc.n	800065e <__aeabi_f2uiz+0x22>
 8000646:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800064a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800064e:	d409      	bmi.n	8000664 <__aeabi_f2uiz+0x28>
 8000650:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000658:	fa23 f002 	lsr.w	r0, r3, r2
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr
 8000664:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000668:	d101      	bne.n	800066e <__aeabi_f2uiz+0x32>
 800066a:	0242      	lsls	r2, r0, #9
 800066c:	d102      	bne.n	8000674 <__aeabi_f2uiz+0x38>
 800066e:	f04f 30ff 	mov.w	r0, #4294967295
 8000672:	4770      	bx	lr
 8000674:	f04f 0000 	mov.w	r0, #0
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Buttons_Tetris_initController>:
 * ---------------------------------------
 * Initializes the Tetris game controller for buttons input.
 * Configures the pins and settings for UP, DOWN, LEFT, RIGHT, and OK (Rotate) buttons.
 */
static void Buttons_Tetris_initController()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
    // Configuration for the UP button
    Button_Config_t buttonConfig = {UP_BUTTON_PIN, UP_BUTTON_PORT, Pull_Down, Internal, EXTI_STATE_DISABLED, NULL};
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <Buttons_Tetris_initController+0x6c>)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	ca07      	ldmia	r2, {r0, r1, r2}
 8000688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Button_init(Up, &buttonConfig);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	2000      	movs	r0, #0
 8000692:	f002 f9d5 	bl	8002a40 <Button_init>

    // Configuration for the DOWN button
    buttonConfig.pin  = DOWN_BUTTON_PIN;
 8000696:	2301      	movs	r3, #1
 8000698:	713b      	strb	r3, [r7, #4]
    buttonConfig.port = DOWN_BUTTON_PORT;
 800069a:	2300      	movs	r3, #0
 800069c:	717b      	strb	r3, [r7, #5]
    Button_init(Down, &buttonConfig);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	f002 f9cc 	bl	8002a40 <Button_init>

    // Configuration for the LEFT button
    buttonConfig.pin  = LEFT_BUTTON_PIN;
 80006a8:	2306      	movs	r3, #6
 80006aa:	713b      	strb	r3, [r7, #4]
    buttonConfig.port = LEFT_BUTTON_PORT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
    Button_init(Left, &buttonConfig);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	2002      	movs	r0, #2
 80006b6:	f002 f9c3 	bl	8002a40 <Button_init>

    // Configuration for the RIGHT button
    buttonConfig.pin  = RIGHT_BUTTON_PIN;
 80006ba:	2308      	movs	r3, #8
 80006bc:	713b      	strb	r3, [r7, #4]
    buttonConfig.port = RIGHT_BUTTON_PORT;
 80006be:	2300      	movs	r3, #0
 80006c0:	717b      	strb	r3, [r7, #5]
    Button_init(Right, &buttonConfig);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	2003      	movs	r0, #3
 80006c8:	f002 f9ba 	bl	8002a40 <Button_init>

    // Configuration for the OK (Rotate) button
    buttonConfig.pin  = ROTATE_OK_BUTTON_PIN;
 80006cc:	2309      	movs	r3, #9
 80006ce:	713b      	strb	r3, [r7, #4]
    buttonConfig.port = ROTATE_OK_BUTTON_PORT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	717b      	strb	r3, [r7, #5]
    Button_init(Rotate_Ok, &buttonConfig);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	2004      	movs	r0, #4
 80006da:	f002 f9b1 	bl	8002a40 <Button_init>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08004640 	.word	0x08004640

080006ec <Buttons_Tetris_ubdateInputState>:


static void Buttons_Tetris_ubdateInputState()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    Button_updateState();
 80006f0:	f002 faac 	bl	8002c4c <Button_updateState>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Buttons_Tetris_checkAction_Up>:

static boolean Buttons_Tetris_checkAction_Up()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    if(Button_getState(Up) == Button_Pressed_Pending_Read)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f002 fc69 	bl	8002fd4 <Button_getState>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d101      	bne.n	800070c <Buttons_Tetris_checkAction_Up+0x14>
        return TRUE;
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <Buttons_Tetris_checkAction_Up+0x16>
    return FALSE;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}

08000712 <Buttons_Tetris_checkAction_Down>:

static boolean Buttons_Tetris_checkAction_Down()
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
    if(Button_getState(Down) == Button_Pressed_Pending_Read)
 8000716:	2001      	movs	r0, #1
 8000718:	f002 fc5c 	bl	8002fd4 <Button_getState>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d101      	bne.n	8000726 <Buttons_Tetris_checkAction_Down+0x14>
        return TRUE;
 8000722:	2301      	movs	r3, #1
 8000724:	e000      	b.n	8000728 <Buttons_Tetris_checkAction_Down+0x16>
    return FALSE;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	bd80      	pop	{r7, pc}

0800072c <Buttons_Tetris_checkAction_Right>:

static boolean Buttons_Tetris_checkAction_Right()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    if(Button_getState(Right) == Button_Pressed_Pending_Read)
 8000730:	2003      	movs	r0, #3
 8000732:	f002 fc4f 	bl	8002fd4 <Button_getState>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d101      	bne.n	8000740 <Buttons_Tetris_checkAction_Right+0x14>
        return TRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <Buttons_Tetris_checkAction_Right+0x16>
    return FALSE;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}

08000746 <Buttons_Tetris_checkAction_Left>:

static boolean Buttons_Tetris_checkAction_Left()
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
    if(Button_getState(Left) == Button_Pressed_Pending_Read)
 800074a:	2002      	movs	r0, #2
 800074c:	f002 fc42 	bl	8002fd4 <Button_getState>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d101      	bne.n	800075a <Buttons_Tetris_checkAction_Left+0x14>
        return TRUE;
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <Buttons_Tetris_checkAction_Left+0x16>
    return FALSE;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	bd80      	pop	{r7, pc}

08000760 <Buttons_Tetris_checkAction_Ok>:

static boolean Buttons_Tetris_checkAction_Ok()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    if(Button_getState(Rotate_Ok) == Button_Pressed_Pending_Read)
 8000764:	2004      	movs	r0, #4
 8000766:	f002 fc35 	bl	8002fd4 <Button_getState>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d101      	bne.n	8000774 <Buttons_Tetris_checkAction_Ok+0x14>
        return TRUE;
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <Buttons_Tetris_checkAction_Ok+0x16>
    return FALSE;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}

0800077a <Buttons_Tetris_checkAction_Rotate>:

static boolean Buttons_Tetris_checkAction_Rotate()
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
    if(Button_getState(Rotate_Ok) == Button_Pressed_Pending_Read)
 800077e:	2004      	movs	r0, #4
 8000780:	f002 fc28 	bl	8002fd4 <Button_getState>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d101      	bne.n	800078e <Buttons_Tetris_checkAction_Rotate+0x14>
        return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <Buttons_Tetris_checkAction_Rotate+0x16>
    return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	bd80      	pop	{r7, pc}

08000794 <Buttons_Tetris_checkAction_Drob_Down>:

static boolean Buttons_Tetris_checkAction_Drob_Down()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    if(Button_getState(Up) == Button_Pressed_Pending_Read)
 8000798:	2000      	movs	r0, #0
 800079a:	f002 fc1b 	bl	8002fd4 <Button_getState>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d101      	bne.n	80007a8 <Buttons_Tetris_checkAction_Drob_Down+0x14>
        return TRUE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <Buttons_Tetris_checkAction_Drob_Down+0x16>
    return FALSE;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}

080007ae <Tetris_Controller_init>:
#include "../Inc/APP/Tetris/Controller/Tetris_Controller.h"


// Initialize the Tetris controller.
void Tetris_Controller_init(Tetris_Controller_t *controller)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
    controller->initController();
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4798      	blx	r3
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Tetris_Controller_handle>:


// Handle the Tetris game state based on the current game state.
void Tetris_Controller_handle(Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    switch (model->currentGameState)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80007d4:	3b01      	subs	r3, #1
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d825      	bhi.n	8000826 <Tetris_Controller_handle+0x62>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <Tetris_Controller_handle+0x1c>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f5 	.word	0x080007f5
 80007e4:	080007ff 	.word	0x080007ff
 80007e8:	08000809 	.word	0x08000809
 80007ec:	08000813 	.word	0x08000813
 80007f0:	0800081d 	.word	0x0800081d
    {
        case State_Welcome:
            // Handle the welcome screen.
            handleWelcomeScreen(model, controller);
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f81a 	bl	8000830 <handleWelcomeScreen>
            break;
 80007fc:	e014      	b.n	8000828 <Tetris_Controller_handle+0x64>

        case State_TOP_Scores:
            // Handle the top scores screen.
            handleTopScoresScreen(model, controller);
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f9df 	bl	8000bc4 <handleTopScoresScreen>
            break;
 8000806:	e00f      	b.n	8000828 <Tetris_Controller_handle+0x64>

        case State_Input_Name:
            // Handle the input name screen.
            handleInputNameScreen(model, controller);
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f85a 	bl	80008c4 <handleInputNameScreen>
            break;
 8000810:	e00a      	b.n	8000828 <Tetris_Controller_handle+0x64>

        case State_Game_Play:
            // Handle the game screen.
            handleGameScreen(model, controller);
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f9f5 	bl	8000c04 <handleGameScreen>
            break;
 800081a:	e005      	b.n	8000828 <Tetris_Controller_handle+0x64>

        case State_Game_Over:
            // Handle the game over screen.
            handleGameOverScreen(model, controller);
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 fa41 	bl	8000ca6 <handleGameOverScreen>
            break;
 8000824:	e000      	b.n	8000828 <Tetris_Controller_handle+0x64>

        default:
            // Handle unknown game state (if needed).
            break;
 8000826:	bf00      	nop
    }
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <handleWelcomeScreen>:


// Handle the welcome screen logic.
static void handleWelcomeScreen(Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    // Update input state.
    controller->ubdateInputState();
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	4798      	blx	r3

    // Update previous game state.
    model->previousGameState = model->currentGameState;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

    // Check for the "OK" action button press.
    if (controller->checkAction_Ok())
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4798      	blx	r3
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d01b      	beq.n	8000890 <handleWelcomeScreen+0x60>
    {
        if (model->selectedOption == OPTION_PLAY)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800085e:	2b01      	cmp	r3, #1
 8000860:	d10c      	bne.n	800087c <handleWelcomeScreen+0x4c>
        {
            // Select character in player name to change.
            model->selectedOption   = 0;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
            model->selectedChar     = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            model->currentGameState = State_Input_Name;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2203      	movs	r2, #3
 8000876:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
        model->selectedOption = OPTION_PLAY;                    // Handle "Up" button press.

    else if (controller->checkAction_Down())
        model->selectedOption = OPTION_TOP_SCORES;              // Handle "Down" button press.

}
 800087a:	e01e      	b.n	80008ba <handleWelcomeScreen+0x8a>
        else if (model->selectedOption == OPTION_TOP_SCORES)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8000882:	2b02      	cmp	r3, #2
 8000884:	d119      	bne.n	80008ba <handleWelcomeScreen+0x8a>
            model->currentGameState = State_TOP_Scores;         // Switch to the top scores screen.
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2202      	movs	r2, #2
 800088a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
}
 800088e:	e014      	b.n	80008ba <handleWelcomeScreen+0x8a>
    else if (controller->checkAction_Up())
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	4798      	blx	r3
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <handleWelcomeScreen+0x76>
        model->selectedOption = OPTION_PLAY;                    // Handle "Up" button press.
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
}
 80008a4:	e009      	b.n	80008ba <handleWelcomeScreen+0x8a>
    else if (controller->checkAction_Down())
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	4798      	blx	r3
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d003      	beq.n	80008ba <handleWelcomeScreen+0x8a>
        model->selectedOption = OPTION_TOP_SCORES;              // Handle "Down" button press.
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2202      	movs	r2, #2
 80008b6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <handleInputNameScreen>:


static void handleInputNameScreen(Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    // Update input state.
    controller->ubdateInputState();
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4798      	blx	r3

    // Update previous game state.
    model->previousGameState = model->currentGameState;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

    // Check if the "OK" action is triggered (usually to confirm player name)
    if (controller->checkAction_Ok())
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4798      	blx	r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d011      	beq.n	8000910 <handleInputNameScreen+0x4c>
    {
        // Modify the player's name
        modifyPlayerName();
 80008ec:	f001 fc30 	bl	8002150 <modifyPlayerName>

        // Prepare data for the next game state:
        // Create a random game object
        createRandObject(model);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fb9f 	bl	8001034 <createRandObject>

        // Set the last move time
        model->lastMoveTime = model->dependencies.getTime();
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80008fc:	4798      	blx	r3
 80008fe:	4602      	mov	r2, r0
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

        // Switch to the game play state
        model->currentGameState = State_Game_Play;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2204      	movs	r2, #4
 800090a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
            // do nothing
        }
        else
            Tetris_Player[Current_Tetris_Player].name[model->selectedChar]--;
    }
}
 800090e:	e151      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
    else if (controller->checkAction_Right())
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	4798      	blx	r3
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d021      	beq.n	8000960 <handleInputNameScreen+0x9c>
        if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] != '-' &&  model->selectedChar < (MAX_PLAYER_NAME_LENGTH - 1))
 800091c:	4ba7      	ldr	r3, [pc, #668]	; (8000bbc <handleInputNameScreen+0x2f8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000928:	4618      	mov	r0, r3
 800092a:	4aa5      	ldr	r2, [pc, #660]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 800092c:	460b      	mov	r3, r1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	4403      	add	r3, r0
 8000938:	3302      	adds	r3, #2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b2d      	cmp	r3, #45	; 0x2d
 800093e:	f000 8139 	beq.w	8000bb4 <handleInputNameScreen+0x2f0>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000948:	2b06      	cmp	r3, #6
 800094a:	f200 8133 	bhi.w	8000bb4 <handleInputNameScreen+0x2f0>
            model->selectedChar++;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
}
 800095e:	e129      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
    else if (controller->checkAction_Left())
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4798      	blx	r3
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <handleInputNameScreen+0xc6>
        if (model->selectedChar > 0)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 811e 	beq.w	8000bb4 <handleInputNameScreen+0x2f0>
            model->selectedChar--;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800097e:	3b01      	subs	r3, #1
 8000980:	b2da      	uxtb	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
}
 8000988:	e114      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
    else if (controller->checkAction_Up())
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	4798      	blx	r3
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80a4 	beq.w	8000ae0 <handleInputNameScreen+0x21c>
        if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] == '-')
 8000998:	4b88      	ldr	r3, [pc, #544]	; (8000bbc <handleInputNameScreen+0x2f8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80009a4:	4618      	mov	r0, r3
 80009a6:	4a86      	ldr	r2, [pc, #536]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 80009a8:	460b      	mov	r3, r1
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	4403      	add	r3, r0
 80009b4:	3302      	adds	r3, #2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b2d      	cmp	r3, #45	; 0x2d
 80009ba:	d128      	bne.n	8000a0e <handleInputNameScreen+0x14a>
            if (model->selectedChar == 0)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d111      	bne.n	80009ea <handleInputNameScreen+0x126>
                Tetris_Player[Current_Tetris_Player].name[model->selectedChar] = 'A';
 80009c6:	4b7d      	ldr	r3, [pc, #500]	; (8000bbc <handleInputNameScreen+0x2f8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80009d2:	4618      	mov	r0, r3
 80009d4:	4a7a      	ldr	r2, [pc, #488]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 80009d6:	460b      	mov	r3, r1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	4403      	add	r3, r0
 80009e2:	3302      	adds	r3, #2
 80009e4:	2241      	movs	r2, #65	; 0x41
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	e0e4      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
                Tetris_Player[Current_Tetris_Player].name[model->selectedChar] = 'a';
 80009ea:	4b74      	ldr	r3, [pc, #464]	; (8000bbc <handleInputNameScreen+0x2f8>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80009f6:	4618      	mov	r0, r3
 80009f8:	4a71      	ldr	r2, [pc, #452]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 80009fa:	460b      	mov	r3, r1
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	4403      	add	r3, r0
 8000a06:	3302      	adds	r3, #2
 8000a08:	2261      	movs	r2, #97	; 0x61
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	e0d2      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
            if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] < 'Z' && model->selectedChar == 0)
 8000a0e:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	4a68      	ldr	r2, [pc, #416]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000a1e:	460b      	mov	r3, r1
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	4403      	add	r3, r0
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b59      	cmp	r3, #89	; 0x59
 8000a30:	d820      	bhi.n	8000a74 <handleInputNameScreen+0x1b0>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <handleInputNameScreen+0x1b0>
                Tetris_Player[Current_Tetris_Player].name[model->selectedChar]++;
 8000a3c:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	485d      	ldr	r0, [pc, #372]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4403      	add	r3, r0
 8000a56:	440b      	add	r3, r1
 8000a58:	3302      	adds	r3, #2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2dc      	uxtb	r4, r3
 8000a60:	4857      	ldr	r0, [pc, #348]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4403      	add	r3, r0
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3302      	adds	r3, #2
 8000a70:	4622      	mov	r2, r4
 8000a72:	701a      	strb	r2, [r3, #0]
            if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] < 'z' && model->selectedChar != 0)
 8000a74:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000a80:	4618      	mov	r0, r3
 8000a82:	4a4f      	ldr	r2, [pc, #316]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000a84:	460b      	mov	r3, r1
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	440b      	add	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4403      	add	r3, r0
 8000a90:	3302      	adds	r3, #2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b79      	cmp	r3, #121	; 0x79
 8000a96:	f200 808d 	bhi.w	8000bb4 <handleInputNameScreen+0x2f0>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 8087 	beq.w	8000bb4 <handleInputNameScreen+0x2f0>
                Tetris_Player[Current_Tetris_Player].name[model->selectedChar]++;
 8000aa6:	4b45      	ldr	r3, [pc, #276]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4842      	ldr	r0, [pc, #264]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4403      	add	r3, r0
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2dc      	uxtb	r4, r3
 8000aca:	483d      	ldr	r0, [pc, #244]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4403      	add	r3, r0
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3302      	adds	r3, #2
 8000ada:	4622      	mov	r2, r4
 8000adc:	701a      	strb	r2, [r3, #0]
}
 8000ade:	e069      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
    else if (controller->checkAction_Down())
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	4798      	blx	r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d063      	beq.n	8000bb4 <handleInputNameScreen+0x2f0>
        if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] == 'A' || Tetris_Player[Current_Tetris_Player].name[model->selectedChar] == 'a')
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000af8:	4618      	mov	r0, r3
 8000afa:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000afc:	460b      	mov	r3, r1
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	4403      	add	r3, r0
 8000b08:	3302      	adds	r3, #2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b41      	cmp	r3, #65	; 0x41
 8000b0e:	d011      	beq.n	8000b34 <handleInputNameScreen+0x270>
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000b20:	460b      	mov	r3, r1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	4403      	add	r3, r0
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b61      	cmp	r3, #97	; 0x61
 8000b32:	d111      	bne.n	8000b58 <handleInputNameScreen+0x294>
            Tetris_Player[Current_Tetris_Player].name[model->selectedChar] = '-';
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000b40:	4618      	mov	r0, r3
 8000b42:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000b44:	460b      	mov	r3, r1
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4403      	add	r3, r0
 8000b50:	3302      	adds	r3, #2
 8000b52:	222d      	movs	r2, #45	; 0x2d
 8000b54:	701a      	strb	r2, [r3, #0]
}
 8000b56:	e02d      	b.n	8000bb4 <handleInputNameScreen+0x2f0>
        else if (Tetris_Player[Current_Tetris_Player].name[model->selectedChar] == '-')
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000b64:	4618      	mov	r0, r3
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	4403      	add	r3, r0
 8000b74:	3302      	adds	r3, #2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b2d      	cmp	r3, #45	; 0x2d
 8000b7a:	d01b      	beq.n	8000bb4 <handleInputNameScreen+0x2f0>
            Tetris_Player[Current_Tetris_Player].name[model->selectedChar]--;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <handleInputNameScreen+0x2f8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4403      	add	r3, r0
 8000b96:	440b      	add	r3, r1
 8000b98:	3302      	adds	r3, #2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b2dc      	uxtb	r4, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <handleInputNameScreen+0x2fc>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4403      	add	r3, r0
 8000bac:	440b      	add	r3, r1
 8000bae:	3302      	adds	r3, #2
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	701a      	strb	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	200000d8 	.word	0x200000d8
 8000bc0:	20000074 	.word	0x20000074

08000bc4 <handleTopScoresScreen>:


static void handleTopScoresScreen (Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    // Update input state.
    controller->ubdateInputState();
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4798      	blx	r3

    // Update previous game state.
    model->previousGameState = model->currentGameState;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

    // Check if the "OK" action is triggered
    if (controller->checkAction_Ok())
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4798      	blx	r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d007      	beq.n	8000bfc <handleTopScoresScreen+0x38>
    {
        // Select the "Previous" button and switch to the welcome screen
        model->selectedOption   = OPTION_TOP_SCORES;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
        model->currentGameState = State_Welcome;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <handleGameScreen>:


static void handleGameScreen(Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    // Update input state.
    controller->ubdateInputState();
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4798      	blx	r3

    // Update previous game state.
    model->previousGameState = model->currentGameState;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

    // Check if it's time for the moving object to move down
    if (handlePeriodicMoveDown(model))
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f9ab 	bl	8000f7c <handlePeriodicMoveDown>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d138      	bne.n	8000c9e <handleGameScreen+0x9a>
        return; // Exit the function, as the move down was handled

    // Check for other controller actions
    if (controller->checkAction_Rotate())
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4798      	blx	r3
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <handleGameScreen+0x3c>
        rotateObject(model);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fd13 	bl	8001664 <rotateObject>
 8000c3e:	e02a      	b.n	8000c96 <handleGameScreen+0x92>

    else if (controller->checkAction_Right())
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	4798      	blx	r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <handleGameScreen+0x52>
        moveObject(model, Action_Move_Right);
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fa94 	bl	800117c <moveObject>
 8000c54:	e01f      	b.n	8000c96 <handleGameScreen+0x92>

    else if (controller->checkAction_Left())
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <handleGameScreen+0x68>
        moveObject(model, Action_Move_Left);
 8000c62:	2100      	movs	r1, #0
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fa89 	bl	800117c <moveObject>
 8000c6a:	e014      	b.n	8000c96 <handleGameScreen+0x92>

    else if (controller->checkAction_Down())
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4798      	blx	r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <handleGameScreen+0x7e>
        moveObject(model, Action_Move_Down);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 fa7e 	bl	800117c <moveObject>
 8000c80:	e009      	b.n	8000c96 <handleGameScreen+0x92>

    else if (controller->checkAction_Drob_Down())
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	4798      	blx	r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <handleGameScreen+0x92>
        moveObject(model, Action_Drop_Down);        // Drop the current moving object down quickly
 8000c8e:	2103      	movs	r1, #3
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 fa73 	bl	800117c <moveObject>

    // Update the game state and perform any necessary actions
    (void)updateGamePlay(model);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f9a3 	bl	8000fe2 <updateGamePlay>
 8000c9c:	e000      	b.n	8000ca0 <handleGameScreen+0x9c>
        return; // Exit the function, as the move down was handled
 8000c9e:	bf00      	nop
}
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <handleGameOverScreen>:


static void handleGameOverScreen (Tetris_Model_t *model, Tetris_Controller_t *controller)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
    // Update input state.
    controller->ubdateInputState();
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4798      	blx	r3

    // Update previous game state.
    model->previousGameState = model->currentGameState;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    
    // Check if the "OK" action is triggered
    if (controller->checkAction_Ok())
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <handleGameOverScreen+0x36>
    {
        // Reset the game data and switch to the welcome screen
        resetGame(model);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fa04 	bl	80010dc <resetGame>
        model->currentGameState = State_Welcome;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
    }
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Tetris_Model_init>:

Tetris_Player_t Tetris_Player[MAX_PLAYERS];    // Array to store Tetris player data.
uint8 Current_Tetris_Player;                   // Index of the current Tetris player.

Tetris_Model_init(Tetris_Model_t *model, Dependencies_t *dependencies)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    // Initialize model dependencies with external functions.
    model->dependencies.getRandomNumber = dependencies->getRandomNumber;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    model->dependencies.getTime = dependencies->getTime;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    // Clear the Tetris grid blocks.
    cleargridBlocks(model);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f83e 	bl	8000d84 <cleargridBlocks>

    // Initialize the current level.
    model->currentLevel = 1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

    // Initialize the current player's score and name.
    Tetris_Player[Current_Tetris_Player].score = 0;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <Tetris_Model_init+0x98>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <Tetris_Model_init+0x9c>)
 8000d18:	460b      	mov	r3, r1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e010      	b.n	8000d4e <Tetris_Model_init+0x6a>
        Tetris_Player[Current_Tetris_Player].name[charIndex] = '-';
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <Tetris_Model_init+0x98>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	4912      	ldr	r1, [pc, #72]	; (8000d80 <Tetris_Model_init+0x9c>)
 8000d36:	4603      	mov	r3, r0
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4403      	add	r3, r0
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	440b      	add	r3, r1
 8000d40:	4413      	add	r3, r2
 8000d42:	3302      	adds	r3, #2
 8000d44:	222d      	movs	r2, #45	; 0x2d
 8000d46:	701a      	strb	r2, [r3, #0]
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d9eb      	bls.n	8000d2c <Tetris_Model_init+0x48>

    // Initialize the selected option, level, and rotation state.
    model->selectedOption = OPTION_PLAY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    model->rotateState    = ORIENTATION_0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

    // Initialize the current and previous game states.
    model->currentGameState  = State_Welcome; // State_Welcome is defined in Tetris_Controller.h
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
    model->previousGameState = State_Null;    // State_Null is an undefined state.
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000d8 	.word	0x200000d8
 8000d80:	20000074 	.word	0x20000074

08000d84 <cleargridBlocks>:


// Clears all blocks in the game grid.
void cleargridBlocks(Tetris_Model_t *model)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    for(uint8 row = 0; row < GRID_ROWS; row++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e016      	b.n	8000dc0 <cleargridBlocks+0x3c>
        for(uint8 column = 0; column < GRID_COLUMNS; column++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	73bb      	strb	r3, [r7, #14]
 8000d96:	e00d      	b.n	8000db4 <cleargridBlocks+0x30>
            model->grid[row][column] = 0;                       // Set the grid cell to empty (0).
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	7bb9      	ldrb	r1, [r7, #14]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4403      	add	r3, r0
 8000da8:	440b      	add	r3, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
        for(uint8 column = 0; column < GRID_COLUMNS; column++)
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73bb      	strb	r3, [r7, #14]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	d9ee      	bls.n	8000d98 <cleargridBlocks+0x14>
    for(uint8 row = 0; row < GRID_ROWS; row++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b13      	cmp	r3, #19
 8000dc4:	d9e5      	bls.n	8000d92 <cleargridBlocks+0xe>
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
	...

08000dd4 <isMovingObjectStable>:

// Checks if the current moving object is stable (cannot move down further).
boolean isMovingObjectStable(Tetris_Model_t *model)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    boolean result = FALSE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]

    for(uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	e044      	b.n	8000e70 <isMovingObjectStable+0x9c>
    {
        if((model->grid[(model->currentMovingObject.block[blockIndex].y + 1)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	3364      	adds	r3, #100	; 0x64
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	7bb9      	ldrb	r1, [r7, #14]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3164      	adds	r1, #100	; 0x64
 8000dfc:	f913 3011 	ldrsb.w	r3, [r3, r1, lsl #1]
 8000e00:	4618      	mov	r0, r3
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	440b      	add	r3, r1
 8000e0e:	4403      	add	r3, r0
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <isMovingObjectStable+0x54>
           (model->currentMovingObject.block[blockIndex].y + 1) > (GRID_ROWS - 1))
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	3364      	adds	r3, #100	; 0x64
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	f993 3001 	ldrsb.w	r3, [r3, #1]
        if((model->grid[(model->currentMovingObject.block[blockIndex].y + 1)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 8000e24:	2b12      	cmp	r3, #18
 8000e26:	dd20      	ble.n	8000e6a <isMovingObjectStable+0x96>
        {
            // The object is stable because it cannot move down further.
            result = TRUE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]

            // Increase the player's score based on the stable object and current level.
            Tetris_Player[Current_Tetris_Player].score += (STABLE_OBJECT_SCORE * model->currentLevel);
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <isMovingObjectStable+0xb0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <isMovingObjectStable+0xb4>)
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	0089      	lsls	r1, r1, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <isMovingObjectStable+0xb0>)
 8000e52:	7809      	ldrb	r1, [r1, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	b298      	uxth	r0, r3
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <isMovingObjectStable+0xb4>)
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	4602      	mov	r2, r0
 8000e66:	801a      	strh	r2, [r3, #0]

            break;
 8000e68:	e005      	b.n	8000e76 <isMovingObjectStable+0xa2>
    for(uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73bb      	strb	r3, [r7, #14]
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d9b7      	bls.n	8000de6 <isMovingObjectStable+0x12>
        }
    }

    return result;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200000d8 	.word	0x200000d8
 8000e88:	20000074 	.word	0x20000074

08000e8c <isGameOver>:


// Checks if the game is over by examining the top row of the grid.
boolean isGameOver(Tetris_Model_t *model)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    boolean result = FALSE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

    for(uint8 blockIndex = 0; blockIndex < GRID_COLUMNS; blockIndex++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]
 8000e9c:	e00a      	b.n	8000eb4 <isGameOver+0x28>
    {
        if(model->grid[0][blockIndex] != 0)
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <isGameOver+0x22>
        {
            // The game is over because there are blocks in the top row of the grid.
            result = TRUE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
            break;
 8000eac:	e005      	b.n	8000eba <isGameOver+0x2e>
    for(uint8 blockIndex = 0; blockIndex < GRID_COLUMNS; blockIndex++)
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	73bb      	strb	r3, [r7, #14]
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	d9f1      	bls.n	8000e9e <isGameOver+0x12>
        }
    }

    return result;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <sortPlayers>:

// Sorts the player scores in descending order.
void sortPlayers()
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
    if(Current_Tetris_Player > 0)
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <sortPlayers+0xac>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d049      	beq.n	8000f6a <sortPlayers+0xa2>
    {
        Tetris_Player_t temp = Tetris_Player[Current_Tetris_Player];
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <sortPlayers+0xac>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <sortPlayers+0xb0>)
 8000ede:	460b      	mov	r3, r1
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	441a      	add	r2, r3
 8000ee8:	463b      	mov	r3, r7
 8000eea:	6810      	ldr	r0, [r2, #0]
 8000eec:	6851      	ldr	r1, [r2, #4]
 8000eee:	c303      	stmia	r3!, {r0, r1}
 8000ef0:	8912      	ldrh	r2, [r2, #8]
 8000ef2:	801a      	strh	r2, [r3, #0]
        int index = Current_Tetris_Player - 1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <sortPlayers+0xac>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]

        while(index >= 0 && temp.score > Tetris_Player[index].score)
 8000efc:	e018      	b.n	8000f30 <sortPlayers+0x68>
        {
            Tetris_Player[index + 1] = Tetris_Player[index];
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	491d      	ldr	r1, [pc, #116]	; (8000f78 <sortPlayers+0xb0>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	18c8      	adds	r0, r1, r3
 8000f0e:	491a      	ldr	r1, [pc, #104]	; (8000f78 <sortPlayers+0xb0>)
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	6810      	ldr	r0, [r2, #0]
 8000f20:	6851      	ldr	r1, [r2, #4]
 8000f22:	6018      	str	r0, [r3, #0]
 8000f24:	6059      	str	r1, [r3, #4]
 8000f26:	8912      	ldrh	r2, [r2, #8]
 8000f28:	811a      	strh	r2, [r3, #8]
            index--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
        while(index >= 0 && temp.score > Tetris_Player[index].score)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0a      	blt.n	8000f4c <sortPlayers+0x84>
 8000f36:	8839      	ldrh	r1, [r7, #0]
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <sortPlayers+0xb0>)
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4403      	add	r3, r0
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d8d8      	bhi.n	8000efe <sortPlayers+0x36>
        }

        Tetris_Player[index + 1] = temp;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	4909      	ldr	r1, [pc, #36]	; (8000f78 <sortPlayers+0xb0>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	440b      	add	r3, r1
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	463b      	mov	r3, r7
 8000f60:	cb03      	ldmia	r3!, {r0, r1}
 8000f62:	6010      	str	r0, [r2, #0]
 8000f64:	6051      	str	r1, [r2, #4]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	8113      	strh	r3, [r2, #8]
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	200000d8 	.word	0x200000d8
 8000f78:	20000074 	.word	0x20000074

08000f7c <handlePeriodicMoveDown>:

// This function handles the periodic downward movement of the current object in the game.
// It calculates the time since the last move and, if the specified period has elapsed,
// either updates the game state or moves the object down.
boolean handlePeriodicMoveDown(Tetris_Model_t *model)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    uint32 currentTime = model->dependencies.getTime();
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000f8a:	4798      	blx	r3
 8000f8c:	60f8      	str	r0, [r7, #12]

    // Check if enough time has passed since the last move down.
    if ((currentTime - model->lastMoveTime) > (MOVE_DOWN_PERIOD - (model->currentLevel * 50)))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	f892 20e3 	ldrb.w	r2, [r2, #227]	; 0xe3
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8000fa4:	fb01 f202 	mul.w	r2, r1, r2
 8000fa8:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d913      	bls.n	8000fd8 <handlePeriodicMoveDown+0x5c>
    {
        model->refreshFlag = TRUE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        model->lastMoveTime = currentTime;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

        // Try to update the game play or move the object down.
        if (updateGamePlay(model))
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f80e 	bl	8000fe2 <updateGamePlay>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <handlePeriodicMoveDown+0x58>
            // Object is stable, update the game state and create another random moving object.
        }
        else
        {
            // Move the object down.
            moveObject(model, Action_Move_Down);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f8d4 	bl	800117c <moveObject>
        }

        return TRUE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <handlePeriodicMoveDown+0x5e>
    }

    return FALSE;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <updateGamePlay>:

// This function updates the game state during game play.
// It checks if the current moving object is stable, adds it to the grid if so,
// checks for completed lines, and handles game over or continues with a new object.
boolean updateGamePlay(Tetris_Model_t *model)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
    if (isMovingObjectStable(model))
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fef2 	bl	8000dd4 <isMovingObjectStable>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d019      	beq.n	800102a <updateGamePlay+0x48>
    {
        model->refreshFlag = TRUE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

        // Add the stable moving object to the grid.
        addMovingObjectToGrid(model);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 fa20 	bl	8001444 <addMovingObjectToGrid>

        // Check for completed lines and clear them.
        checkAndClearLines(model);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fa47 	bl	8001498 <checkAndClearLines>

        // Check if the game is over.
        if (isGameOver(model))
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff3e 	bl	8000e8c <isGameOver>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <updateGamePlay+0x3e>
            model->currentGameState = State_Game_Over;  // Game over condition, change the game state.
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2205      	movs	r2, #5
 800101a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 800101e:	e002      	b.n	8001026 <updateGamePlay+0x44>

        else
            createRandObject(model);                    // Continue the game by creating a new random object.
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f807 	bl	8001034 <createRandObject>

        return TRUE;
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <updateGamePlay+0x4a>
    }

    return FALSE;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <createRandObject>:


// This function creates a random Tetris game object and initializes its properties.
void createRandObject(Tetris_Model_t *model)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    uint16 randNum = model->dependencies.getRandomNumber();
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001042:	4798      	blx	r3
 8001044:	4603      	mov	r3, r0
 8001046:	81bb      	strh	r3, [r7, #12]

    model->CurrentObjectType = (uint8)(randNum % (OBJECT_COUNT));
 8001048:	89ba      	ldrh	r2, [r7, #12]
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <createRandObject+0xa0>)
 800104c:	fba3 1302 	umull	r1, r3, r3, r2
 8001050:	1ad1      	subs	r1, r2, r3
 8001052:	0849      	lsrs	r1, r1, #1
 8001054:	440b      	add	r3, r1
 8001056:	0899      	lsrs	r1, r3, #2
 8001058:	460b      	mov	r3, r1
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a5b      	subs	r3, r3, r1
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    model->rotateState = ORIENTATION_0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e025      	b.n	80010c4 <createRandObject+0x90>
    {
        // Set the initial coordinates for each block of the object.
        model->currentMovingObject.block[blockIndex].x = initialObjectsCoordinates[model->CurrentObjectType].block[blockIndex].x;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800107e:	4619      	mov	r1, r3
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	4814      	ldr	r0, [pc, #80]	; (80010d8 <createRandObject+0xa4>)
 8001086:	0089      	lsls	r1, r1, #2
 8001088:	440b      	add	r3, r1
 800108a:	f910 1013 	ldrsb.w	r1, [r0, r3, lsl #1]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3264      	adds	r2, #100	; 0x64
 8001092:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
        model->currentMovingObject.block[blockIndex].y = initialObjectsCoordinates[model->CurrentObjectType].block[blockIndex].y;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800109c:	461a      	mov	r2, r3
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	7bf9      	ldrb	r1, [r7, #15]
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <createRandObject+0xa4>)
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4403      	add	r3, r0
 80010ac:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	f101 0364 	add.w	r3, r1, #100	; 0x64
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	4602      	mov	r2, r0
 80010bc:	705a      	strb	r2, [r3, #1]
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d9d6      	bls.n	8001078 <createRandObject+0x44>
    }
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24924925 	.word	0x24924925
 80010d8:	080046cc 	.word	0x080046cc

080010dc <resetGame>:


// This function resets the Tetris game to its initial state.
void resetGame(Tetris_Model_t *model)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    // Clear the grid blocks and sort the player scores.
    cleargridBlocks(model);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fe4d 	bl	8000d84 <cleargridBlocks>
    sortPlayers();
 80010ea:	f7ff feed 	bl	8000ec8 <sortPlayers>

    // Move to the next player or wrap around if at the last player.
    Current_Tetris_Player++;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <resetGame+0x98>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <resetGame+0x98>)
 80010f8:	701a      	strb	r2, [r3, #0]
    if (Current_Tetris_Player >= MAX_PLAYERS)
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <resetGame+0x98>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b09      	cmp	r3, #9
 8001100:	d902      	bls.n	8001108 <resetGame+0x2c>
        Current_Tetris_Player = MAX_PLAYERS - 1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <resetGame+0x98>)
 8001104:	2209      	movs	r2, #9
 8001106:	701a      	strb	r2, [r3, #0]

    // Reset the game properties for the new player.
    model->currentLevel = 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    Tetris_Player[Current_Tetris_Player].score = 0;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <resetGame+0x98>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <resetGame+0x9c>)
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]

    // Initialize the player's name with place holders.
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e010      	b.n	800114e <resetGame+0x72>
        Tetris_Player[Current_Tetris_Player].name[charIndex] = '-';
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <resetGame+0x98>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	4910      	ldr	r1, [pc, #64]	; (8001178 <resetGame+0x9c>)
 8001136:	4603      	mov	r3, r0
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4403      	add	r3, r0
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	440b      	add	r3, r1
 8001140:	4413      	add	r3, r2
 8001142:	3302      	adds	r3, #2
 8001144:	222d      	movs	r2, #45	; 0x2d
 8001146:	701a      	strb	r2, [r3, #0]
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3301      	adds	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b07      	cmp	r3, #7
 8001152:	d9eb      	bls.n	800112c <resetGame+0x50>

    // Reset other game state variables.
    model->selectedOption = OPTION_PLAY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    model->rotateState    = ORIENTATION_0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    model->currentLevel   = 1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000d8 	.word	0x200000d8
 8001178:	20000074 	.word	0x20000074

0800117c <moveObject>:


// This function moves the current Tetris game object based on the user's action.
// It validates the move and updates the object's position accordingly.
void moveObject(Tetris_Model_t *model, UserAction action)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
    boolean MovingValidation = TRUE;
 8001188:	2301      	movs	r3, #1
 800118a:	75fb      	strb	r3, [r7, #23]

    // Check the user's action and update the object's position accordingly.
    switch (action)
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b03      	cmp	r3, #3
 8001190:	f200 814b 	bhi.w	800142a <moveObject+0x2ae>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <moveObject+0x20>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080012d7 	.word	0x080012d7
 80011a0:	08001249 	.word	0x08001249
 80011a4:	080011ad 	.word	0x080011ad
 80011a8:	08001363 	.word	0x08001363
    {
        case Action_Move_Down:
            // Check if the object can move down and update its position.
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
 80011b0:	e026      	b.n	8001200 <moveObject+0x84>
            {
                if ((model->grid[(model->currentMovingObject.block[blockIndex].y + 1)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	3364      	adds	r3, #100	; 0x64
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	7db9      	ldrb	r1, [r7, #22]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3164      	adds	r1, #100	; 0x64
 80011c8:	f913 3011 	ldrsb.w	r3, [r3, r1, lsl #1]
 80011cc:	4618      	mov	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	440b      	add	r3, r1
 80011da:	4403      	add	r3, r0
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d108      	bne.n	80011f4 <moveObject+0x78>
                    (model->currentMovingObject.block[blockIndex].y == (GRID_ROWS - 1)))
 80011e2:	7dbb      	ldrb	r3, [r7, #22]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	3364      	adds	r3, #100	; 0x64
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
                if ((model->grid[(model->currentMovingObject.block[blockIndex].y + 1)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 80011f0:	2b13      	cmp	r3, #19
 80011f2:	d102      	bne.n	80011fa <moveObject+0x7e>
                {
                    MovingValidation = FALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
                    break;
 80011f8:	e005      	b.n	8001206 <moveObject+0x8a>
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80011fa:	7dbb      	ldrb	r3, [r7, #22]
 80011fc:	3301      	adds	r3, #1
 80011fe:	75bb      	strb	r3, [r7, #22]
 8001200:	7dbb      	ldrb	r3, [r7, #22]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d9d5      	bls.n	80011b2 <moveObject+0x36>
                }
            }

            // Move object down if it is valid.
            if (MovingValidation)
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8107 	beq.w	800141c <moveObject+0x2a0>
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800120e:	2300      	movs	r3, #0
 8001210:	757b      	strb	r3, [r7, #21]
 8001212:	e015      	b.n	8001240 <moveObject+0xc4>
                    model->currentMovingObject.block[blockIndex].y++;
 8001214:	7d7a      	ldrb	r2, [r7, #21]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f102 0364 	add.w	r3, r2, #100	; 0x64
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	b258      	sxtb	r0, r3
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	4602      	mov	r2, r0
 8001238:	705a      	strb	r2, [r3, #1]
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800123a:	7d7b      	ldrb	r3, [r7, #21]
 800123c:	3301      	adds	r3, #1
 800123e:	757b      	strb	r3, [r7, #21]
 8001240:	7d7b      	ldrb	r3, [r7, #21]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d9e6      	bls.n	8001214 <moveObject+0x98>


            break;
 8001246:	e0e9      	b.n	800141c <moveObject+0x2a0>

        case Action_Move_Right:
            // Check if the object can move right and update its position.
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001248:	2300      	movs	r3, #0
 800124a:	753b      	strb	r3, [r7, #20]
 800124c:	e024      	b.n	8001298 <moveObject+0x11c>
            {
                if ((model->grid[model->currentMovingObject.block[blockIndex].y][(model->currentMovingObject.block[blockIndex].x) + 1] != 0) ||
 800124e:	7d3b      	ldrb	r3, [r7, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	3364      	adds	r3, #100	; 0x64
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800125c:	4618      	mov	r0, r3
 800125e:	7d3a      	ldrb	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3264      	adds	r2, #100	; 0x64
 8001264:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4603      	mov	r3, r0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	440b      	add	r3, r1
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <moveObject+0x110>
                    (model->currentMovingObject.block[blockIndex].x == (GRID_COLUMNS - 1)))
 800127e:	7d3a      	ldrb	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3264      	adds	r2, #100	; 0x64
 8001284:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
                if ((model->grid[model->currentMovingObject.block[blockIndex].y][(model->currentMovingObject.block[blockIndex].x) + 1] != 0) ||
 8001288:	2b09      	cmp	r3, #9
 800128a:	d102      	bne.n	8001292 <moveObject+0x116>
                {
                    MovingValidation = FALSE;
 800128c:	2300      	movs	r3, #0
 800128e:	75fb      	strb	r3, [r7, #23]
                    break;
 8001290:	e005      	b.n	800129e <moveObject+0x122>
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001292:	7d3b      	ldrb	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	753b      	strb	r3, [r7, #20]
 8001298:	7d3b      	ldrb	r3, [r7, #20]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d9d7      	bls.n	800124e <moveObject+0xd2>
                }
            }

            // Move object right if it is valid.
            if (MovingValidation)
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80bd 	beq.w	8001420 <moveObject+0x2a4>
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	74fb      	strb	r3, [r7, #19]
 80012aa:	e010      	b.n	80012ce <moveObject+0x152>
                    model->currentMovingObject.block[blockIndex].x++;
 80012ac:	7cfb      	ldrb	r3, [r7, #19]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80012b4:	f912 2011 	ldrsb.w	r2, [r2, r1, lsl #1]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	3201      	adds	r2, #1
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	b251      	sxtb	r1, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	3364      	adds	r3, #100	; 0x64
 80012c4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80012c8:	7cfb      	ldrb	r3, [r7, #19]
 80012ca:	3301      	adds	r3, #1
 80012cc:	74fb      	strb	r3, [r7, #19]
 80012ce:	7cfb      	ldrb	r3, [r7, #19]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d9eb      	bls.n	80012ac <moveObject+0x130>

            break;
 80012d4:	e0a4      	b.n	8001420 <moveObject+0x2a4>

        case Action_Move_Left:
            // Check if the object can move left and update its position.
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	74bb      	strb	r3, [r7, #18]
 80012da:	e024      	b.n	8001326 <moveObject+0x1aa>
            {
                if ((model->grid[model->currentMovingObject.block[blockIndex].y][(model->currentMovingObject.block[blockIndex].x) - 1] != 0) ||
 80012dc:	7cbb      	ldrb	r3, [r7, #18]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	3364      	adds	r3, #100	; 0x64
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012ea:	4618      	mov	r0, r3
 80012ec:	7cba      	ldrb	r2, [r7, #18]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3264      	adds	r2, #100	; 0x64
 80012f2:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4603      	mov	r3, r0
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4403      	add	r3, r0
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	440b      	add	r3, r1
 8001304:	4413      	add	r3, r2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <moveObject+0x19e>
                    (model->currentMovingObject.block[blockIndex].x == 0))
 800130c:	7cba      	ldrb	r2, [r7, #18]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3264      	adds	r2, #100	; 0x64
 8001312:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
                if ((model->grid[model->currentMovingObject.block[blockIndex].y][(model->currentMovingObject.block[blockIndex].x) - 1] != 0) ||
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <moveObject+0x1a4>
                {
                    MovingValidation = FALSE;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
                    break;
 800131e:	e005      	b.n	800132c <moveObject+0x1b0>
            for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001320:	7cbb      	ldrb	r3, [r7, #18]
 8001322:	3301      	adds	r3, #1
 8001324:	74bb      	strb	r3, [r7, #18]
 8001326:	7cbb      	ldrb	r3, [r7, #18]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d9d7      	bls.n	80012dc <moveObject+0x160>
                }
            }

            // Move object left if it is valid.
            if (MovingValidation)
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d078      	beq.n	8001424 <moveObject+0x2a8>
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001332:	2300      	movs	r3, #0
 8001334:	747b      	strb	r3, [r7, #17]
 8001336:	e010      	b.n	800135a <moveObject+0x1de>
                    model->currentMovingObject.block[blockIndex].x--;
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001340:	f912 2011 	ldrsb.w	r2, [r2, r1, lsl #1]
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	3a01      	subs	r2, #1
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	b251      	sxtb	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	3364      	adds	r3, #100	; 0x64
 8001350:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001354:	7c7b      	ldrb	r3, [r7, #17]
 8001356:	3301      	adds	r3, #1
 8001358:	747b      	strb	r3, [r7, #17]
 800135a:	7c7b      	ldrb	r3, [r7, #17]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d9eb      	bls.n	8001338 <moveObject+0x1bc>

            break;
 8001360:	e060      	b.n	8001424 <moveObject+0x2a8>

        case Action_Drop_Down:
            // Drop the object down as far as possible.
            uint8 counter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	743b      	strb	r3, [r7, #16]
            do
            {
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e02b      	b.n	80013c4 <moveObject+0x248>
                {
                    if ((model->grid[(model->currentMovingObject.block[blockIndex].y + 1 + counter)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	3364      	adds	r3, #100	; 0x64
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	7c3b      	ldrb	r3, [r7, #16]
 800137e:	441a      	add	r2, r3
 8001380:	7bf9      	ldrb	r1, [r7, #15]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3164      	adds	r1, #100	; 0x64
 8001386:	f913 3011 	ldrsb.w	r3, [r3, r1, lsl #1]
 800138a:	4618      	mov	r0, r3
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	440b      	add	r3, r1
 8001398:	4403      	add	r3, r0
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10b      	bne.n	80013b8 <moveObject+0x23c>
                        (model->currentMovingObject.block[blockIndex].y + 1 + counter) == GRID_ROWS)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	3364      	adds	r3, #100	; 0x64
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	4413      	add	r3, r2
                    if ((model->grid[(model->currentMovingObject.block[blockIndex].y + 1 + counter)][model->currentMovingObject.block[blockIndex].x] != 0) ||
 80013b4:	2b14      	cmp	r3, #20
 80013b6:	d102      	bne.n	80013be <moveObject+0x242>
                    {
                        MovingValidation = FALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	75fb      	strb	r3, [r7, #23]
                        break;
 80013bc:	e005      	b.n	80013ca <moveObject+0x24e>
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d9d0      	bls.n	800136c <moveObject+0x1f0>
                    }
                }

                if (MovingValidation)
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <moveObject+0x25a>
                    counter++;
 80013d0:	7c3b      	ldrb	r3, [r7, #16]
 80013d2:	3301      	adds	r3, #1
 80013d4:	743b      	strb	r3, [r7, #16]

            } while (MovingValidation);
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1c4      	bne.n	8001366 <moveObject+0x1ea>

            // Move object down until it becomes stable.
            if (counter)
 80013dc:	7c3b      	ldrb	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d022      	beq.n	8001428 <moveObject+0x2ac>
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73bb      	strb	r3, [r7, #14]
 80013e6:	e015      	b.n	8001414 <moveObject+0x298>
                    model->currentMovingObject.block[blockIndex].y += counter;
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	3364      	adds	r3, #100	; 0x64
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	7c3b      	ldrb	r3, [r7, #16]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	b251      	sxtb	r1, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	3364      	adds	r3, #100	; 0x64
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	460a      	mov	r2, r1
 800140c:	705a      	strb	r2, [r3, #1]
                for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	3301      	adds	r3, #1
 8001412:	73bb      	strb	r3, [r7, #14]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d9e6      	bls.n	80013e8 <moveObject+0x26c>

            break;
 800141a:	e005      	b.n	8001428 <moveObject+0x2ac>
            break;
 800141c:	bf00      	nop
 800141e:	e004      	b.n	800142a <moveObject+0x2ae>
            break;
 8001420:	bf00      	nop
 8001422:	e002      	b.n	800142a <moveObject+0x2ae>
            break;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <moveObject+0x2ae>
            break;
 8001428:	bf00      	nop
    }

    // If the move was valid, set the refresh flag to update the game screen.
    if (MovingValidation)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <moveObject+0x2bc>
        model->refreshFlag = TRUE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

}
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <addMovingObjectToGrid>:

// This function adds the current moving Tetris object to the game grid.
void addMovingObjectToGrid(Tetris_Model_t *model)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    // Set the grid cell corresponding to the object's block to 1.
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e019      	b.n	8001486 <addMovingObjectToGrid+0x42>
        model->grid[model->currentMovingObject.block[blockIndex].y][model->currentMovingObject.block[blockIndex].x] = 1;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	3364      	adds	r3, #100	; 0x64
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001460:	4619      	mov	r1, r3
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3264      	adds	r2, #100	; 0x64
 8001468:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
 800146c:	4618      	mov	r0, r3
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	4403      	add	r3, r0
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d9e2      	bls.n	8001452 <addMovingObjectToGrid+0xe>
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <checkAndClearLines>:


// This function checks for and clears completed lines in the game grid.
void checkAndClearLines(Tetris_Model_t *model)
{
 8001498:	b4b0      	push	{r4, r5, r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    uint8 rowsToclean[GRID_ROWS];
    uint8 rowsCounter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Iterate through each row in the grid.
    for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 80014a6:	2313      	movs	r3, #19
 80014a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ac:	e02e      	b.n	800150c <checkAndClearLines+0x74>
    {
        rowsToclean[row] = TRUE;
 80014ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b2:	3328      	adds	r3, #40	; 0x28
 80014b4:	443b      	add	r3, r7
 80014b6:	2201      	movs	r2, #1
 80014b8:	f803 2c1c 	strb.w	r2, [r3, #-28]

        // Check if the entire row is filled with blocks.
        for (uint8 column = 0; column < GRID_COLUMNS; column++)
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014c2:	e01a      	b.n	80014fa <checkAndClearLines+0x62>
        {
            if (model->grid[row][column] == 0)
 80014c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014c8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4403      	add	r3, r0
 80014d8:	440b      	add	r3, r1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <checkAndClearLines+0x58>
            {
                rowsToclean[row] = FALSE;
 80014e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	443b      	add	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 80014ee:	e008      	b.n	8001502 <checkAndClearLines+0x6a>
        for (uint8 column = 0; column < GRID_COLUMNS; column++)
 80014f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014f4:	3301      	adds	r3, #1
 80014f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014fe:	2b09      	cmp	r3, #9
 8001500:	d9e0      	bls.n	80014c4 <checkAndClearLines+0x2c>
    for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 8001502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001506:	3b01      	subs	r3, #1
 8001508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800150c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1cc      	bne.n	80014ae <checkAndClearLines+0x16>
            }
        }
    }

    // Iterate through each row in the grid again to clear completed lines and move the rows above down.
    for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 8001514:	2313      	movs	r3, #19
 8001516:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800151a:	e03f      	b.n	800159c <checkAndClearLines+0x104>
    {
        if (rowsToclean[row])
 800151c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001520:	3328      	adds	r3, #40	; 0x28
 8001522:	443b      	add	r3, r7
 8001524:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <checkAndClearLines+0xa0>
            rowsCounter++;
 800152c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001530:	3301      	adds	r3, #1
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001536:	e02c      	b.n	8001592 <checkAndClearLines+0xfa>
        else
        {
            // Move the rows above the completed line down.
            for (uint8 column = 0; column < GRID_COLUMNS; column++)
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800153e:	e024      	b.n	800158a <checkAndClearLines+0xf2>
                if (rowsCounter)
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01b      	beq.n	8001580 <checkAndClearLines+0xe8>
                    model->grid[row + rowsCounter][column] = model->grid[row][column];
 8001548:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800154c:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8001550:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001558:	441a      	add	r2, r3
 800155a:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800155e:	687d      	ldr	r5, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	442b      	add	r3, r5
 800156a:	4423      	add	r3, r4
 800156c:	781c      	ldrb	r4, [r3, #0]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	4403      	add	r3, r0
 800157c:	4622      	mov	r2, r4
 800157e:	701a      	strb	r2, [r3, #0]
            for (uint8 column = 0; column < GRID_COLUMNS; column++)
 8001580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001584:	3301      	adds	r3, #1
 8001586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800158a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800158e:	2b09      	cmp	r3, #9
 8001590:	d9d6      	bls.n	8001540 <checkAndClearLines+0xa8>
    for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 8001592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800159c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1bb      	bne.n	800151c <checkAndClearLines+0x84>
        }
    }

    // Update the player's score based on the cleared lines.
    Tetris_Player[Current_Tetris_Player].score += (LINE_CLEAR_SCORE * rowsCounter);
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <checkAndClearLines+0x1c4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <checkAndClearLines+0x1c8>)
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	0089      	lsls	r1, r1, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4924      	ldr	r1, [pc, #144]	; (800165c <checkAndClearLines+0x1c4>)
 80015ca:	7809      	ldrb	r1, [r1, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b298      	uxth	r0, r3
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <checkAndClearLines+0x1c8>)
 80015d2:	460b      	mov	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	4602      	mov	r2, r0
 80015de:	801a      	strh	r2, [r3, #0]

    if(rowsCounter)
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d02b      	beq.n	8001640 <checkAndClearLines+0x1a8>
        model->refreshFlag = TRUE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

    // Clear the rows in the top of grid.
    while (rowsCounter--)
 80015f0:	e026      	b.n	8001640 <checkAndClearLines+0x1a8>
    {
        for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 80015f2:	2313      	movs	r3, #19
 80015f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80015f8:	e01e      	b.n	8001638 <checkAndClearLines+0x1a0>
            for (uint8 column = 0; column < GRID_COLUMNS; column++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001600:	e011      	b.n	8001626 <checkAndClearLines+0x18e>
                model->grid[rowsCounter][column] = 0;
 8001602:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001606:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	440b      	add	r3, r1
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
            for (uint8 column = 0; column < GRID_COLUMNS; column++)
 800161c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001620:	3301      	adds	r3, #1
 8001622:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001626:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800162a:	2b09      	cmp	r3, #9
 800162c:	d9e9      	bls.n	8001602 <checkAndClearLines+0x16a>
        for (uint8 row = GRID_ROWS - 1; row > 0; row--)
 800162e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001632:	3b01      	subs	r3, #1
 8001634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1dc      	bne.n	80015fa <checkAndClearLines+0x162>
    while (rowsCounter--)
 8001640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001644:	1e5a      	subs	r2, r3, #1
 8001646:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1d1      	bne.n	80015f2 <checkAndClearLines+0x15a>
    }
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	372c      	adds	r7, #44	; 0x2c
 8001654:	46bd      	mov	sp, r7
 8001656:	bcb0      	pop	{r4, r5, r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200000d8 	.word	0x200000d8
 8001660:	20000074 	.word	0x20000074

08001664 <rotateObject>:

// This function rotates the current moving Tetris object within the game grid.
void rotateObject(Tetris_Model_t *model)
{
 8001664:	b480      	push	{r7}
 8001666:	b08f      	sub	sp, #60	; 0x3c
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    Tetris_Object_t TempObject;
    int ShiftValue = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    boolean RotateValidation = TRUE;
 8001670:	2301      	movs	r3, #1
 8001672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Create a temporary object to hold the rotated state.
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800167c:	e021      	b.n	80016c2 <rotateObject+0x5e>
    {
        TempObject.block[blockIndex].x = model->currentMovingObject.block[blockIndex].x;
 800167e:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8001682:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	3164      	adds	r1, #100	; 0x64
 800168a:	f912 2011 	ldrsb.w	r2, [r2, r1, lsl #1]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	3338      	adds	r3, #56	; 0x38
 8001692:	443b      	add	r3, r7
 8001694:	f803 2c2c 	strb.w	r2, [r3, #-44]
        TempObject.block[blockIndex].y = model->currentMovingObject.block[blockIndex].y;
 8001698:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800169c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	3364      	adds	r3, #100	; 0x64
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80016ac:	0053      	lsls	r3, r2, #1
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	443b      	add	r3, r7
 80016b2:	460a      	mov	r2, r1
 80016b4:	f803 2c2b 	strb.w	r2, [r3, #-43]
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80016b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016bc:	3301      	adds	r3, #1
 80016be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80016c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d9d9      	bls.n	800167e <rotateObject+0x1a>
    }

    switch (model->CurrentObjectType)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	f200 8437 	bhi.w	8001f44 <rotateObject+0x8e0>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <rotateObject+0x78>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	08001f45 	.word	0x08001f45
 80016e0:	080016f9 	.word	0x080016f9
 80016e4:	080017b1 	.word	0x080017b1
 80016e8:	0800196f 	.word	0x0800196f
 80016ec:	08001b23 	.word	0x08001b23
 80016f0:	08001cc3 	.word	0x08001cc3
 80016f4:	08001e1d 	.word	0x08001e1d
        case Object_A:
            // Object A (cube) doesn't rotate, so do nothing.
            break;

        case Object_B:
            switch (model->rotateState)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <rotateObject+0xa6>
 8001702:	2b01      	cmp	r3, #1
 8001704:	d029      	beq.n	800175a <rotateObject+0xf6>
                        TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x - 2 + blockIndex;
                        TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
                    }
                    break;
            }
            break;
 8001706:	f000 bc1d 	b.w	8001f44 <rotateObject+0x8e0>
                    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001710:	e01e      	b.n	8001750 <rotateObject+0xec>
                        TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x;
 8001712:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	f992 20cc 	ldrsb.w	r2, [r2, #204]	; 0xcc
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	443b      	add	r3, r7
 8001722:	f803 2c2c 	strb.w	r2, [r3, #-44]
                        TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y + blockIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 800172c:	b2da      	uxtb	r2, r3
 800172e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001732:	4413      	add	r3, r2
 8001734:	b2da      	uxtb	r2, r3
 8001736:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800173a:	b252      	sxtb	r2, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3338      	adds	r3, #56	; 0x38
 8001740:	443b      	add	r3, r7
 8001742:	f803 2c2b 	strb.w	r2, [r3, #-43]
                    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001746:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800174a:	3301      	adds	r3, #1
 800174c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001750:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001754:	2b03      	cmp	r3, #3
 8001756:	d9dc      	bls.n	8001712 <rotateObject+0xae>
                    break;
 8001758:	e029      	b.n	80017ae <rotateObject+0x14a>
                    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001760:	e020      	b.n	80017a4 <rotateObject+0x140>
                        TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x - 2 + blockIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8001768:	b2da      	uxtb	r2, r3
 800176a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800176e:	4413      	add	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3b02      	subs	r3, #2
 8001774:	b2da      	uxtb	r2, r3
 8001776:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800177a:	b252      	sxtb	r2, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	3338      	adds	r3, #56	; 0x38
 8001780:	443b      	add	r3, r7
 8001782:	f803 2c2c 	strb.w	r2, [r3, #-44]
                        TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
 8001786:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	f992 20c9 	ldrsb.w	r2, [r2, #201]	; 0xc9
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	3338      	adds	r3, #56	; 0x38
 8001794:	443b      	add	r3, r7
 8001796:	f803 2c2b 	strb.w	r2, [r3, #-43]
                    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800179a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800179e:	3301      	adds	r3, #1
 80017a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80017a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d9da      	bls.n	8001762 <rotateObject+0xfe>
                    break;
 80017ac:	bf00      	nop
            break;
 80017ae:	e3c9      	b.n	8001f44 <rotateObject+0x8e0>
            
        case Object_C :
                switch(model->rotateState)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	f200 83bf 	bhi.w	8001f3a <rotateObject+0x8d6>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <rotateObject+0x160>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	08001835 	.word	0x08001835
 80017cc:	0800189d 	.word	0x0800189d
 80017d0:	08001905 	.word	0x08001905
                {
                    case ORIENTATION_0 :
                        // Rotate Object B to 90 degrees.
                        TempObject.block[0].x = TempObject.block[0].x;
 80017d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80017d8:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[1].y;
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80017e6:	e020      	b.n	800182a <rotateObject+0x1c6>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x;
 80017e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	f992 20cc 	ldrsb.w	r2, [r2, #204]	; 0xcc
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	3338      	adds	r3, #56	; 0x38
 80017f6:	443b      	add	r3, r7
 80017f8:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y + blockIndex -1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f993 30cb 	ldrsb.w	r3, [r3, #203]	; 0xcb
 8001802:	b2da      	uxtb	r2, r3
 8001804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001808:	4413      	add	r3, r2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001814:	b252      	sxtb	r2, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	3338      	adds	r3, #56	; 0x38
 800181a:	443b      	add	r3, r7
 800181c:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001824:	3301      	adds	r3, #1
 8001826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800182a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800182e:	2b03      	cmp	r3, #3
 8001830:	d9da      	bls.n	80017e8 <rotateObject+0x184>
                        }
                        break;
 8001832:	e09b      	b.n	800196c <rotateObject+0x308>
                    
                    case ORIENTATION_90 :
                        // Rotate Object B to 180 degrees.
                        TempObject.block[0].x = TempObject.block[1].x + 1;
 8001834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b25b      	sxtb	r3, r3
 8001840:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[0].y;
 8001842:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001846:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001848:	2301      	movs	r3, #1
 800184a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800184e:	e020      	b.n	8001892 <rotateObject+0x22e>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x +2 - blockIndex;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f993 30ca 	ldrsb.w	r3, [r3, #202]	; 0xca
 8001856:	b2da      	uxtb	r2, r3
 8001858:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3302      	adds	r3, #2
 8001862:	b2da      	uxtb	r2, r3
 8001864:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001868:	b252      	sxtb	r2, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	3338      	adds	r3, #56	; 0x38
 800186e:	443b      	add	r3, r7
 8001870:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[2].y;
 8001874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	f992 20cd 	ldrsb.w	r2, [r2, #205]	; 0xcd
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3338      	adds	r3, #56	; 0x38
 8001882:	443b      	add	r3, r7
 8001884:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001888:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800188c:	3301      	adds	r3, #1
 800188e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9da      	bls.n	8001850 <rotateObject+0x1ec>
                        }                   
                        break;
 800189a:	e067      	b.n	800196c <rotateObject+0x308>
                        
                    case ORIENTATION_180 :
                        // Rotate Object B to 270 degrees.
                        TempObject.block[0].x = TempObject.block[0].x;
 800189c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80018a0:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[1].y + 1;
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018b6:	e020      	b.n	80018fa <rotateObject+0x296>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x;
 80018b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	f992 20cc 	ldrsb.w	r2, [r2, #204]	; 0xcc
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	3338      	adds	r3, #56	; 0x38
 80018c6:	443b      	add	r3, r7
 80018c8:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y +2 -blockIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f993 30cb 	ldrsb.w	r3, [r3, #203]	; 0xcb
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3302      	adds	r3, #2
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018e4:	b252      	sxtb	r2, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	3338      	adds	r3, #56	; 0x38
 80018ea:	443b      	add	r3, r7
 80018ec:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80018f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018f4:	3301      	adds	r3, #1
 80018f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d9da      	bls.n	80018b8 <rotateObject+0x254>
                        }                   
                        break;
 8001902:	e033      	b.n	800196c <rotateObject+0x308>

                    case ORIENTATION_270 :
                        // Rotate Object B to 0 degrees.
                        TempObject.block[0].x = TempObject.block[1].x - 1;
 8001904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b25b      	sxtb	r3, r3
 8001910:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[2].y;
 8001912:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001916:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001918:	2301      	movs	r3, #1
 800191a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800191e:	e020      	b.n	8001962 <rotateObject+0x2fe>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x -2 +blockIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f993 30ca 	ldrsb.w	r3, [r3, #202]	; 0xca
 8001926:	b2da      	uxtb	r2, r3
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800192c:	4413      	add	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3b02      	subs	r3, #2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001938:	b252      	sxtb	r2, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	3338      	adds	r3, #56	; 0x38
 800193e:	443b      	add	r3, r7
 8001940:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[3].y;
 8001944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	f992 20cf 	ldrsb.w	r2, [r2, #207]	; 0xcf
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	3338      	adds	r3, #56	; 0x38
 8001952:	443b      	add	r3, r7
 8001954:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001958:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800195c:	3301      	adds	r3, #1
 800195e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001962:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001966:	2b03      	cmp	r3, #3
 8001968:	d9da      	bls.n	8001920 <rotateObject+0x2bc>
                        }                   
                        break;                      
 800196a:	bf00      	nop
                }
            break;
 800196c:	e2e5      	b.n	8001f3a <rotateObject+0x8d6>

        case Object_D :

                switch(model->rotateState)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001974:	2b03      	cmp	r3, #3
 8001976:	f200 82e2 	bhi.w	8001f3e <rotateObject+0x8da>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <rotateObject+0x31c>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	08001991 	.word	0x08001991
 8001984:	080019f9 	.word	0x080019f9
 8001988:	08001a61 	.word	0x08001a61
 800198c:	08001ac1 	.word	0x08001ac1
                {
                    case ORIENTATION_0 :
                        // Rotate Object B to 90 degrees.
                        TempObject.block[0].x = TempObject.block[2].x;
 8001990:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001994:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[0].y +1;
 8001996:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3301      	adds	r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019aa:	e020      	b.n	80019ee <rotateObject+0x38a>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x;
 80019ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f992 20c8 	ldrsb.w	r2, [r2, #200]	; 0xc8
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3338      	adds	r3, #56	; 0x38
 80019ba:	443b      	add	r3, r7
 80019bc:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y +2 - blockIndex;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3302      	adds	r3, #2
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019d8:	b252      	sxtb	r2, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	3338      	adds	r3, #56	; 0x38
 80019de:	443b      	add	r3, r7
 80019e0:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80019e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d9da      	bls.n	80019ac <rotateObject+0x348>
                        }
                        break;
 80019f6:	e093      	b.n	8001b20 <rotateObject+0x4bc>
                    
                    case ORIENTATION_90 :
                        // Rotate Object B to 180 degrees.
                        TempObject.block[0].x = TempObject.block[0].x-1;
 80019f8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[3].y;
 8001a06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a0a:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001a12:	e020      	b.n	8001a56 <rotateObject+0x3f2>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -2 +blockIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a20:	4413      	add	r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b02      	subs	r3, #2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a2c:	b252      	sxtb	r2, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	3338      	adds	r3, #56	; 0x38
 8001a32:	443b      	add	r3, r7
 8001a34:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[2].y;
 8001a38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	f992 20cd 	ldrsb.w	r2, [r2, #205]	; 0xcd
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	3338      	adds	r3, #56	; 0x38
 8001a46:	443b      	add	r3, r7
 8001a48:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a50:	3301      	adds	r3, #1
 8001a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001a56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d9da      	bls.n	8001a14 <rotateObject+0x3b0>
                        }                   
                        break;
 8001a5e:	e05f      	b.n	8001b20 <rotateObject+0x4bc>
                        
                    case ORIENTATION_180 :
                        // Rotate Object B to 270 degrees.
                        TempObject.block[0].x = TempObject.block[3].x;
 8001a60:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a64:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[0].y;
 8001a66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a6a:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001a72:	e020      	b.n	8001ab6 <rotateObject+0x452>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[2].x;
 8001a74:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f992 20cc 	ldrsb.w	r2, [r2, #204]	; 0xcc
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	443b      	add	r3, r7
 8001a84:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y -2 +blockIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f993 30cb 	ldrsb.w	r3, [r3, #203]	; 0xcb
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a94:	4413      	add	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b02      	subs	r3, #2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001aa0:	b252      	sxtb	r2, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	3338      	adds	r3, #56	; 0x38
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001aac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ab6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d9da      	bls.n	8001a74 <rotateObject+0x410>
                        }                   
                        break;
 8001abe:	e02f      	b.n	8001b20 <rotateObject+0x4bc>

                    case ORIENTATION_270 :
                        // Rotate Object B to 0 degrees.
                        TempObject.block[0].x = TempObject.block[0].x;
 8001ac0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001ac4:	733b      	strb	r3, [r7, #12]
                        TempObject.block[0].y = TempObject.block[2].y;
 8001ac6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001aca:	737b      	strb	r3, [r7, #13]
                        
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001ad2:	e020      	b.n	8001b16 <rotateObject+0x4b2>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x +1 -blockIndex;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aec:	b252      	sxtb	r2, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	3338      	adds	r3, #56	; 0x38
 8001af2:	443b      	add	r3, r7
 8001af4:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
 8001af8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	f992 20c9 	ldrsb.w	r2, [r2, #201]	; 0xc9
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	3338      	adds	r3, #56	; 0x38
 8001b06:	443b      	add	r3, r7
 8001b08:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=1; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b10:	3301      	adds	r3, #1
 8001b12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9da      	bls.n	8001ad4 <rotateObject+0x470>
                        }                   
                        break;                      
 8001b1e:	bf00      	nop
                }       
            break;
 8001b20:	e20d      	b.n	8001f3e <rotateObject+0x8da>

        case Object_E :

                switch(model->rotateState)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	f200 820a 	bhi.w	8001f42 <rotateObject+0x8de>
 8001b2e:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <rotateObject+0x4d0>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001b45 	.word	0x08001b45
 8001b38:	08001ba1 	.word	0x08001ba1
 8001b3c:	08001c01 	.word	0x08001c01
 8001b40:	08001c61 	.word	0x08001c61
                {
                    case ORIENTATION_0 :
                        // Rotate Object B to 90 degrees.
                        TempObject.block[3].x = TempObject.block[0].x;
 8001b44:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b48:	74bb      	strb	r3, [r7, #18]
                        TempObject.block[3].y = TempObject.block[3].y;
 8001b4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b4e:	74fb      	strb	r3, [r7, #19]
                        
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b56:	e01e      	b.n	8001b96 <rotateObject+0x532>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x;
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	f992 20ca 	ldrsb.w	r2, [r2, #202]	; 0xca
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	3338      	adds	r3, #56	; 0x38
 8001b66:	443b      	add	r3, r7
 8001b68:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y + blockIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b80:	b252      	sxtb	r2, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	3338      	adds	r3, #56	; 0x38
 8001b86:	443b      	add	r3, r7
 8001b88:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b90:	3301      	adds	r3, #1
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d9dc      	bls.n	8001b58 <rotateObject+0x4f4>
                        }
                        break;
 8001b9e:	e08f      	b.n	8001cc0 <rotateObject+0x65c>
                    
                    case ORIENTATION_90 :
                        // Rotate Object B to 180 degrees.
                        TempObject.block[3].x = TempObject.block[0].x;
 8001ba0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001ba4:	74bb      	strb	r3, [r7, #18]
                        TempObject.block[3].y = TempObject.block[0].y;
 8001ba6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001baa:	74fb      	strb	r3, [r7, #19]
                        
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bb2:	e020      	b.n	8001bf6 <rotateObject+0x592>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x +1 -blockIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bcc:	b252      	sxtb	r2, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	3338      	adds	r3, #56	; 0x38
 8001bd2:	443b      	add	r3, r7
 8001bd4:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y;
 8001bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f992 20cb 	ldrsb.w	r2, [r2, #203]	; 0xcb
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	3338      	adds	r3, #56	; 0x38
 8001be6:	443b      	add	r3, r7
 8001be8:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d9da      	bls.n	8001bb4 <rotateObject+0x550>
                        }                   
                        break;
 8001bfe:	e05f      	b.n	8001cc0 <rotateObject+0x65c>
                        
                    case ORIENTATION_180 :
                        // Rotate Object B to 270 degrees.
                        TempObject.block[3].x = TempObject.block[0].x;
 8001c00:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c04:	74bb      	strb	r3, [r7, #18]
                        TempObject.block[3].y = TempObject.block[0].y;
 8001c06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c0a:	74fb      	strb	r3, [r7, #19]
                        
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c12:	e020      	b.n	8001c56 <rotateObject+0x5f2>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x;
 8001c14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	f992 20ca 	ldrsb.w	r2, [r2, #202]	; 0xca
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	3338      	adds	r3, #56	; 0x38
 8001c22:	443b      	add	r3, r7
 8001c24:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y +1 -blockIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c40:	b252      	sxtb	r2, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	3338      	adds	r3, #56	; 0x38
 8001c46:	443b      	add	r3, r7
 8001c48:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c50:	3301      	adds	r3, #1
 8001c52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d9da      	bls.n	8001c14 <rotateObject+0x5b0>
                        }                   
                        break;
 8001c5e:	e02f      	b.n	8001cc0 <rotateObject+0x65c>

                    case ORIENTATION_270 :
                        // Rotate Object B to 0 degrees.
                        TempObject.block[3].x = TempObject.block[0].x;
 8001c60:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c64:	74bb      	strb	r3, [r7, #18]
                        TempObject.block[3].y = TempObject.block[1].y;
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	74fb      	strb	r3, [r7, #19]
                        
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c72:	e020      	b.n	8001cb6 <rotateObject+0x652>
                        {
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -1 +blockIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c80:	4413      	add	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c8c:	b252      	sxtb	r2, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	3338      	adds	r3, #56	; 0x38
 8001c92:	443b      	add	r3, r7
 8001c94:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[2].y;
 8001c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f992 20cd 	ldrsb.w	r2, [r2, #205]	; 0xcd
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	3338      	adds	r3, #56	; 0x38
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < OBJECT_BLOCKS_COUNT-1; blockIndex++)
 8001cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d9da      	bls.n	8001c74 <rotateObject+0x610>
                        }                   
                        break;                      
 8001cbe:	bf00      	nop
                }       
            break;
 8001cc0:	e13f      	b.n	8001f42 <rotateObject+0x8de>

        case Object_F :

                switch(model->rotateState)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <rotateObject+0x66e>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d051      	beq.n	8001d74 <rotateObject+0x710>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -2 + blockIndex;
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y;
                        }                   
                        break;
                }       
            break;
 8001cd0:	e138      	b.n	8001f44 <rotateObject+0x8e0>
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001cd8:	e01e      	b.n	8001d18 <rotateObject+0x6b4>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x;
 8001cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	f992 20ca 	ldrsb.w	r2, [r2, #202]	; 0xca
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	3338      	adds	r3, #56	; 0x38
 8001ce8:	443b      	add	r3, r7
 8001cea:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y + blockIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d02:	b252      	sxtb	r2, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3338      	adds	r3, #56	; 0x38
 8001d08:	443b      	add	r3, r7
 8001d0a:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d9dc      	bls.n	8001cda <rotateObject+0x676>
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001d20:	2302      	movs	r3, #2
 8001d22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d26:	e020      	b.n	8001d6a <rotateObject+0x706>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x;
 8001d28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	f992 20c8 	ldrsb.w	r2, [r2, #200]	; 0xc8
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	3338      	adds	r3, #56	; 0x38
 8001d36:	443b      	add	r3, r7
 8001d38:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[2].y - 2 + blockIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3b02      	subs	r3, #2
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d54:	b252      	sxtb	r2, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	3338      	adds	r3, #56	; 0x38
 8001d5a:	443b      	add	r3, r7
 8001d5c:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001d60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d64:	3301      	adds	r3, #1
 8001d66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9da      	bls.n	8001d28 <rotateObject+0x6c4>
                        break;
 8001d72:	e052      	b.n	8001e1a <rotateObject+0x7b6>
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001d7a:	e020      	b.n	8001dbe <rotateObject+0x75a>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -1 + blockIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d88:	4413      	add	r3, r2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d94:	b252      	sxtb	r2, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	3338      	adds	r3, #56	; 0x38
 8001d9a:	443b      	add	r3, r7
 8001d9c:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
 8001da0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	f992 20c9 	ldrsb.w	r2, [r2, #201]	; 0xc9
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	3338      	adds	r3, #56	; 0x38
 8001dae:	443b      	add	r3, r7
 8001db0:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001db4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001db8:	3301      	adds	r3, #1
 8001dba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001dbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d9da      	bls.n	8001d7c <rotateObject+0x718>
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f887 3020 	strb.w	r3, [r7, #32]
 8001dcc:	e020      	b.n	8001e10 <rotateObject+0x7ac>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -2 + blockIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	3b02      	subs	r3, #2
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de6:	b252      	sxtb	r2, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	3338      	adds	r3, #56	; 0x38
 8001dec:	443b      	add	r3, r7
 8001dee:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y;
 8001df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	f992 20cb 	ldrsb.w	r2, [r2, #203]	; 0xcb
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	3338      	adds	r3, #56	; 0x38
 8001e00:	443b      	add	r3, r7
 8001e02:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f887 3020 	strb.w	r3, [r7, #32]
 8001e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d9da      	bls.n	8001dce <rotateObject+0x76a>
                        break;
 8001e18:	bf00      	nop
            break;
 8001e1a:	e093      	b.n	8001f44 <rotateObject+0x8e0>

        case Object_G :

                switch(model->rotateState)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <rotateObject+0x7c8>
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d043      	beq.n	8001eb2 <rotateObject+0x84e>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -1 + blockIndex;
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
                        }                   
                        break;
                }       
            break;          
 8001e2a:	e08b      	b.n	8001f44 <rotateObject+0x8e0>
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
 8001e30:	e019      	b.n	8001e66 <rotateObject+0x802>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x;
 8001e32:	7ffb      	ldrb	r3, [r7, #31]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	f992 20c8 	ldrsb.w	r2, [r2, #200]	; 0xc8
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	443b      	add	r3, r7
 8001e40:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[2].y + blockIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	b252      	sxtb	r2, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	443b      	add	r3, r7
 8001e5c:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
 8001e62:	3301      	adds	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d9e2      	bls.n	8001e32 <rotateObject+0x7ce>
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	77bb      	strb	r3, [r7, #30]
 8001e70:	e01b      	b.n	8001eaa <rotateObject+0x846>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[1].x;
 8001e72:	7fbb      	ldrb	r3, [r7, #30]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	f992 20ca 	ldrsb.w	r2, [r2, #202]	; 0xca
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	3338      	adds	r3, #56	; 0x38
 8001e7e:	443b      	add	r3, r7
 8001e80:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y - 2 + blockIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	7fbb      	ldrb	r3, [r7, #30]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3b02      	subs	r3, #2
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	7fbb      	ldrb	r3, [r7, #30]
 8001e98:	b252      	sxtb	r2, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	3338      	adds	r3, #56	; 0x38
 8001e9e:	443b      	add	r3, r7
 8001ea0:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001ea4:	7fbb      	ldrb	r3, [r7, #30]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	77bb      	strb	r3, [r7, #30]
 8001eaa:	7fbb      	ldrb	r3, [r7, #30]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d9e0      	bls.n	8001e72 <rotateObject+0x80e>
                        break;
 8001eb0:	e042      	b.n	8001f38 <rotateObject+0x8d4>
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	777b      	strb	r3, [r7, #29]
 8001eb6:	e019      	b.n	8001eec <rotateObject+0x888>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x + blockIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	7f7b      	ldrb	r3, [r7, #29]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	7f7b      	ldrb	r3, [r7, #29]
 8001ec8:	b252      	sxtb	r2, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	443b      	add	r3, r7
 8001ed0:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[1].y;
 8001ed4:	7f7b      	ldrb	r3, [r7, #29]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	f992 20cb 	ldrsb.w	r2, [r2, #203]	; 0xcb
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	3338      	adds	r3, #56	; 0x38
 8001ee0:	443b      	add	r3, r7
 8001ee2:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=0; blockIndex < 2; blockIndex++)
 8001ee6:	7f7b      	ldrb	r3, [r7, #29]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	777b      	strb	r3, [r7, #29]
 8001eec:	7f7b      	ldrb	r3, [r7, #29]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d9e2      	bls.n	8001eb8 <rotateObject+0x854>
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	773b      	strb	r3, [r7, #28]
 8001ef6:	e01b      	b.n	8001f30 <rotateObject+0x8cc>
                            TempObject.block[blockIndex].x = model->currentMovingObject.block[0].x -1 + blockIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	7f3b      	ldrb	r3, [r7, #28]
 8001f02:	4413      	add	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	7f3b      	ldrb	r3, [r7, #28]
 8001f0c:	b252      	sxtb	r2, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	3338      	adds	r3, #56	; 0x38
 8001f12:	443b      	add	r3, r7
 8001f14:	f803 2c2c 	strb.w	r2, [r3, #-44]
                            TempObject.block[blockIndex].y = model->currentMovingObject.block[0].y;
 8001f18:	7f3b      	ldrb	r3, [r7, #28]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	f992 20c9 	ldrsb.w	r2, [r2, #201]	; 0xc9
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	3338      	adds	r3, #56	; 0x38
 8001f24:	443b      	add	r3, r7
 8001f26:	f803 2c2b 	strb.w	r2, [r3, #-43]
                        for(uint8 blockIndex=2; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001f2a:	7f3b      	ldrb	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	773b      	strb	r3, [r7, #28]
 8001f30:	7f3b      	ldrb	r3, [r7, #28]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d9e0      	bls.n	8001ef8 <rotateObject+0x894>
                        break;
 8001f36:	bf00      	nop
            break;          
 8001f38:	e004      	b.n	8001f44 <rotateObject+0x8e0>
            break;
 8001f3a:	bf00      	nop
 8001f3c:	e002      	b.n	8001f44 <rotateObject+0x8e0>
            break;
 8001f3e:	bf00      	nop
 8001f40:	e000      	b.n	8001f44 <rotateObject+0x8e0>
            break;
 8001f42:	bf00      	nop
    }

    // Check if the rotated object is out of bounds.
    for (uint8 blockIndex = 0; blockIndex < 4; blockIndex++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	76fb      	strb	r3, [r7, #27]
 8001f48:	e016      	b.n	8001f78 <rotateObject+0x914>
    {
        if (!(TempObject.block[blockIndex].x >= 0 && TempObject.block[blockIndex].x <= (GRID_COLUMNS - 1)))
 8001f4a:	7efb      	ldrb	r3, [r7, #27]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	3338      	adds	r3, #56	; 0x38
 8001f50:	443b      	add	r3, r7
 8001f52:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db07      	blt.n	8001f6a <rotateObject+0x906>
 8001f5a:	7efb      	ldrb	r3, [r7, #27]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	3338      	adds	r3, #56	; 0x38
 8001f60:	443b      	add	r3, r7
 8001f62:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	dd03      	ble.n	8001f72 <rotateObject+0x90e>
        {
            RotateValidation = FALSE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8001f70:	e005      	b.n	8001f7e <rotateObject+0x91a>
    for (uint8 blockIndex = 0; blockIndex < 4; blockIndex++)
 8001f72:	7efb      	ldrb	r3, [r7, #27]
 8001f74:	3301      	adds	r3, #1
 8001f76:	76fb      	strb	r3, [r7, #27]
 8001f78:	7efb      	ldrb	r3, [r7, #27]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d9e5      	bls.n	8001f4a <rotateObject+0x8e6>
        }
    }

    // If the rotated object is out of bounds, calculate the shift value.
    if (!RotateValidation)
 8001f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d13c      	bne.n	8002000 <rotateObject+0x99c>
    {
        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	76bb      	strb	r3, [r7, #26]
 8001f8a:	e036      	b.n	8001ffa <rotateObject+0x996>
        {
            if (TempObject.block[blockIndex].x < 0)
 8001f8c:	7ebb      	ldrb	r3, [r7, #26]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	3338      	adds	r3, #56	; 0x38
 8001f92:	443b      	add	r3, r7
 8001f94:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da11      	bge.n	8001fc0 <rotateObject+0x95c>
            {
                if (TempObject.block[blockIndex].x < ShiftValue)
 8001f9c:	7ebb      	ldrb	r3, [r7, #26]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	4293      	cmp	r3, r2
 8001fae:	dd21      	ble.n	8001ff4 <rotateObject+0x990>
                    ShiftValue = TempObject.block[blockIndex].x;
 8001fb0:	7ebb      	ldrb	r3, [r7, #26]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3338      	adds	r3, #56	; 0x38
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	e019      	b.n	8001ff4 <rotateObject+0x990>
            }
            else if (TempObject.block[blockIndex].x > (GRID_COLUMNS - 1))
 8001fc0:	7ebb      	ldrb	r3, [r7, #26]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	443b      	add	r3, r7
 8001fc8:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	dd11      	ble.n	8001ff4 <rotateObject+0x990>
            {
                if ((TempObject.block[blockIndex].x - (GRID_COLUMNS - 1)) > ShiftValue)
 8001fd0:	7ebb      	ldrb	r3, [r7, #26]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3338      	adds	r3, #56	; 0x38
 8001fd6:	443b      	add	r3, r7
 8001fd8:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001fdc:	3b09      	subs	r3, #9
 8001fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	da07      	bge.n	8001ff4 <rotateObject+0x990>
                    ShiftValue = (TempObject.block[blockIndex].x - (GRID_COLUMNS - 1));
 8001fe4:	7ebb      	ldrb	r3, [r7, #26]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	3338      	adds	r3, #56	; 0x38
 8001fea:	443b      	add	r3, r7
 8001fec:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8001ff0:	3b09      	subs	r3, #9
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8001ff4:	7ebb      	ldrb	r3, [r7, #26]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	76bb      	strb	r3, [r7, #26]
 8001ffa:	7ebb      	ldrb	r3, [r7, #26]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d9c5      	bls.n	8001f8c <rotateObject+0x928>
            }
        }
    }

    // Apply the shift value if needed.
    if (ShiftValue)
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <rotateObject+0x9d8>
    {
        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8002006:	2300      	movs	r3, #0
 8002008:	767b      	strb	r3, [r7, #25]
 800200a:	e014      	b.n	8002036 <rotateObject+0x9d2>
            TempObject.block[blockIndex].x -= ShiftValue;
 800200c:	7e7b      	ldrb	r3, [r7, #25]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	443b      	add	r3, r7
 8002014:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	b2db      	uxtb	r3, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b2da      	uxtb	r2, r3
 8002022:	7e7b      	ldrb	r3, [r7, #25]
 8002024:	b252      	sxtb	r2, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	3338      	adds	r3, #56	; 0x38
 800202a:	443b      	add	r3, r7
 800202c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8002030:	7e7b      	ldrb	r3, [r7, #25]
 8002032:	3301      	adds	r3, #1
 8002034:	767b      	strb	r3, [r7, #25]
 8002036:	7e7b      	ldrb	r3, [r7, #25]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d9e7      	bls.n	800200c <rotateObject+0x9a8>
    }

    RotateValidation = TRUE;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Check if the rotated object collides with existing blocks in the grid.
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 8002042:	2300      	movs	r3, #0
 8002044:	763b      	strb	r3, [r7, #24]
 8002046:	e01d      	b.n	8002084 <rotateObject+0xa20>
    {
        if (model->grid[TempObject.block[blockIndex].y][TempObject.block[blockIndex].x])
 8002048:	7e3b      	ldrb	r3, [r7, #24]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	3338      	adds	r3, #56	; 0x38
 800204e:	443b      	add	r3, r7
 8002050:	f913 3c2b 	ldrsb.w	r3, [r3, #-43]
 8002054:	4619      	mov	r1, r3
 8002056:	7e3b      	ldrb	r3, [r7, #24]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	3338      	adds	r3, #56	; 0x38
 800205c:	443b      	add	r3, r7
 800205e:	f913 3c2c 	ldrsb.w	r3, [r3, #-44]
 8002062:	4618      	mov	r0, r3
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	4403      	add	r3, r0
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <rotateObject+0xa1a>
            RotateValidation = FALSE;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800207e:	7e3b      	ldrb	r3, [r7, #24]
 8002080:	3301      	adds	r3, #1
 8002082:	763b      	strb	r3, [r7, #24]
 8002084:	7e3b      	ldrb	r3, [r7, #24]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9de      	bls.n	8002048 <rotateObject+0x9e4>
    }

    // If the rotation is valid, apply it to the current moving object and update its state.
    if (RotateValidation)
 800208a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800208e:	2b00      	cmp	r3, #0
 8002090:	d059      	beq.n	8002146 <rotateObject+0xae2>
    {
        model->refreshFlag = TRUE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 800209a:	2300      	movs	r3, #0
 800209c:	75fb      	strb	r3, [r7, #23]
 800209e:	e01b      	b.n	80020d8 <rotateObject+0xa74>
        {
            model->currentMovingObject.block[blockIndex].x = TempObject.block[blockIndex].x;
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	7dfa      	ldrb	r2, [r7, #23]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	3338      	adds	r3, #56	; 0x38
 80020a8:	443b      	add	r3, r7
 80020aa:	f913 1c2c 	ldrsb.w	r1, [r3, #-44]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3264      	adds	r2, #100	; 0x64
 80020b2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
            model->currentMovingObject.block[blockIndex].y = TempObject.block[blockIndex].y;
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	7df9      	ldrb	r1, [r7, #23]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	3338      	adds	r3, #56	; 0x38
 80020be:	443b      	add	r3, r7
 80020c0:	f913 0c2b 	ldrsb.w	r0, [r3, #-43]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	f101 0364 	add.w	r3, r1, #100	; 0x64
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	4602      	mov	r2, r0
 80020d0:	705a      	strb	r2, [r3, #1]
        for (uint8 blockIndex = 0; blockIndex < OBJECT_BLOCKS_COUNT; blockIndex++)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	3301      	adds	r3, #1
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d9e0      	bls.n	80020a0 <rotateObject+0xa3c>
        }

        // Increment the rotation state based on the object type.
        model->rotateState++;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80020e4:	3301      	adds	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

        switch (model->CurrentObjectType)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d826      	bhi.n	8002146 <rotateObject+0xae2>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <rotateObject+0xa9c>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002145 	.word	0x08002145
 8002104:	0800211d 	.word	0x0800211d
 8002108:	08002131 	.word	0x08002131
 800210c:	08002131 	.word	0x08002131
 8002110:	08002131 	.word	0x08002131
 8002114:	0800211d 	.word	0x0800211d
 8002118:	0800211d 	.word	0x0800211d
                break;

            case Object_B:
            case Object_F:
            case Object_G:
                model->rotateState %= 2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
                break;
 800212e:	e00a      	b.n	8002146 <rotateObject+0xae2>

            case Object_C:
            case Object_D:
            case Object_E:
                model->rotateState %= 4;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
                break;
 8002142:	e000      	b.n	8002146 <rotateObject+0xae2>
                break;
 8002144:	bf00      	nop
        }
    }
}
 8002146:	bf00      	nop
 8002148:	373c      	adds	r7, #60	; 0x3c
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <modifyPlayerName>:


// This function modifies the player's name by replacing hyphens ('-') with spaces (' ').
void modifyPlayerName()
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8002156:	2300      	movs	r3, #0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	e01f      	b.n	800219c <modifyPlayerName+0x4c>
        if (Tetris_Player[Current_Tetris_Player].name[charIndex] == '-')
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <modifyPlayerName+0x60>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	79fa      	ldrb	r2, [r7, #7]
 8002164:	4913      	ldr	r1, [pc, #76]	; (80021b4 <modifyPlayerName+0x64>)
 8002166:	4603      	mov	r3, r0
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4403      	add	r3, r0
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	4413      	add	r3, r2
 8002172:	3302      	adds	r3, #2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b2d      	cmp	r3, #45	; 0x2d
 8002178:	d10d      	bne.n	8002196 <modifyPlayerName+0x46>
            Tetris_Player[Current_Tetris_Player].name[charIndex] = ' ';
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <modifyPlayerName+0x60>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	490c      	ldr	r1, [pc, #48]	; (80021b4 <modifyPlayerName+0x64>)
 8002184:	4603      	mov	r3, r0
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	440b      	add	r3, r1
 800218e:	4413      	add	r3, r2
 8002190:	3302      	adds	r3, #2
 8002192:	2220      	movs	r2, #32
 8002194:	701a      	strb	r2, [r3, #0]
    for (uint8 charIndex = 0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	3301      	adds	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d9dc      	bls.n	800215c <modifyPlayerName+0xc>
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200000d8 	.word	0x200000d8
 80021b4:	20000074 	.word	0x20000074

080021b8 <Tetris_View_init>:
extern Tetris_Player_t Tetris_Player[MAX_PLAYERS];
extern uint8 Current_Tetris_Player;

// Function to initialize the Tetris view.
void Tetris_View_init(Tetris_View_t *view)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    view->initView();
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4798      	blx	r3
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <Tetris_View_handle>:

// Function to handle the Tetris view based on the current game state.
void Tetris_View_handle(Tetris_Model_t *model, Tetris_View_t *view)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    switch (model->currentGameState)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d825      	bhi.n	8002232 <Tetris_View_handle+0x62>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <Tetris_View_handle+0x1c>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002201 	.word	0x08002201
 80021f0:	0800220b 	.word	0x0800220b
 80021f4:	08002215 	.word	0x08002215
 80021f8:	0800221f 	.word	0x0800221f
 80021fc:	08002229 	.word	0x08002229
    {
        case State_Welcome:

            // Render the welcome screen.
        	Tetris_View_renderWelcomeScreen(model, view);
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f81a 	bl	800223c <Tetris_View_renderWelcomeScreen>
            break;
 8002208:	e014      	b.n	8002234 <Tetris_View_handle+0x64>

        case State_TOP_Scores:

            // Render the top scores screen.
        	Tetris_View_renderTopScoresScreen(model, view);
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f82d 	bl	800226c <Tetris_View_renderTopScoresScreen>
            break;
 8002212:	e00f      	b.n	8002234 <Tetris_View_handle+0x64>

        case State_Input_Name:

            // Render the name input screen.
        	Tetris_View_renderNameInputScreen(model, view);
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f83d 	bl	8002296 <Tetris_View_renderNameInputScreen>
            break;
 800221c:	e00a      	b.n	8002234 <Tetris_View_handle+0x64>

        case State_Game_Play:

            // Render the game screen.
        	Tetris_View_renderGameScreen(model, view);
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f851 	bl	80022c8 <Tetris_View_renderGameScreen>
            break;
 8002226:	e005      	b.n	8002234 <Tetris_View_handle+0x64>

        case State_Game_Over:

            // Render the game over screen.
        	Tetris_View_renderGameOverScreen(model, view);
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f865 	bl	80022fa <Tetris_View_renderGameOverScreen>
            break;
 8002230:	e000      	b.n	8002234 <Tetris_View_handle+0x64>

        default:
            break;
 8002232:	bf00      	nop
    }
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <Tetris_View_renderWelcomeScreen>:

// Function to render the welcome screen based on the model's state.
static void Tetris_View_renderWelcomeScreen(Tetris_Model_t *model, Tetris_View_t *view)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    // Check if the game state has changed.
    // Render static elements of the welcome screen (e.g., background, text).
    if (model->currentGameState != model->previousGameState)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8002252:	429a      	cmp	r2, r3
 8002254:	d002      	beq.n	800225c <Tetris_View_renderWelcomeScreen+0x20>
        view->renderWelcomeScreenStaticElements();
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4798      	blx	r3

    // Render dynamic elements of the welcome screen (e.g., selected option).
    view->renderWelcomeScreenDynamicElements(model);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <Tetris_View_renderTopScoresScreen>:

// Function to render the top scores screen based on the model's state.
static void Tetris_View_renderTopScoresScreen(Tetris_Model_t *model, Tetris_View_t *view)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    // Check if the game state has changed.
    if (model->currentGameState != model->previousGameState)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8002282:	429a      	cmp	r2, r3
 8002284:	d003      	beq.n	800228e <Tetris_View_renderTopScoresScreen+0x22>
        view->renderTopScoresScreenStaticElements(model);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <Tetris_View_renderNameInputScreen>:

// Function to render the name input screen based on the model's state.
static void Tetris_View_renderNameInputScreen(Tetris_Model_t *model, Tetris_View_t *view)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
    // Check if the game state has changed.
    if (model->currentGameState != model->previousGameState)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d003      	beq.n	80022b8 <Tetris_View_renderNameInputScreen+0x22>
        view->renderNameInputScreenStaticElements(model);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3

    // Render dynamic elements of the name input screen (e.g., input field).
    view->renderNameInputScreenDynamicElements(model);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <Tetris_View_renderGameScreen>:

// Function to render the game screen based on the model's state.
static void Tetris_View_renderGameScreen(Tetris_Model_t *model, Tetris_View_t *view)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
    // Check if the game state has changed.
    if (model->currentGameState != model->previousGameState)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 80022de:	429a      	cmp	r2, r3
 80022e0:	d003      	beq.n	80022ea <Tetris_View_renderGameScreen+0x22>
        view->renderGameScreenStaticElements(model);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3

    // Render dynamic elements of the game screen (e.g., falling objects, Score).
    view->renderGameScreenDynamicElements(model);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <Tetris_View_renderGameOverScreen>:

// Function to render the game over screen based on the model's state.
static void Tetris_View_renderGameOverScreen(Tetris_Model_t *model, Tetris_View_t *view)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
    // Check if the game state has changed.
    if (model->currentGameState != model->previousGameState)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8002310:	429a      	cmp	r2, r3
 8002312:	d003      	beq.n	800231c <Tetris_View_renderGameOverScreen+0x22>
        view->renderGameOverScreenStaticElements(model);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <Tetris_View_initView>:
#include "../Inc/APP/Tetris/Model/Tetris_Model.h"

#include "../Inc/APP/Tetris/View/Tetris_View_TFT.h"

void Tetris_View_initView()
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
    // Initialize the TFT display and set its background color to black.
    TFT_init();
 8002328:	f000 fe9a 	bl	8003060 <TFT_init>
    TFT_fillColor(TFT_COLOR_BLACK);
 800232c:	2000      	movs	r0, #0
 800232e:	f000 fefb 	bl	8003128 <TFT_fillColor>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <Tetris_View_renderWelcomeScreenStaticElements>:

void Tetris_View_renderWelcomeScreenStaticElements()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af04      	add	r7, sp, #16
    // Display the static elements of the welcome screen.

    const uint8 Text []= "TETRIS";
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <Tetris_View_renderWelcomeScreenStaticElements+0x54>)
 8002340:	463b      	mov	r3, r7
 8002342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002346:	6018      	str	r0, [r3, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	8019      	strh	r1, [r3, #0]
 800234c:	3302      	adds	r3, #2
 800234e:	0c0a      	lsrs	r2, r1, #16
 8002350:	701a      	strb	r2, [r3, #0]

    // Fill the screen with the specified background color.
    TFT_fillColor(WELCOME_SCR_BACKGROUND_COLOR);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 fee8 	bl	8003128 <TFT_fillColor>

    // Print the game title at the specified position.
    TFT_printString(WELCOME_SCR_TITLE_POS, Text, WELCOME_SCR_TITLE_SIZE, WELCOME_SCR_TEXT_COLOR, WELCOME_SCR_BACKGROUND_COLOR, 6);
 8002358:	463a      	mov	r2, r7
 800235a:	2306      	movs	r3, #6
 800235c:	9302      	str	r3, [sp, #8]
 800235e:	2300      	movs	r3, #0
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	231f      	movs	r3, #31
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2303      	movs	r3, #3
 8002368:	2132      	movs	r1, #50	; 0x32
 800236a:	200a      	movs	r0, #10
 800236c:	f001 f846 	bl	80033fc <TFT_printString>

    // Draw an outline rectangle to frame the screen.
    TFT_drawOutlineRectangle(WELCOME_SCR_FRAME_POS, TFT_WIDTH-1, TFT_HIGHT-1, WELCOME_SCR_FRAME_COLOR, 2);
 8002370:	2302      	movs	r3, #2
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	231f      	movs	r3, #31
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	239f      	movs	r3, #159	; 0x9f
 800237a:	227f      	movs	r2, #127	; 0x7f
 800237c:	2100      	movs	r1, #0
 800237e:	2000      	movs	r0, #0
 8002380:	f001 f936 	bl	80035f0 <TFT_drawOutlineRectangle>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	0800464c 	.word	0x0800464c

08002390 <Tetris_View_renderWelcomeScreenDynamicElements>:

void Tetris_View_renderWelcomeScreenDynamicElements(Tetris_Model_t *model)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af04      	add	r7, sp, #16
 8002396:	6078      	str	r0, [r7, #4]
    // Display the dynamic elements of the welcome screen based on the selected option.

    const uint8 Text1 []= "Play";
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <Tetris_View_renderWelcomeScreenDynamicElements+0xb0>)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a2:	6018      	str	r0, [r3, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	7019      	strb	r1, [r3, #0]
    const uint8 Text2 []= "Top Score";
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <Tetris_View_renderWelcomeScreenDynamicElements+0xb4>)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80023b0:	c303      	stmia	r3!, {r0, r1}
 80023b2:	801a      	strh	r2, [r3, #0]

    if(model->selectedOption == OPTION_PLAY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11b      	bne.n	80023f6 <Tetris_View_renderWelcomeScreenDynamicElements+0x66>
    {
        // Highlight the "Play" option.
        TFT_printString(WELCOME_SCR_PLAY_POS,  Text1, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_SELECT_COLOR, WELCOME_SCR_BACKGROUND_COLOR, 6);
 80023be:	f107 0218 	add.w	r2, r7, #24
 80023c2:	2306      	movs	r3, #6
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	f64a 63bc 	movw	r3, #44732	; 0xaebc
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	215a      	movs	r1, #90	; 0x5a
 80023d4:	2034      	movs	r0, #52	; 0x34
 80023d6:	f001 f811 	bl	80033fc <TFT_printString>
        TFT_printString(WELCOME_SCR_SCORE_POS, Text2, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_TEXT_COLOR  , WELCOME_SCR_BACKGROUND_COLOR, 6);
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	2306      	movs	r3, #6
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	231f      	movs	r3, #31
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	2166      	movs	r1, #102	; 0x66
 80023ee:	2024      	movs	r0, #36	; 0x24
 80023f0:	f001 f804 	bl	80033fc <TFT_printString>
    {
        // Highlight the "Top Score" option.
        TFT_printString(WELCOME_SCR_PLAY_POS,  Text1, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_TEXT_COLOR  , WELCOME_SCR_BACKGROUND_COLOR, 4);
        TFT_printString(WELCOME_SCR_SCORE_POS, Text2, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_SELECT_COLOR, WELCOME_SCR_BACKGROUND_COLOR, 9);
    }
}
 80023f4:	e01f      	b.n	8002436 <Tetris_View_renderWelcomeScreenDynamicElements+0xa6>
    else if(model->selectedOption == OPTION_TOP_SCORES)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d11a      	bne.n	8002436 <Tetris_View_renderWelcomeScreenDynamicElements+0xa6>
        TFT_printString(WELCOME_SCR_PLAY_POS,  Text1, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_TEXT_COLOR  , WELCOME_SCR_BACKGROUND_COLOR, 4);
 8002400:	f107 0218 	add.w	r2, r7, #24
 8002404:	2304      	movs	r3, #4
 8002406:	9302      	str	r3, [sp, #8]
 8002408:	2300      	movs	r3, #0
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	231f      	movs	r3, #31
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2301      	movs	r3, #1
 8002412:	215a      	movs	r1, #90	; 0x5a
 8002414:	2034      	movs	r0, #52	; 0x34
 8002416:	f000 fff1 	bl	80033fc <TFT_printString>
        TFT_printString(WELCOME_SCR_SCORE_POS, Text2, WELCOME_SCR_CHOICE_SIZE, WELCOME_SCR_SELECT_COLOR, WELCOME_SCR_BACKGROUND_COLOR, 9);
 800241a:	f107 020c 	add.w	r2, r7, #12
 800241e:	2309      	movs	r3, #9
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2300      	movs	r3, #0
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	f64a 63bc 	movw	r3, #44732	; 0xaebc
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	2166      	movs	r1, #102	; 0x66
 8002430:	2024      	movs	r0, #36	; 0x24
 8002432:	f000 ffe3 	bl	80033fc <TFT_printString>
}
 8002436:	bf00      	nop
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	08004654 	.word	0x08004654
 8002444:	0800465c 	.word	0x0800465c

08002448 <Tetris_View_renderTopScoresScreenStaticElements>:

void Tetris_View_renderTopScoresScreenStaticElements(Tetris_Model_t *model)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af04      	add	r7, sp, #16
 800244e:	6078      	str	r0, [r7, #4]
    // Display the static elements of the top scores screen.

    const uint8 text[] = "Top Players";
 8002450:	4a44      	ldr	r2, [pc, #272]	; (8002564 <Tetris_View_renderTopScoresScreenStaticElements+0x11c>)
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	ca07      	ldmia	r2, {r0, r1, r2}
 8002458:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Fill the screen with the specified background color.
    TFT_fillColor(NAME_INPUT_SCR_BACKGROUND_COLOR);
 800245c:	2000      	movs	r0, #0
 800245e:	f000 fe63 	bl	8003128 <TFT_fillColor>

    // Draw a horizontal line to separate the title.
    TFT_drawHorizontalLine(0, TOP_SCORE_SCR_V_LINE_POS_Y, TFT_WIDTH, TOP_SCORE_SCR_TEXT_COLOR, 2);
 8002462:	2302      	movs	r3, #2
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	231f      	movs	r3, #31
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	2114      	movs	r1, #20
 800246c:	2000      	movs	r0, #0
 800246e:	f001 f83d 	bl	80034ec <TFT_drawHorizontalLine>

    // Print the title at the specified position.
    TFT_printString(TOP_SCORE_SCR_TITLE_POS, text, 1, TOP_SCORE_SCR_TEXT_COLOR, TOP_SCORE_SCR_BACKGROUND_COLOR, 12);
 8002472:	f107 0208 	add.w	r2, r7, #8
 8002476:	230c      	movs	r3, #12
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	231f      	movs	r3, #31
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	210a      	movs	r1, #10
 8002486:	201f      	movs	r0, #31
 8002488:	f000 ffb8 	bl	80033fc <TFT_printString>

    // Display top player information.
    uint8 playerIndex = Current_Tetris_Player;
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <Tetris_View_renderTopScoresScreenStaticElements+0x120>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	75bb      	strb	r3, [r7, #22]

    for(int8 playerIndex = Current_Tetris_Player-1; playerIndex>=0; playerIndex--)
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <Tetris_View_renderTopScoresScreenStaticElements+0x120>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	3b01      	subs	r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	75fb      	strb	r3, [r7, #23]
 800249c:	e058      	b.n	8002550 <Tetris_View_renderTopScoresScreenStaticElements+0x108>
    {
        // Print player rank, name, and score.
        TFT_printNumbers(10, TOP_SCORE_SCR_FIRST_PLAYER_POS_Y +(playerIndex * 10), (playerIndex+1), 1, TOP_SCORE_SCR_TEXT_COLOR, TOP_SCORE_SCR_BACKGROUND_COLOR, 2);
 800249e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	331e      	adds	r3, #30
 80024b0:	b299      	uxth	r1, r3
 80024b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b6:	3301      	adds	r3, #1
 80024b8:	461a      	mov	r2, r3
 80024ba:	2302      	movs	r3, #2
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2300      	movs	r3, #0
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	231f      	movs	r3, #31
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2301      	movs	r3, #1
 80024c8:	200a      	movs	r0, #10
 80024ca:	f000 ffeb 	bl	80034a4 <TFT_printNumbers>
        TFT_printString (30, TOP_SCORE_SCR_FIRST_PLAYER_POS_Y +(playerIndex * 10), Tetris_Player[playerIndex].name , 1,  TOP_SCORE_SCR_TEXT_COLOR, TOP_SCORE_SCR_BACKGROUND_COLOR, 8);
 80024ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	331e      	adds	r3, #30
 80024e0:	b299      	uxth	r1, r3
 80024e2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <Tetris_View_renderTopScoresScreenStaticElements+0x124>)
 80024f0:	4413      	add	r3, r2
 80024f2:	1c9a      	adds	r2, r3, #2
 80024f4:	2308      	movs	r3, #8
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	231f      	movs	r3, #31
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	201e      	movs	r0, #30
 8002504:	f000 ff7a 	bl	80033fc <TFT_printString>
        TFT_printNumbers(90, TOP_SCORE_SCR_FIRST_PLAYER_POS_Y +(playerIndex * 10), Tetris_Player[playerIndex].score, 1,  TOP_SCORE_SCR_TEXT_COLOR, TOP_SCORE_SCR_BACKGROUND_COLOR, 5);
 8002508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	b29b      	uxth	r3, r3
 8002518:	331e      	adds	r3, #30
 800251a:	b299      	uxth	r1, r3
 800251c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002520:	4812      	ldr	r0, [pc, #72]	; (800256c <Tetris_View_renderTopScoresScreenStaticElements+0x124>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4403      	add	r3, r0
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	2305      	movs	r3, #5
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2300      	movs	r3, #0
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	231f      	movs	r3, #31
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	205a      	movs	r0, #90	; 0x5a
 8002540:	f000 ffb0 	bl	80034a4 <TFT_printNumbers>
    for(int8 playerIndex = Current_Tetris_Player-1; playerIndex>=0; playerIndex--)
 8002544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	75fb      	strb	r3, [r7, #23]
 8002550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	daa2      	bge.n	800249e <Tetris_View_renderTopScoresScreenStaticElements+0x56>
    }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	08004668 	.word	0x08004668
 8002568:	200000d8 	.word	0x200000d8
 800256c:	20000074 	.word	0x20000074

08002570 <Tetris_View_renderNameInputScreenStaticElements>:

void Tetris_View_renderNameInputScreenStaticElements(Tetris_Model_t *model)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af04      	add	r7, sp, #16
 8002576:	6078      	str	r0, [r7, #4]
    const uint8 Text []= "Player Name :";
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <Tetris_View_renderNameInputScreenStaticElements+0x50>)
 800257a:	f107 0408 	add.w	r4, r7, #8
 800257e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002580:	c407      	stmia	r4!, {r0, r1, r2}
 8002582:	8023      	strh	r3, [r4, #0]

    // Fill the screen with the specified background color.
    TFT_fillColor(NAME_INPUT_SCR_BACKGROUND_COLOR);
 8002584:	2000      	movs	r0, #0
 8002586:	f000 fdcf 	bl	8003128 <TFT_fillColor>

    // Print the title at the specified position.
    TFT_printString(NAME_INPUT_SCR_TITLE_POS, Text, NAME_INPUT_SCR_TITLE_SIZE, NAME_INPUT_SCR_TEXT_COLOR, NAME_INPUT_SCR_BACKGROUND_COLOR, 13);
 800258a:	f107 0208 	add.w	r2, r7, #8
 800258e:	230d      	movs	r3, #13
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	2300      	movs	r3, #0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	231f      	movs	r3, #31
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	2132      	movs	r1, #50	; 0x32
 800259e:	201f      	movs	r0, #31
 80025a0:	f000 ff2c 	bl	80033fc <TFT_printString>

    // Draw an outline rectangle to frame the screen.
    TFT_drawOutlineRectangle(NAME_INPUT_SCR_FRAME_POS, TFT_WIDTH, TFT_HIGHT, NAME_INPUT_SCR_FRAME_COLOR, 2);
 80025a4:	2302      	movs	r3, #2
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	231f      	movs	r3, #31
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	23a0      	movs	r3, #160	; 0xa0
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	2100      	movs	r1, #0
 80025b2:	2000      	movs	r0, #0
 80025b4:	f001 f81c 	bl	80035f0 <TFT_drawOutlineRectangle>
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	08004674 	.word	0x08004674

080025c4 <Tetris_View_renderNameInputScreenDynamicElements>:


void Tetris_View_renderNameInputScreenDynamicElements(Tetris_Model_t *model)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	6078      	str	r0, [r7, #4]
    for(uint8 charIndex=0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e046      	b.n	8002660 <Tetris_View_renderNameInputScreenDynamicElements+0x9c>
    {
        // Check if the current character is selected.
        if(charIndex == model->selectedChar)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11f      	bne.n	800261e <Tetris_View_renderNameInputScreenDynamicElements+0x5a>
            // Highlight the selected letter.
            TFT_printChar(NAME_INPUT_SCR_FIRST_CHAR_POS_X +(charIndex*(NAME_INPUT_SCR_NAME_SIZE*TFT_CHAR_WIDTH)), NAME_INPUT_SCR_FIRST_CHAR_POS_Y, Tetris_Player[Current_Tetris_Player].name[charIndex], NAME_INPUT_SCR_NAME_SIZE, NAME_INPUT_SCR_SELECT_COLOR, NAME_INPUT_SCR_BACKGROUND_COLOR);
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	0052      	lsls	r2, r2, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3328      	adds	r3, #40	; 0x28
 80025ee:	b298      	uxth	r0, r3
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <Tetris_View_renderNameInputScreenDynamicElements+0xac>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461c      	mov	r4, r3
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	491e      	ldr	r1, [pc, #120]	; (8002674 <Tetris_View_renderNameInputScreenDynamicElements+0xb0>)
 80025fa:	4623      	mov	r3, r4
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4423      	add	r3, r4
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	4413      	add	r3, r2
 8002606:	3302      	adds	r3, #2
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	213c      	movs	r1, #60	; 0x3c
 8002618:	f000 fe68 	bl	80032ec <TFT_printChar>
 800261c:	e01d      	b.n	800265a <Tetris_View_renderNameInputScreenDynamicElements+0x96>
        else
            // print the letter.
            TFT_printChar(NAME_INPUT_SCR_FIRST_CHAR_POS_X +(charIndex*(NAME_INPUT_SCR_NAME_SIZE*TFT_CHAR_WIDTH)), NAME_INPUT_SCR_FIRST_CHAR_POS_Y, Tetris_Player[Current_Tetris_Player].name[charIndex], NAME_INPUT_SCR_NAME_SIZE, NAME_INPUT_SCR_TEXT_COLOR, NAME_INPUT_SCR_BACKGROUND_COLOR);
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	0052      	lsls	r2, r2, #1
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	b29b      	uxth	r3, r3
 800262c:	3328      	adds	r3, #40	; 0x28
 800262e:	b298      	uxth	r0, r3
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <Tetris_View_renderNameInputScreenDynamicElements+0xac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	461c      	mov	r4, r3
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <Tetris_View_renderNameInputScreenDynamicElements+0xb0>)
 800263a:	4623      	mov	r3, r4
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4423      	add	r3, r4
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	4413      	add	r3, r2
 8002646:	3302      	adds	r3, #2
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	231f      	movs	r3, #31
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	213c      	movs	r1, #60	; 0x3c
 8002656:	f000 fe49 	bl	80032ec <TFT_printChar>
    for(uint8 charIndex=0; charIndex < MAX_PLAYER_NAME_LENGTH; charIndex++)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b07      	cmp	r3, #7
 8002664:	d9b5      	bls.n	80025d2 <Tetris_View_renderNameInputScreenDynamicElements+0xe>
    }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	200000d8 	.word	0x200000d8
 8002674:	20000074 	.word	0x20000074

08002678 <Tetris_View_renderGameScreenStaticElements>:


void Tetris_View_renderGameScreenStaticElements(Tetris_Model_t *model)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b090      	sub	sp, #64	; 0x40
 800267c:	af04      	add	r7, sp, #16
 800267e:	6078      	str	r0, [r7, #4]
    const uint8 Text1 []= "Score";
 8002680:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <Tetris_View_renderGameScreenStaticElements+0x130>)
 8002682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268a:	6018      	str	r0, [r3, #0]
 800268c:	3304      	adds	r3, #4
 800268e:	8019      	strh	r1, [r3, #0]
    const uint8 Text2 []= "Level";
 8002690:	4a46      	ldr	r2, [pc, #280]	; (80027ac <Tetris_View_renderGameScreenStaticElements+0x134>)
 8002692:	f107 0320 	add.w	r3, r7, #32
 8002696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269a:	6018      	str	r0, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	8019      	strh	r1, [r3, #0]
    const uint8 Text3 []= "HI-Score";
 80026a0:	4a43      	ldr	r2, [pc, #268]	; (80027b0 <Tetris_View_renderGameScreenStaticElements+0x138>)
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a8:	c303      	stmia	r3!, {r0, r1}
 80026aa:	701a      	strb	r2, [r3, #0]
    const uint8 Text4 []= "Tetris";
 80026ac:	4a41      	ldr	r2, [pc, #260]	; (80027b4 <Tetris_View_renderGameScreenStaticElements+0x13c>)
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	3304      	adds	r3, #4
 80026ba:	8019      	strh	r1, [r3, #0]
 80026bc:	3302      	adds	r3, #2
 80026be:	0c0a      	lsrs	r2, r1, #16
 80026c0:	701a      	strb	r2, [r3, #0]

    // Fill the screen with the specified background color.
    TFT_fillColor(GAME_SCR_BACKGROUND_COLOR);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f000 fd30 	bl	8003128 <TFT_fillColor>

    // Print the game title.
    TFT_printString(GAME_SCR_TITLE_POS, Text4, GAME_SCR_TEXT_SIZE *3, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, 6);
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	2306      	movs	r3, #6
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	231f      	movs	r3, #31
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2303      	movs	r3, #3
 80026da:	2105      	movs	r1, #5
 80026dc:	200a      	movs	r0, #10
 80026de:	f000 fe8d 	bl	80033fc <TFT_printString>

    // Draw frames for the game grid and data.
    TFT_drawOutlineRectangle(GAME_SCR_GRID_POS, 62, 123, GAME_SCR_FRAME_COLOR, 1);
 80026e2:	2301      	movs	r3, #1
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	231f      	movs	r3, #31
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	237b      	movs	r3, #123	; 0x7b
 80026ec:	223e      	movs	r2, #62	; 0x3e
 80026ee:	2124      	movs	r1, #36	; 0x24
 80026f0:	2001      	movs	r0, #1
 80026f2:	f000 ff7d 	bl	80035f0 <TFT_drawOutlineRectangle>
    TFT_drawOutlineRectangle(GAME_SCR_DATA_FRAME_POS, 55, 123, GAME_SCR_FRAME_COLOR, 1);
 80026f6:	2301      	movs	r3, #1
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	231f      	movs	r3, #31
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	237b      	movs	r3, #123	; 0x7b
 8002700:	2237      	movs	r2, #55	; 0x37
 8002702:	2124      	movs	r1, #36	; 0x24
 8002704:	2045      	movs	r0, #69	; 0x45
 8002706:	f000 ff73 	bl	80035f0 <TFT_drawOutlineRectangle>

    // Print the player's name.
    TFT_printString(GAME_SCR_PLAYER_NAME_POS, Tetris_Player[Current_Tetris_Player].name, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, MAX_PLAYER_NAME_LENGTH);
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <Tetris_View_renderGameScreenStaticElements+0x140>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <Tetris_View_renderGameScreenStaticElements+0x144>)
 800271a:	4413      	add	r3, r2
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	2308      	movs	r3, #8
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	231f      	movs	r3, #31
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	212e      	movs	r1, #46	; 0x2e
 800272e:	2049      	movs	r0, #73	; 0x49
 8002730:	f000 fe64 	bl	80033fc <TFT_printString>

    // Print labels for score, level, and HI-Score.
    TFT_printString(GAME_SCR_SCORE_POS   , Text1, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, 5);
 8002734:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002738:	2305      	movs	r3, #5
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	231f      	movs	r3, #31
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2301      	movs	r3, #1
 8002746:	2142      	movs	r1, #66	; 0x42
 8002748:	2049      	movs	r0, #73	; 0x49
 800274a:	f000 fe57 	bl	80033fc <TFT_printString>
    TFT_printString(GAME_SCR_LEVEL_POS   , Text2, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, 5);
 800274e:	f107 0220 	add.w	r2, r7, #32
 8002752:	2305      	movs	r3, #5
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2300      	movs	r3, #0
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	231f      	movs	r3, #31
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	2160      	movs	r1, #96	; 0x60
 8002762:	2049      	movs	r0, #73	; 0x49
 8002764:	f000 fe4a 	bl	80033fc <TFT_printString>
    TFT_printString(GAME_SCR_HI_SCORE_POS, Text3, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, 8);
 8002768:	f107 0214 	add.w	r2, r7, #20
 800276c:	2308      	movs	r3, #8
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2300      	movs	r3, #0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	231f      	movs	r3, #31
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	217e      	movs	r1, #126	; 0x7e
 800277c:	2049      	movs	r0, #73	; 0x49
 800277e:	f000 fe3d 	bl	80033fc <TFT_printString>

    // Print the player's HI-Score.
    TFT_printNumbers(GAME_SCR_HI_SCORE_VAL_POS, Tetris_Player[0].score, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_COLOR, GAME_SCR_BACKGROUND_COLOR, 5);
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <Tetris_View_renderGameScreenStaticElements+0x144>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	2305      	movs	r3, #5
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	231f      	movs	r3, #31
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	2188      	movs	r1, #136	; 0x88
 8002798:	2049      	movs	r0, #73	; 0x49
 800279a:	f000 fe83 	bl	80034a4 <TFT_printNumbers>
}
 800279e:	bf00      	nop
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08004684 	.word	0x08004684
 80027ac:	0800468c 	.word	0x0800468c
 80027b0:	08004694 	.word	0x08004694
 80027b4:	080046a0 	.word	0x080046a0
 80027b8:	200000d8 	.word	0x200000d8
 80027bc:	20000074 	.word	0x20000074

080027c0 <Tetris_View_renderGameScreenDynamicElements>:


void Tetris_View_renderGameScreenDynamicElements(Tetris_Model_t *model)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af04      	add	r7, sp, #16
 80027c6:	6078      	str	r0, [r7, #4]
    // Print the player's current score.
    TFT_printNumbers(GAME_SCR_SCORE_VAL_POS, Tetris_Player[Current_Tetris_Player].score, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_VALUE_COLOR, GAME_SCR_BACKGROUND_COLOR, 6);
 80027c8:	4b55      	ldr	r3, [pc, #340]	; (8002920 <Tetris_View_renderGameScreenDynamicElements+0x160>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4a55      	ldr	r2, [pc, #340]	; (8002924 <Tetris_View_renderGameScreenDynamicElements+0x164>)
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	2306      	movs	r3, #6
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	231f      	movs	r3, #31
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2301      	movs	r3, #1
 80027ec:	214c      	movs	r1, #76	; 0x4c
 80027ee:	2049      	movs	r0, #73	; 0x49
 80027f0:	f000 fe58 	bl	80034a4 <TFT_printNumbers>

    // Print the player's current level.
    TFT_printNumbers(GAME_SCR_LEVEL_VAL_POS, model->currentLevel, GAME_SCR_TEXT_SIZE, GAME_SCR_TEXT_VALUE_COLOR, GAME_SCR_BACKGROUND_COLOR, 3);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80027fa:	461a      	mov	r2, r3
 80027fc:	2303      	movs	r3, #3
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	231f      	movs	r3, #31
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2301      	movs	r3, #1
 800280a:	216a      	movs	r1, #106	; 0x6a
 800280c:	2049      	movs	r0, #73	; 0x49
 800280e:	f000 fe49 	bl	80034a4 <TFT_printNumbers>

    // Check if a refresh is needed.
    if(model->refreshFlag)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d07d      	beq.n	8002918 <Tetris_View_renderGameScreenDynamicElements+0x158>
    {
        for(uint8 gridRows =0; gridRows < GRID_ROWS; gridRows++)
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e048      	b.n	80028b4 <Tetris_View_renderGameScreenDynamicElements+0xf4>
            for(uint8 gridColumns =0; gridColumns < GRID_COLUMNS; gridColumns++)
 8002822:	2300      	movs	r3, #0
 8002824:	73bb      	strb	r3, [r7, #14]
 8002826:	e03f      	b.n	80028a8 <Tetris_View_renderGameScreenDynamicElements+0xe8>
                if(model->grid[gridRows][gridColumns])
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	7bb9      	ldrb	r1, [r7, #14]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4403      	add	r3, r0
 8002838:	440b      	add	r3, r1
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d018      	beq.n	8002872 <Tetris_View_renderGameScreenDynamicElements+0xb2>
                    // Draw blocks with the specified block color.
                    TFT_drawRectangle(GAME_SCR_FIRST_BLOCK_POS_X + (gridColumns * (1+GAME_SCR_BLOCK_SIZE)), GAME_SCR_FIRST_BLOCK_POS_Y + (gridRows * (1+ GAME_SCR_BLOCK_SIZE)), GAME_SCR_BLOCK_SIZE, GAME_SCR_BLOCK_SIZE, GAME_SCR_BLOCK_COLOR);
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	0052      	lsls	r2, r2, #1
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	3303      	adds	r3, #3
 8002850:	b298      	uxth	r0, r3
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	0052      	lsls	r2, r2, #1
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	3326      	adds	r3, #38	; 0x26
 8002862:	b299      	uxth	r1, r3
 8002864:	231f      	movs	r3, #31
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2305      	movs	r3, #5
 800286a:	2205      	movs	r2, #5
 800286c:	f000 fc7a 	bl	8003164 <TFT_drawRectangle>
 8002870:	e017      	b.n	80028a2 <Tetris_View_renderGameScreenDynamicElements+0xe2>
                else
                    // Draw empty spaces with the background color.
                    TFT_drawRectangle(GAME_SCR_FIRST_BLOCK_POS_X + (gridColumns * (1+GAME_SCR_BLOCK_SIZE)), GAME_SCR_FIRST_BLOCK_POS_Y + (gridRows * (1+ GAME_SCR_BLOCK_SIZE)), GAME_SCR_BLOCK_SIZE, GAME_SCR_BLOCK_SIZE, GAME_SCR_BACKGROUND_COLOR);
 8002872:	7bbb      	ldrb	r3, [r7, #14]
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	0052      	lsls	r2, r2, #1
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	b29b      	uxth	r3, r3
 8002880:	3303      	adds	r3, #3
 8002882:	b298      	uxth	r0, r3
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	0052      	lsls	r2, r2, #1
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	3326      	adds	r3, #38	; 0x26
 8002894:	b299      	uxth	r1, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2305      	movs	r3, #5
 800289c:	2205      	movs	r2, #5
 800289e:	f000 fc61 	bl	8003164 <TFT_drawRectangle>
            for(uint8 gridColumns =0; gridColumns < GRID_COLUMNS; gridColumns++)
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	3301      	adds	r3, #1
 80028a6:	73bb      	strb	r3, [r7, #14]
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	d9bc      	bls.n	8002828 <Tetris_View_renderGameScreenDynamicElements+0x68>
        for(uint8 gridRows =0; gridRows < GRID_ROWS; gridRows++)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b13      	cmp	r3, #19
 80028b8:	d9b3      	bls.n	8002822 <Tetris_View_renderGameScreenDynamicElements+0x62>

        // Draw the current moving object.
        for(uint8 blockIndex=0; blockIndex < 4; blockIndex++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	737b      	strb	r3, [r7, #13]
 80028be:	e024      	b.n	800290a <Tetris_View_renderGameScreenDynamicElements+0x14a>
            TFT_drawRectangle(GAME_SCR_FIRST_BLOCK_POS_X + (model->currentMovingObject.block[blockIndex].x * (1+GAME_SCR_BLOCK_SIZE)), GAME_SCR_FIRST_BLOCK_POS_Y + (model->currentMovingObject.block[blockIndex].y * (1+ GAME_SCR_BLOCK_SIZE)), GAME_SCR_BLOCK_SIZE, GAME_SCR_BLOCK_SIZE, GAME_SCR_BLOCK_COLOR);
 80028c0:	7b7a      	ldrb	r2, [r7, #13]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3264      	adds	r2, #100	; 0x64
 80028c6:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3303      	adds	r3, #3
 80028d8:	b298      	uxth	r0, r3
 80028da:	7b7b      	ldrb	r3, [r7, #13]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	3364      	adds	r3, #100	; 0x64
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	0052      	lsls	r2, r2, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3326      	adds	r3, #38	; 0x26
 80028f6:	b299      	uxth	r1, r3
 80028f8:	231f      	movs	r3, #31
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2305      	movs	r3, #5
 80028fe:	2205      	movs	r2, #5
 8002900:	f000 fc30 	bl	8003164 <TFT_drawRectangle>
        for(uint8 blockIndex=0; blockIndex < 4; blockIndex++)
 8002904:	7b7b      	ldrb	r3, [r7, #13]
 8002906:	3301      	adds	r3, #1
 8002908:	737b      	strb	r3, [r7, #13]
 800290a:	7b7b      	ldrb	r3, [r7, #13]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d9d7      	bls.n	80028c0 <Tetris_View_renderGameScreenDynamicElements+0x100>

        // Clear the refresh flag.
        model->refreshFlag = FALSE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    }
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200000d8 	.word	0x200000d8
 8002924:	20000074 	.word	0x20000074

08002928 <Tetris_View_renderGameOverScreenStaticElements>:


void Tetris_View_renderGameOverScreenStaticElements(Tetris_Model_t *model)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b08f      	sub	sp, #60	; 0x3c
 800292c:	af04      	add	r7, sp, #16
 800292e:	6078      	str	r0, [r7, #4]
    const uint8 Text1 []= "GAME OVER";
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <Tetris_View_renderGameOverScreenStaticElements+0x98>)
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	ca07      	ldmia	r2, {r0, r1, r2}
 8002938:	c303      	stmia	r3!, {r0, r1}
 800293a:	801a      	strh	r2, [r3, #0]
    const uint8 Text2 []= "Your Score: ";
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <Tetris_View_renderGameOverScreenStaticElements+0x9c>)
 800293e:	f107 040c 	add.w	r4, r7, #12
 8002942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002944:	c407      	stmia	r4!, {r0, r1, r2}
 8002946:	7023      	strb	r3, [r4, #0]

    // Draw the background frame.
    TFT_drawRectangle(GAME_OVER_SCR_FRAME_POS, TFT_WIDTH, TFT_HIGHT, GAME_OVER_SCR_BACKGROUND_COLOR);
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	23a0      	movs	r3, #160	; 0xa0
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2100      	movs	r1, #0
 8002952:	2000      	movs	r0, #0
 8002954:	f000 fc06 	bl	8003164 <TFT_drawRectangle>

    // Print the "GAME OVER" text.
    TFT_printString(GAME_OVER_SCR_GAME_OVER_TEXT_POS, Text1, GAME_OVER_SCR_GAME_OVER_TEXT_SIZE, GAME_OVER_SCR_TEXT_COLOR, GAME_OVER_SCR_BACKGROUND_COLOR, 9);
 8002958:	f107 021c 	add.w	r2, r7, #28
 800295c:	2309      	movs	r3, #9
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2300      	movs	r3, #0
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	231f      	movs	r3, #31
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2302      	movs	r3, #2
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	200a      	movs	r0, #10
 800296e:	f000 fd45 	bl	80033fc <TFT_printString>

    // Print the "Your Score:" text.
    TFT_printString(GAME_OVER_SCR_SCORE_TEXT_POS, Text2, GAME_OVER_SCR_SCORE_SIZE, GAME_OVER_SCR_TEXT_COLOR, GAME_OVER_SCR_BACKGROUND_COLOR, 12);
 8002972:	f107 020c 	add.w	r2, r7, #12
 8002976:	230c      	movs	r3, #12
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	2300      	movs	r3, #0
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	231f      	movs	r3, #31
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	215a      	movs	r1, #90	; 0x5a
 8002986:	2010      	movs	r0, #16
 8002988:	f000 fd38 	bl	80033fc <TFT_printString>

    // Print the player's score.
    TFT_printNumbers(GAME_OVER_SCR_SCORE_VAL_POS, Tetris_Player[Current_Tetris_Player].score, GAME_OVER_SCR_SCORE_SIZE, GAME_OVER_SCR_TEXT_COLOR, GAME_OVER_SCR_BACKGROUND_COLOR, 5);
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <Tetris_View_renderGameOverScreenStaticElements+0xa0>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <Tetris_View_renderGameOverScreenStaticElements+0xa4>)
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2305      	movs	r3, #5
 80029a4:	9302      	str	r3, [sp, #8]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	231f      	movs	r3, #31
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	215a      	movs	r1, #90	; 0x5a
 80029b2:	2054      	movs	r0, #84	; 0x54
 80029b4:	f000 fd76 	bl	80034a4 <TFT_printNumbers>
}
 80029b8:	bf00      	nop
 80029ba:	372c      	adds	r7, #44	; 0x2c
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	080046a8 	.word	0x080046a8
 80029c4:	080046b4 	.word	0x080046b4
 80029c8:	200000d8 	.word	0x200000d8
 80029cc:	20000074 	.word	0x20000074

080029d0 <main>:


uint16 getRandNum(void);

int main(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0bc      	sub	sp, #240	; 0xf0
 80029d4:	af00      	add	r7, sp, #0
    RCC_initSysClk();
 80029d6:	f001 fbf5 	bl	80041c4 <RCC_initSysClk>
    STK_init();
 80029da:	f001 fd03 	bl	80043e4 <STK_init>
    GPT_initTickTimer(MILLI_SEC);
 80029de:	2001      	movs	r0, #1
 80029e0:	f001 f9cc 	bl	8003d7c <GPT_initTickTimer>

    Tetris_Model_t Tetris_1;
    Dependencies_t Tetris_dependencies =
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <main+0x54>)
 80029e6:	463b      	mov	r3, r7
 80029e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ec:	e883 0003 	stmia.w	r3, {r0, r1}
        GPT_getTicks,
        getRandNum
    };


    Tetris_Model_init      (&Tetris_1, &Tetris_dependencies);   // Create Tetris model.
 80029f0:	463a      	mov	r2, r7
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f973 	bl	8000ce4 <Tetris_Model_init>
    Tetris_Controller_init (&Tetris_Buttons_1);					// Use Buttons as the controller.
 80029fe:	480a      	ldr	r0, [pc, #40]	; (8002a28 <main+0x58>)
 8002a00:	f7fd fed5 	bl	80007ae <Tetris_Controller_init>
    Tetris_View_init       (&Tetris_TFT_ST18);					// Use TFT st7735s 1.8 inch as display for view.
 8002a04:	4809      	ldr	r0, [pc, #36]	; (8002a2c <main+0x5c>)
 8002a06:	f7ff fbd7 	bl	80021b8 <Tetris_View_init>

    while(1)
    {
    	Tetris_View_handle      (&Tetris_1, &Tetris_TFT_ST18);
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4907      	ldr	r1, [pc, #28]	; (8002a2c <main+0x5c>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fbdd 	bl	80021d0 <Tetris_View_handle>
        Tetris_Controller_handle(&Tetris_1, &Tetris_Buttons_1);
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4903      	ldr	r1, [pc, #12]	; (8002a28 <main+0x58>)
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fed1 	bl	80007c4 <Tetris_Controller_handle>
    	Tetris_View_handle      (&Tetris_1, &Tetris_TFT_ST18);
 8002a22:	e7f2      	b.n	8002a0a <main+0x3a>
 8002a24:	080046c4 	.word	0x080046c4
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000024 	.word	0x20000024

08002a30 <getRandNum>:
return 0;
}


uint16 getRandNum(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
    return GPT_getRemainingTime(TICK_TIMER_ID);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f001 fa9b 	bl	8003f70 <GPT_getRemainingTime>
 8002a3a:	4603      	mov	r3, r0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <Button_init>:
#include "../Inc/HAL//Button/Button_interface.h"
#include "../Inc/HAL//Button/Button_private.h"


void Button_init(Button_t button_id, Button_Config_t *Button_config)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
    Button[button_id].buttonConfig.pin           = Button_config->pin;
 8002a4c:	79fa      	ldrb	r2, [r7, #7]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	7818      	ldrb	r0, [r3, #0]
 8002a52:	497d      	ldr	r1, [pc, #500]	; (8002c48 <Button_init+0x208>)
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	4602      	mov	r2, r0
 8002a60:	701a      	strb	r2, [r3, #0]
    Button[button_id].buttonConfig.port          = Button_config->port;
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7858      	ldrb	r0, [r3, #1]
 8002a68:	4977      	ldr	r1, [pc, #476]	; (8002c48 <Button_init+0x208>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3301      	adds	r3, #1
 8002a76:	4602      	mov	r2, r0
 8002a78:	701a      	strb	r2, [r3, #0]
    Button[button_id].buttonConfig.pullType      = Button_config->pullType;
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	7898      	ldrb	r0, [r3, #2]
 8002a80:	4971      	ldr	r1, [pc, #452]	; (8002c48 <Button_init+0x208>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	4602      	mov	r2, r0
 8002a90:	701a      	strb	r2, [r3, #0]
    Button[button_id].buttonConfig.PullSource    = Button_config->PullSource;
 8002a92:	79fa      	ldrb	r2, [r7, #7]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	78d8      	ldrb	r0, [r3, #3]
 8002a98:	496b      	ldr	r1, [pc, #428]	; (8002c48 <Button_init+0x208>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3303      	adds	r3, #3
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	701a      	strb	r2, [r3, #0]
    Button[button_id].buttonConfig.extiState     = Button_config->extiState;
 8002aaa:	79fa      	ldrb	r2, [r7, #7]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7918      	ldrb	r0, [r3, #4]
 8002ab0:	4965      	ldr	r1, [pc, #404]	; (8002c48 <Button_init+0x208>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3304      	adds	r3, #4
 8002abe:	4602      	mov	r2, r0
 8002ac0:	701a      	strb	r2, [r3, #0]
    Button[button_id].buttonConfig.CallbackFunc  = Button_config->CallbackFunc;
 8002ac2:	79fa      	ldrb	r2, [r7, #7]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	485f      	ldr	r0, [pc, #380]	; (8002c48 <Button_init+0x208>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4403      	add	r3, r0
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	6019      	str	r1, [r3, #0]
    
    switch(Button[button_id].buttonConfig.port)
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	495b      	ldr	r1, [pc, #364]	; (8002c48 <Button_init+0x208>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d010      	beq.n	8002b12 <Button_init+0xd2>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	dc13      	bgt.n	8002b1c <Button_init+0xdc>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <Button_init+0xbe>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <Button_init+0xc8>
#endif
            break;
            
        default: 
            // Error handling   
            break;
 8002afc:	e00e      	b.n	8002b1c <Button_init+0xdc>
            RCC_enableClk (RCC_APB2, RCC_GPIOA);
 8002afe:	2102      	movs	r1, #2
 8002b00:	2002      	movs	r0, #2
 8002b02:	f001 fb87 	bl	8004214 <RCC_enableClk>
            break;
 8002b06:	e00a      	b.n	8002b1e <Button_init+0xde>
            RCC_enableClk (RCC_APB2, RCC_GPIOB);
 8002b08:	2103      	movs	r1, #3
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f001 fb82 	bl	8004214 <RCC_enableClk>
            break;
 8002b10:	e005      	b.n	8002b1e <Button_init+0xde>
            RCC_enableClk (RCC_APB2, RCC_GPIOC);
 8002b12:	2104      	movs	r1, #4
 8002b14:	2002      	movs	r0, #2
 8002b16:	f001 fb7d 	bl	8004214 <RCC_enableClk>
            break;
 8002b1a:	e000      	b.n	8002b1e <Button_init+0xde>
            break;
 8002b1c:	bf00      	nop
    }

    switch(Button[button_id].buttonConfig.pullType)
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	4949      	ldr	r1, [pc, #292]	; (8002c48 <Button_init+0x208>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <Button_init+0xfc>
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d03c      	beq.n	8002bb4 <Button_init+0x174>
                DIO_setPinDirection( Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin, INPUT_FLOATING );
            break;
            
        default: 
            // Error handling   
            break;
 8002b3a:	e077      	b.n	8002c2c <Button_init+0x1ec>
            if(Button[button_id].buttonConfig.PullSource == Internal)
 8002b3c:	79fa      	ldrb	r2, [r7, #7]
 8002b3e:	4942      	ldr	r1, [pc, #264]	; (8002c48 <Button_init+0x208>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d117      	bne.n	8002b84 <Button_init+0x144>
                DIO_setPinDirection( Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin, INPUT_PULLUP );
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	493c      	ldr	r1, [pc, #240]	; (8002c48 <Button_init+0x208>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3301      	adds	r3, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	79fa      	ldrb	r2, [r7, #7]
 8002b6a:	4937      	ldr	r1, [pc, #220]	; (8002c48 <Button_init+0x208>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f000 fde9 	bl	8003754 <DIO_setPinDirection>
            break;                                                                     
 8002b82:	e053      	b.n	8002c2c <Button_init+0x1ec>
                DIO_setPinDirection( Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin, INPUT_FLOATING );
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	4930      	ldr	r1, [pc, #192]	; (8002c48 <Button_init+0x208>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3301      	adds	r3, #1
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	79fa      	ldrb	r2, [r7, #7]
 8002b9a:	492b      	ldr	r1, [pc, #172]	; (8002c48 <Button_init+0x208>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2204      	movs	r2, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	f000 fdd1 	bl	8003754 <DIO_setPinDirection>
            break;                                                                     
 8002bb2:	e03b      	b.n	8002c2c <Button_init+0x1ec>
            if(Button[button_id].buttonConfig.PullSource == Internal)
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <Button_init+0x208>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d117      	bne.n	8002bfc <Button_init+0x1bc>
                DIO_setPinDirection( Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin, INPUT_PULLDOWN );
 8002bcc:	79fa      	ldrb	r2, [r7, #7]
 8002bce:	491e      	ldr	r1, [pc, #120]	; (8002c48 <Button_init+0x208>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3301      	adds	r3, #1
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2d8      	uxtb	r0, r3
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	4919      	ldr	r1, [pc, #100]	; (8002c48 <Button_init+0x208>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f000 fdad 	bl	8003754 <DIO_setPinDirection>
            break;
 8002bfa:	e016      	b.n	8002c2a <Button_init+0x1ea>
                DIO_setPinDirection( Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin, INPUT_FLOATING );
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4912      	ldr	r1, [pc, #72]	; (8002c48 <Button_init+0x208>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2d8      	uxtb	r0, r3
 8002c10:	79fa      	ldrb	r2, [r7, #7]
 8002c12:	490d      	ldr	r1, [pc, #52]	; (8002c48 <Button_init+0x208>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2204      	movs	r2, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	f000 fd95 	bl	8003754 <DIO_setPinDirection>
            break;
 8002c2a:	bf00      	nop
    }
    
    Button[button_id].ButtonState = Button_Released; 
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	4906      	ldr	r1, [pc, #24]	; (8002c48 <Button_init+0x208>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200000dc 	.word	0x200000dc

08002c4c <Button_updateState>:

void Button_updateState()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    for(uint8 button_id=0; button_id < MAX_BUTTONS; button_id++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	71fb      	strb	r3, [r7, #7]
 8002c56:	e1b1      	b.n	8002fbc <Button_updateState+0x370>
    {
        #if FREE_RTOS_IN_USE == 1
        uint32 currentTime = xTaskGetTickCount();
        #elif FREE_RTOS_IN_USE == 0
        uint32 currentTime = GPT_getTicks();
 8002c58:	f001 f9b6 	bl	8003fc8 <GPT_getTicks>
 8002c5c:	6038      	str	r0, [r7, #0]
        #endif
        
        switch(Button[button_id].ButtonState)
 8002c5e:	79fa      	ldrb	r2, [r7, #7]
 8002c60:	49b8      	ldr	r1, [pc, #736]	; (8002f44 <Button_updateState+0x2f8>)
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	f300 8198 	bgt.w	8002fa8 <Button_updateState+0x35c>
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	f280 8132 	bge.w	8002ee2 <Button_updateState+0x296>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <Button_updateState+0x46>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f2c0 8190 	blt.w	8002fa8 <Button_updateState+0x35c>
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f200 818c 	bhi.w	8002fa8 <Button_updateState+0x35c>
 8002c90:	e076      	b.n	8002d80 <Button_updateState+0x134>
        {
            case Button_Released :
            
                if(Button[button_id].buttonConfig.pullType == Pull_Down)
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	49ab      	ldr	r1, [pc, #684]	; (8002f44 <Button_updateState+0x2f8>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d12e      	bne.n	8002d08 <Button_updateState+0xbc>
                    {
                        if(DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == HIGH)
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	49a5      	ldr	r1, [pc, #660]	; (8002f44 <Button_updateState+0x2f8>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3301      	adds	r3, #1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	49a0      	ldr	r1, [pc, #640]	; (8002f44 <Button_updateState+0x2f8>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f000 ff1f 	bl	8003b14 <DIO_getPinValue>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	f040 8167 	bne.w	8002fac <Button_updateState+0x360>
                            {
                                Button[button_id].ButtonState = Button_Pressed_Pending_Read;
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	4998      	ldr	r1, [pc, #608]	; (8002f44 <Button_updateState+0x2f8>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	330c      	adds	r3, #12
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
                                Button[button_id].ButtonPressStartTime = currentTime;
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	4993      	ldr	r1, [pc, #588]	; (8002f44 <Button_updateState+0x2f8>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3310      	adds	r3, #16
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	601a      	str	r2, [r3, #0]
                            {
                                Button[button_id].ButtonState = Button_Pressed_Pending_Read;
                                Button[button_id].ButtonPressStartTime = currentTime;
                            }
                    }
                break;
 8002d06:	e151      	b.n	8002fac <Button_updateState+0x360>
                else if(Button[button_id].buttonConfig.pullType == Pull_Up)
 8002d08:	79fa      	ldrb	r2, [r7, #7]
 8002d0a:	498e      	ldr	r1, [pc, #568]	; (8002f44 <Button_updateState+0x2f8>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3302      	adds	r3, #2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8145 	bne.w	8002fac <Button_updateState+0x360>
                        if(DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == LOW)
 8002d22:	79fa      	ldrb	r2, [r7, #7]
 8002d24:	4987      	ldr	r1, [pc, #540]	; (8002f44 <Button_updateState+0x2f8>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3301      	adds	r3, #1
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	4982      	ldr	r1, [pc, #520]	; (8002f44 <Button_updateState+0x2f8>)
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f000 fee3 	bl	8003b14 <DIO_getPinValue>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 812b 	bne.w	8002fac <Button_updateState+0x360>
                                Button[button_id].ButtonState = Button_Pressed_Pending_Read;
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	497a      	ldr	r1, [pc, #488]	; (8002f44 <Button_updateState+0x2f8>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	330c      	adds	r3, #12
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
                                Button[button_id].ButtonPressStartTime = currentTime;
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	4975      	ldr	r1, [pc, #468]	; (8002f44 <Button_updateState+0x2f8>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3310      	adds	r3, #16
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
                break;
 8002d7e:	e115      	b.n	8002fac <Button_updateState+0x360>
                
            case Button_Pressed_Pending_Read : 
            case Button_Pressed_Read_Once    :
            
                if(Button[button_id].buttonConfig.pullType == Pull_Down)
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	4970      	ldr	r1, [pc, #448]	; (8002f44 <Button_updateState+0x2f8>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3302      	adds	r3, #2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d14b      	bne.n	8002e30 <Button_updateState+0x1e4>
                    {
                        if((DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == LOW)  && 
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	496a      	ldr	r1, [pc, #424]	; (8002f44 <Button_updateState+0x2f8>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3301      	adds	r3, #1
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2d8      	uxtb	r0, r3
 8002dac:	79fa      	ldrb	r2, [r7, #7]
 8002dae:	4965      	ldr	r1, [pc, #404]	; (8002f44 <Button_updateState+0x2f8>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f000 fea8 	bl	8003b14 <DIO_getPinValue>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d117      	bne.n	8002dfa <Button_updateState+0x1ae>
                          ((currentTime-Button[button_id].ButtonPressStartTime) > BUTTON_DEBOUNCING_DELAY))
 8002dca:	79fa      	ldrb	r2, [r7, #7]
 8002dcc:	495d      	ldr	r1, [pc, #372]	; (8002f44 <Button_updateState+0x2f8>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3310      	adds	r3, #16
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	1ad3      	subs	r3, r2, r3
                        if((DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == LOW)  && 
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d90a      	bls.n	8002dfa <Button_updateState+0x1ae>
                            Button[button_id].ButtonState = Button_Released;
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	4957      	ldr	r1, [pc, #348]	; (8002f44 <Button_updateState+0x2f8>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	330c      	adds	r3, #12
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e072      	b.n	8002ee0 <Button_updateState+0x294>

                        else if(currentTime-Button[button_id].ButtonPressStartTime > BUTTON_LONG_PRESS_TIME )
 8002dfa:	79fa      	ldrb	r2, [r7, #7]
 8002dfc:	4951      	ldr	r1, [pc, #324]	; (8002f44 <Button_updateState+0x2f8>)
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3310      	adds	r3, #16
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002e14:	4293      	cmp	r3, r2
 8002e16:	f240 80cb 	bls.w	8002fb0 <Button_updateState+0x364>
                            Button[button_id].ButtonState = Button_Long_Pressed;
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	4949      	ldr	r1, [pc, #292]	; (8002f44 <Button_updateState+0x2f8>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	330c      	adds	r3, #12
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	701a      	strb	r2, [r3, #0]
                            Button[button_id].ButtonState = Button_Released;

                        else if(currentTime-Button[button_id].ButtonPressStartTime > BUTTON_LONG_PRESS_TIME )
                            Button[button_id].ButtonState = Button_Long_Pressed;
                    }
                break;
 8002e2e:	e0bf      	b.n	8002fb0 <Button_updateState+0x364>
                else if(Button[button_id].buttonConfig.pullType == Pull_Up)
 8002e30:	79fa      	ldrb	r2, [r7, #7]
 8002e32:	4944      	ldr	r1, [pc, #272]	; (8002f44 <Button_updateState+0x2f8>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3302      	adds	r3, #2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 80b3 	bne.w	8002fb0 <Button_updateState+0x364>
                        if((DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == HIGH) && 
 8002e4a:	79fa      	ldrb	r2, [r7, #7]
 8002e4c:	493d      	ldr	r1, [pc, #244]	; (8002f44 <Button_updateState+0x2f8>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3301      	adds	r3, #1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2d8      	uxtb	r0, r3
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	4938      	ldr	r1, [pc, #224]	; (8002f44 <Button_updateState+0x2f8>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	f000 fe4f 	bl	8003b14 <DIO_getPinValue>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d117      	bne.n	8002eac <Button_updateState+0x260>
                          ((currentTime-Button[button_id].ButtonPressStartTime) > BUTTON_DEBOUNCING_DELAY))
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	4931      	ldr	r1, [pc, #196]	; (8002f44 <Button_updateState+0x2f8>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
                        if((DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == HIGH) && 
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d90a      	bls.n	8002eac <Button_updateState+0x260>
                            Button[button_id].ButtonState = Button_Released;
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	492a      	ldr	r1, [pc, #168]	; (8002f44 <Button_updateState+0x2f8>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e019      	b.n	8002ee0 <Button_updateState+0x294>
                        else if(currentTime-Button[button_id].ButtonPressStartTime > BUTTON_LONG_PRESS_TIME )
 8002eac:	79fa      	ldrb	r2, [r7, #7]
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <Button_updateState+0x2f8>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3310      	adds	r3, #16
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d972      	bls.n	8002fb0 <Button_updateState+0x364>
                            Button[button_id].ButtonState = Button_Long_Pressed;
 8002eca:	79fa      	ldrb	r2, [r7, #7]
 8002ecc:	491d      	ldr	r1, [pc, #116]	; (8002f44 <Button_updateState+0x2f8>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	330c      	adds	r3, #12
 8002eda:	2203      	movs	r2, #3
 8002edc:	701a      	strb	r2, [r3, #0]
                break;
 8002ede:	e067      	b.n	8002fb0 <Button_updateState+0x364>
 8002ee0:	e066      	b.n	8002fb0 <Button_updateState+0x364>
                
            case Button_Long_Pressed :
            case Button_Long_Pressed_Read_Once :
            
                if(Button[button_id].buttonConfig.pullType == Pull_Down)
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	4917      	ldr	r1, [pc, #92]	; (8002f44 <Button_updateState+0x2f8>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d126      	bne.n	8002f48 <Button_updateState+0x2fc>
                    {
                        if(DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == LOW)
 8002efa:	79fa      	ldrb	r2, [r7, #7]
 8002efc:	4911      	ldr	r1, [pc, #68]	; (8002f44 <Button_updateState+0x2f8>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3301      	adds	r3, #1
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2d8      	uxtb	r0, r3
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	490c      	ldr	r1, [pc, #48]	; (8002f44 <Button_updateState+0x2f8>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	f000 fdf7 	bl	8003b14 <DIO_getPinValue>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d143      	bne.n	8002fb4 <Button_updateState+0x368>
                            Button[button_id].ButtonState = Button_Released;    
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	4905      	ldr	r1, [pc, #20]	; (8002f44 <Button_updateState+0x2f8>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
                else if(Button[button_id].buttonConfig.pullType == Pull_Up)
                    {
                        if(DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == HIGH)
                            Button[button_id].ButtonState = Button_Released;
                    }
                break;
 8002f40:	e038      	b.n	8002fb4 <Button_updateState+0x368>
 8002f42:	bf00      	nop
 8002f44:	200000dc 	.word	0x200000dc
                else if(Button[button_id].buttonConfig.pullType == Pull_Up)
 8002f48:	79fa      	ldrb	r2, [r7, #7]
 8002f4a:	4921      	ldr	r1, [pc, #132]	; (8002fd0 <Button_updateState+0x384>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3302      	adds	r3, #2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d129      	bne.n	8002fb4 <Button_updateState+0x368>
                        if(DIO_getPinValue(Button[button_id].buttonConfig.port, Button[button_id].buttonConfig.pin) == HIGH)
 8002f60:	79fa      	ldrb	r2, [r7, #7]
 8002f62:	491b      	ldr	r1, [pc, #108]	; (8002fd0 <Button_updateState+0x384>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3301      	adds	r3, #1
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2d8      	uxtb	r0, r3
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <Button_updateState+0x384>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	f000 fdc4 	bl	8003b14 <DIO_getPinValue>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d110      	bne.n	8002fb4 <Button_updateState+0x368>
                            Button[button_id].ButtonState = Button_Released;
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <Button_updateState+0x384>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
                break;
 8002fa6:	e005      	b.n	8002fb4 <Button_updateState+0x368>
            
            default :
                // Error handling
                break;
 8002fa8:	bf00      	nop
 8002faa:	e004      	b.n	8002fb6 <Button_updateState+0x36a>
                break;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <Button_updateState+0x36a>
                break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <Button_updateState+0x36a>
                break;
 8002fb4:	bf00      	nop
    for(uint8 button_id=0; button_id < MAX_BUTTONS; button_id++)
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	71fb      	strb	r3, [r7, #7]
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	f67f ae4a 	bls.w	8002c58 <Button_updateState+0xc>
        }
    }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200000dc 	.word	0x200000dc

08002fd4 <Button_getState>:

Button_State_t Button_getState(Button_t button_id)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
    if(Button[button_id].ButtonState == Button_Pressed_Pending_Read)
 8002fde:	79fa      	ldrb	r2, [r7, #7]
 8002fe0:	491e      	ldr	r1, [pc, #120]	; (800305c <Button_getState+0x88>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	330c      	adds	r3, #12
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10b      	bne.n	800300e <Button_getState+0x3a>
    {
        Button[button_id].ButtonState = Button_Pressed_Read_Once;
 8002ff6:	79fa      	ldrb	r2, [r7, #7]
 8002ff8:	4918      	ldr	r1, [pc, #96]	; (800305c <Button_getState+0x88>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	330c      	adds	r3, #12
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
        return Button_Pressed_Pending_Read;
 800300a:	2301      	movs	r3, #1
 800300c:	e021      	b.n	8003052 <Button_getState+0x7e>
    }
    else if(Button[button_id].ButtonState == Button_Long_Pressed)
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4912      	ldr	r1, [pc, #72]	; (800305c <Button_getState+0x88>)
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	330c      	adds	r3, #12
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b03      	cmp	r3, #3
 8003024:	d10b      	bne.n	800303e <Button_getState+0x6a>
    {
        Button[button_id].ButtonState = Button_Long_Pressed_Read_Once;
 8003026:	79fa      	ldrb	r2, [r7, #7]
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <Button_getState+0x88>)
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	330c      	adds	r3, #12
 8003036:	2204      	movs	r2, #4
 8003038:	701a      	strb	r2, [r3, #0]
        return Button_Long_Pressed;
 800303a:	2303      	movs	r3, #3
 800303c:	e009      	b.n	8003052 <Button_getState+0x7e>
    }

    return Button[button_id].ButtonState;
 800303e:	79fa      	ldrb	r2, [r7, #7]
 8003040:	4906      	ldr	r1, [pc, #24]	; (800305c <Button_getState+0x88>)
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	330c      	adds	r3, #12
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	200000dc 	.word	0x200000dc

08003060 <TFT_init>:
#include "../Inc/HAL//TFT/TFT_private.h"
#include "../Inc/HAL//TFT/TFT_config.h"


void TFT_init()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    #if TFT_A0_PORT == DIO_GPIOA
    RCC_enableClk (RCC_APB2, RCC_GPIOA);    
 8003064:	2102      	movs	r1, #2
 8003066:	2002      	movs	r0, #2
 8003068:	f001 f8d4 	bl	8004214 <RCC_enableClk>
    #elif TFT_A0_PORT == DIO_GPIOB
    RCC_enableClk (RCC_APB2, RCC_GPIOB);
    #endif
    
    #if TFT_RESET_PORT == DIO_GPIOA
    RCC_enableClk (RCC_APB2, RCC_GPIOA);    
 800306c:	2102      	movs	r1, #2
 800306e:	2002      	movs	r0, #2
 8003070:	f001 f8d0 	bl	8004214 <RCC_enableClk>
    #elif TFT_RESET_PORT == DIO_GPIOB
    RCC_enableClk (RCC_APB2, RCC_GPIOB);
    #endif
    
    DIO_setPinDirection(TFT_A0_PORT    , TFT_A0_PIN    , OUTPUT_SPEED_2MHZ_PP);
 8003074:	2202      	movs	r2, #2
 8003076:	2102      	movs	r1, #2
 8003078:	2000      	movs	r0, #0
 800307a:	f000 fb6b 	bl	8003754 <DIO_setPinDirection>
    DIO_setPinDirection(TFT_RESET_PORT , TFT_RESET_PIN , OUTPUT_SPEED_2MHZ_PP);
 800307e:	2202      	movs	r2, #2
 8003080:	2103      	movs	r1, #3
 8003082:	2000      	movs	r0, #0
 8003084:	f000 fb66 	bl	8003754 <DIO_setPinDirection>
    
    #if SPI_USED == SPI_1
    
    RCC_enableClk ( RCC_APB2, RCC_GPIOA);
 8003088:	2102      	movs	r1, #2
 800308a:	2002      	movs	r0, #2
 800308c:	f001 f8c2 	bl	8004214 <RCC_enableClk>
    RCC_enableClk ( RCC_APB2, RCC_SPI1);
 8003090:	210c      	movs	r1, #12
 8003092:	2002      	movs	r0, #2
 8003094:	f001 f8be 	bl	8004214 <RCC_enableClk>
    
    DIO_setPinDirection(DIO_GPIOA , DIO_PIN5 , OUTPUT_SPEED_10MHZ_ALPP );
 8003098:	2209      	movs	r2, #9
 800309a:	2105      	movs	r1, #5
 800309c:	2000      	movs	r0, #0
 800309e:	f000 fb59 	bl	8003754 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_GPIOA , DIO_PIN7 , OUTPUT_SPEED_10MHZ_ALPP );
 80030a2:	2209      	movs	r2, #9
 80030a4:	2107      	movs	r1, #7
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 fb54 	bl	8003754 <DIO_setPinDirection>
    
    NVIC_enableInterrupt(NVIC_SPI1);
 80030ac:	2023      	movs	r0, #35	; 0x23
 80030ae:	f001 f867 	bl	8004180 <NVIC_enableInterrupt>
    
    SPI1_init();
 80030b2:	f001 f8f1 	bl	8004298 <SPI1_init>
    // implement code using SPI2 peripheral
    
    #endif
    
    /* Reset Pulse */
    DIO_setPinValue(TFT_RESET_PORT, TFT_RESET_PIN, HIGH);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2103      	movs	r1, #3
 80030ba:	2000      	movs	r0, #0
 80030bc:	f000 fcb0 	bl	8003a20 <DIO_setPinValue>
    STK_delayMicroSec(100);
 80030c0:	2064      	movs	r0, #100	; 0x64
 80030c2:	f001 f9af 	bl	8004424 <STK_delayMicroSec>
    
    DIO_setPinValue(TFT_RESET_PORT, TFT_RESET_PIN, LOW);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2103      	movs	r1, #3
 80030ca:	2000      	movs	r0, #0
 80030cc:	f000 fca8 	bl	8003a20 <DIO_setPinValue>
    STK_delayMicroSec(5);
 80030d0:	2005      	movs	r0, #5
 80030d2:	f001 f9a7 	bl	8004424 <STK_delayMicroSec>
    
    DIO_setPinValue(TFT_RESET_PORT, TFT_RESET_PIN, HIGH);
 80030d6:	2201      	movs	r2, #1
 80030d8:	2103      	movs	r1, #3
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 fca0 	bl	8003a20 <DIO_setPinValue>
    STK_delayMicroSec(100);
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f001 f99f 	bl	8004424 <STK_delayMicroSec>
    
    DIO_setPinValue(TFT_RESET_PORT, TFT_RESET_PIN, LOW);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2103      	movs	r1, #3
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 fc98 	bl	8003a20 <DIO_setPinValue>
    STK_delayMicroSec(100);
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	f001 f997 	bl	8004424 <STK_delayMicroSec>
    
    DIO_setPinValue(TFT_RESET_PORT, TFT_RESET_PIN, HIGH);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2103      	movs	r1, #3
 80030fa:	2000      	movs	r0, #0
 80030fc:	f000 fc90 	bl	8003a20 <DIO_setPinValue>
    STK_delayMilliSec(120); 
 8003100:	2078      	movs	r0, #120	; 0x78
 8003102:	f001 f9d3 	bl	80044ac <STK_delayMilliSec>

    
    /* Sleep Out TFT*/
    writeCommand(TFT_CMD_SLPOUT);
 8003106:	2011      	movs	r0, #17
 8003108:	f000 f864 	bl	80031d4 <writeCommand>
    STK_delayMilliSec(150);
 800310c:	2096      	movs	r0, #150	; 0x96
 800310e:	f001 f9cd 	bl	80044ac <STK_delayMilliSec>
    
    /* Select Color mode */
    writeCommand(TFT_CMD_COLMOD);
 8003112:	203a      	movs	r0, #58	; 0x3a
 8003114:	f000 f85e 	bl	80031d4 <writeCommand>
    writeData(TFT_COLOR_STANDARD);
 8003118:	2005      	movs	r0, #5
 800311a:	f000 f870 	bl	80031fe <writeData>
    
    /* Display On TFT */
    writeCommand(TFT_CMD_DISPON);
 800311e:	2029      	movs	r0, #41	; 0x29
 8003120:	f000 f858 	bl	80031d4 <writeCommand>
    
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}

08003128 <TFT_fillColor>:
        writeData((uint8)(image[counter]&0xFF));    //write low byte
    }
}

void TFT_fillColor(TFTColor_t color)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
    setDisplayRegion(0, 0, TFT_MAX_WIDTH-1, TFT_MAX_HEIGHT-1);
 8003132:	239f      	movs	r3, #159	; 0x9f
 8003134:	227f      	movs	r2, #127	; 0x7f
 8003136:	2100      	movs	r1, #0
 8003138:	2000      	movs	r0, #0
 800313a:	f000 f88a 	bl	8003252 <setDisplayRegion>
    
    for(uint32 counter=0; counter <TFT_TOTAL_PIXELS;counter++)
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e006      	b.n	8003152 <TFT_fillColor+0x2a>
        setColor(color);
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f86e 	bl	8003228 <setColor>
    for(uint32 counter=0; counter <TFT_TOTAL_PIXELS;counter++)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003158:	d3f4      	bcc.n	8003144 <TFT_fillColor+0x1c>
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <TFT_drawRectangle>:

void TFT_drawRectangle(uint16 x, uint16 y, uint16 width, uint16 hight, TFTColor_t color)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	4604      	mov	r4, r0
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4623      	mov	r3, r4
 8003174:	80fb      	strh	r3, [r7, #6]
 8003176:	4603      	mov	r3, r0
 8003178:	80bb      	strh	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	807b      	strh	r3, [r7, #2]
 800317e:	4613      	mov	r3, r2
 8003180:	803b      	strh	r3, [r7, #0]
    uint32 numPixels = (width * hight);
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	883a      	ldrh	r2, [r7, #0]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	60bb      	str	r3, [r7, #8]
    
    setDisplayRegion(x, y, x+width-1, y+hight-1);
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	4413      	add	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29c      	uxth	r4, r3
 8003198:	88ba      	ldrh	r2, [r7, #4]
 800319a:	883b      	ldrh	r3, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	88b9      	ldrh	r1, [r7, #4]
 80031a6:	88f8      	ldrh	r0, [r7, #6]
 80031a8:	4622      	mov	r2, r4
 80031aa:	f000 f852 	bl	8003252 <setDisplayRegion>
    
    for(uint32 counter=0; counter <numPixels;counter++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e006      	b.n	80031c2 <TFT_drawRectangle+0x5e>
        setColor(color);
 80031b4:	8c3b      	ldrh	r3, [r7, #32]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f836 	bl	8003228 <setColor>
    for(uint32 counter=0; counter <numPixels;counter++)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3f4      	bcc.n	80031b4 <TFT_drawRectangle+0x50>
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <writeCommand>:
    setColor(color);
}


static void writeCommand(uint8 command)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
    uint8 dummyData;
    
    DIO_setPinValue( TFT_A0_PORT, TFT_A0_PIN, LOW);
 80031de:	2200      	movs	r2, #0
 80031e0:	2102      	movs	r1, #2
 80031e2:	2000      	movs	r0, #0
 80031e4:	f000 fc1c 	bl	8003a20 <DIO_setPinValue>
    
    #if SPI_USED == SPI_1
    SPI1_sendReceiveByteSync( command, &dummyData);
 80031e8:	f107 020f 	add.w	r2, r7, #15
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f879 	bl	80042e8 <SPI1_sendReceiveByteSync>
    #elif SPI_USED == SPI_2
    // implement code using SPI2 peripheral
    #endif
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <writeData>:

static void writeData(uint8 data)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
    uint8 dummyData;
    
    DIO_setPinValue( TFT_A0_PORT, TFT_A0_PIN, HIGH);
 8003208:	2201      	movs	r2, #1
 800320a:	2102      	movs	r1, #2
 800320c:	2000      	movs	r0, #0
 800320e:	f000 fc07 	bl	8003a20 <DIO_setPinValue>
    
    #if SPI_USED == SPI_1
    SPI1_sendReceiveByteSync( data, &dummyData);
 8003212:	f107 020f 	add.w	r2, r7, #15
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f864 	bl	80042e8 <SPI1_sendReceiveByteSync>
    #elif SPI_USED == SPI_2
    // implement code using SPI2 peripheral
    #endif
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <setColor>:

void setColor(TFTColor_t color)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
    writeData((uint8)(color>>8));               //write high byte
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	b29b      	uxth	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ffdf 	bl	80031fe <writeData>
    writeData((uint8)(color&0xFF));             //write low byte
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ffda 	bl	80031fe <writeData>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <setDisplayRegion>:

void setDisplayRegion(uint16 x_start, uint16 y_start, uint16 x_end, uint16 y_end)
{
 8003252:	b590      	push	{r4, r7, lr}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	4604      	mov	r4, r0
 800325a:	4608      	mov	r0, r1
 800325c:	4611      	mov	r1, r2
 800325e:	461a      	mov	r2, r3
 8003260:	4623      	mov	r3, r4
 8003262:	80fb      	strh	r3, [r7, #6]
 8003264:	4603      	mov	r3, r0
 8003266:	80bb      	strh	r3, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	803b      	strh	r3, [r7, #0]
    /* Set X Address */
    writeCommand(TFT_CMD_SETXADD);
 8003270:	202a      	movs	r0, #42	; 0x2a
 8003272:	f7ff ffaf 	bl	80031d4 <writeCommand>
    writeData((uint8)(x_start >> 8));            // Start Address high byte
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	b29b      	uxth	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ffbd 	bl	80031fe <writeData>
    writeData((uint8)(x_start & 0xFF));          // Start Address low byte
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ffb8 	bl	80031fe <writeData>
    writeData((uint8)(x_end >> 8));              // End Address high byte
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	b29b      	uxth	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffb1 	bl	80031fe <writeData>
    writeData((uint8)(x_end & 0xFF));            // End Address low byte
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ffac 	bl	80031fe <writeData>


    /* Set Y Address */
    writeCommand(TFT_CMD_SETYADD);
 80032a6:	202b      	movs	r0, #43	; 0x2b
 80032a8:	f7ff ff94 	bl	80031d4 <writeCommand>
    writeData((uint8)(y_start >> 8));            // Start Address high byte
 80032ac:	88bb      	ldrh	r3, [r7, #4]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ffa2 	bl	80031fe <writeData>
    writeData((uint8)(y_start & 0xFF));          // Start Address low byte
 80032ba:	88bb      	ldrh	r3, [r7, #4]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff9d 	bl	80031fe <writeData>
    writeData((uint8)(y_end >> 8));              // End Address high byte
 80032c4:	883b      	ldrh	r3, [r7, #0]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff96 	bl	80031fe <writeData>
    writeData((uint8)(y_end & 0xFF));            // End Address low byte
 80032d2:	883b      	ldrh	r3, [r7, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff91 	bl	80031fe <writeData>

    writeCommand(TFT_CMD_WRRAM);
 80032dc:	202c      	movs	r0, #44	; 0x2c
 80032de:	f7ff ff79 	bl	80031d4 <writeCommand>
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
	...

080032ec <TFT_printChar>:


void TFT_printChar(uint16 x, uint16 y, uint8 Char , uint8 size, TFTColor_t charColor ,TFTColor_t backgroundColor)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	80fb      	strh	r3, [r7, #6]
 80032fe:	4603      	mov	r3, r0
 8003300:	80bb      	strh	r3, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
 8003306:	4613      	mov	r3, r2
 8003308:	70bb      	strb	r3, [r7, #2]

    uint8 charIndex =Char-32;   // As font array start with char equals 32 in ascll table
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	3b20      	subs	r3, #32
 800330e:	72bb      	strb	r3, [r7, #10]

    setDisplayRegion(x , y , x+ (size*TFT_CHAR_WIDTH)-1, y+ (size*TFT_CHAR_HIGHT)-1 );
 8003310:	78bb      	ldrb	r3, [r7, #2]
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4413      	add	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29c      	uxth	r4, r3
 8003328:	78bb      	ldrb	r3, [r7, #2]
 800332a:	b29b      	uxth	r3, r3
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	b29a      	uxth	r2, r3
 8003330:	88bb      	ldrh	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	88b9      	ldrh	r1, [r7, #4]
 800333c:	88f8      	ldrh	r0, [r7, #6]
 800333e:	4622      	mov	r2, r4
 8003340:	f7ff ff87 	bl	8003252 <setDisplayRegion>

    for(int8 row=0; row < TFT_CHAR_HIGHT; row++)
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e04d      	b.n	80033e6 <TFT_printChar+0xfa>
        for(uint8 sizeLineCounter =0; sizeLineCounter < size; sizeLineCounter++)
 800334a:	2300      	movs	r3, #0
 800334c:	73bb      	strb	r3, [r7, #14]
 800334e:	e040      	b.n	80033d2 <TFT_printChar+0xe6>
            for(int8 column =0; column < TFT_CHAR_WIDTH; column++)
 8003350:	2300      	movs	r3, #0
 8003352:	737b      	strb	r3, [r7, #13]
 8003354:	e036      	b.n	80033c4 <TFT_printChar+0xd8>
                {
                    if(TFT_font[charIndex][column] & (1<<row))
 8003356:	7aba      	ldrb	r2, [r7, #10]
 8003358:	f997 100d 	ldrsb.w	r1, [r7, #13]
 800335c:	4826      	ldr	r0, [pc, #152]	; (80033f8 <TFT_printChar+0x10c>)
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4403      	add	r3, r0
 8003368:	440b      	add	r3, r1
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003372:	fa42 f303 	asr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00e      	beq.n	800339c <TFT_printChar+0xb0>
                        for(uint8 sizeColumnCounter =0; sizeColumnCounter < size; sizeColumnCounter++)
 800337e:	2300      	movs	r3, #0
 8003380:	733b      	strb	r3, [r7, #12]
 8003382:	e006      	b.n	8003392 <TFT_printChar+0xa6>
                            setColor(charColor);
 8003384:	8c3b      	ldrh	r3, [r7, #32]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff4e 	bl	8003228 <setColor>
                        for(uint8 sizeColumnCounter =0; sizeColumnCounter < size; sizeColumnCounter++)
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	733b      	strb	r3, [r7, #12]
 8003392:	7b3a      	ldrb	r2, [r7, #12]
 8003394:	78bb      	ldrb	r3, [r7, #2]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3f4      	bcc.n	8003384 <TFT_printChar+0x98>
 800339a:	e00d      	b.n	80033b8 <TFT_printChar+0xcc>
                    else
                        for(uint8 sizeColumnCounter=0 ;sizeColumnCounter < size; sizeColumnCounter++)
 800339c:	2300      	movs	r3, #0
 800339e:	72fb      	strb	r3, [r7, #11]
 80033a0:	e006      	b.n	80033b0 <TFT_printChar+0xc4>
                            setColor(backgroundColor);
 80033a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff3f 	bl	8003228 <setColor>
                        for(uint8 sizeColumnCounter=0 ;sizeColumnCounter < size; sizeColumnCounter++)
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	3301      	adds	r3, #1
 80033ae:	72fb      	strb	r3, [r7, #11]
 80033b0:	7afa      	ldrb	r2, [r7, #11]
 80033b2:	78bb      	ldrb	r3, [r7, #2]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3f4      	bcc.n	80033a2 <TFT_printChar+0xb6>
            for(int8 column =0; column < TFT_CHAR_WIDTH; column++)
 80033b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	737b      	strb	r3, [r7, #13]
 80033c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	ddc4      	ble.n	8003356 <TFT_printChar+0x6a>
        for(uint8 sizeLineCounter =0; sizeLineCounter < size; sizeLineCounter++)
 80033cc:	7bbb      	ldrb	r3, [r7, #14]
 80033ce:	3301      	adds	r3, #1
 80033d0:	73bb      	strb	r3, [r7, #14]
 80033d2:	7bba      	ldrb	r2, [r7, #14]
 80033d4:	78bb      	ldrb	r3, [r7, #2]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3ba      	bcc.n	8003350 <TFT_printChar+0x64>
    for(int8 row=0; row < TFT_CHAR_HIGHT; row++)
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	ddad      	ble.n	800334a <TFT_printChar+0x5e>
                }

}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	08004704 	.word	0x08004704

080033fc <TFT_printString>:

void TFT_printString(uint16 x, uint16 y, uint8* string, uint8 size, TFTColor_t charColor,TFTColor_t backgroundColor, uint8 stringDisplayWidth)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af02      	add	r7, sp, #8
 8003402:	60ba      	str	r2, [r7, #8]
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	460b      	mov	r3, r1
 800340c:	81bb      	strh	r3, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
    uint16 charIndex =0;
 8003412:	2300      	movs	r3, #0
 8003414:	82fb      	strh	r3, [r7, #22]
    while(charIndex < strlen(string))
 8003416:	e01a      	b.n	800344e <TFT_printString+0x52>
    {
        TFT_printChar( x, y, string[charIndex], size, charColor, backgroundColor);
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4413      	add	r3, r2
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	79fc      	ldrb	r4, [r7, #7]
 8003422:	89b9      	ldrh	r1, [r7, #12]
 8003424:	89f8      	ldrh	r0, [r7, #14]
 8003426:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4623      	mov	r3, r4
 8003430:	f7ff ff5c 	bl	80032ec <TFT_printChar>
        x += (size*TFT_CHAR_WIDTH);
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	0052      	lsls	r2, r2, #1
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	4413      	add	r3, r2
 8003446:	81fb      	strh	r3, [r7, #14]
        charIndex++;
 8003448:	8afb      	ldrh	r3, [r7, #22]
 800344a:	3301      	adds	r3, #1
 800344c:	82fb      	strh	r3, [r7, #22]
    while(charIndex < strlen(string))
 800344e:	8afc      	ldrh	r4, [r7, #22]
 8003450:	68b8      	ldr	r0, [r7, #8]
 8003452:	f7fc fe8d 	bl	8000170 <strlen>
 8003456:	4603      	mov	r3, r0
 8003458:	429c      	cmp	r4, r3
 800345a:	d3dd      	bcc.n	8003418 <TFT_printString+0x1c>
    }

    while(charIndex < stringDisplayWidth)                               // To erase old chars
 800345c:	e017      	b.n	800348e <TFT_printString+0x92>
    {
        TFT_printChar( x, y, ' ' , size, charColor , backgroundColor);
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	89b9      	ldrh	r1, [r7, #12]
 8003462:	89f8      	ldrh	r0, [r7, #14]
 8003464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	2220      	movs	r2, #32
 8003470:	f7ff ff3c 	bl	80032ec <TFT_printChar>
        x += (size*TFT_CHAR_WIDTH);
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	0052      	lsls	r2, r2, #1
 800347c:	4413      	add	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	4413      	add	r3, r2
 8003486:	81fb      	strh	r3, [r7, #14]
        charIndex++;
 8003488:	8afb      	ldrh	r3, [r7, #22]
 800348a:	3301      	adds	r3, #1
 800348c:	82fb      	strh	r3, [r7, #22]
    while(charIndex < stringDisplayWidth)                               // To erase old chars
 800348e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003492:	b29b      	uxth	r3, r3
 8003494:	8afa      	ldrh	r2, [r7, #22]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3e1      	bcc.n	800345e <TFT_printString+0x62>
    }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}

080034a4 <TFT_printNumbers>:

void TFT_printNumbers(uint16 x, uint16 y, uint32 number, uint8 size, TFTColor_t numbersColor, TFTColor_t backgroundColor, uint8 numberDisplayWidth)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b08d      	sub	sp, #52	; 0x34
 80034a8:	af04      	add	r7, sp, #16
 80034aa:	60ba      	str	r2, [r7, #8]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	81fb      	strh	r3, [r7, #14]
 80034b2:	460b      	mov	r3, r1
 80034b4:	81bb      	strh	r3, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
    uint8 string[11];
    convertNumToString(number, string);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	68b8      	ldr	r0, [r7, #8]
 80034c2:	f000 f8d7 	bl	8003674 <convertNumToString>
    TFT_printString( x, y, string, size, numbersColor, backgroundColor, numberDisplayWidth);
 80034c6:	79fc      	ldrb	r4, [r7, #7]
 80034c8:	f107 0214 	add.w	r2, r7, #20
 80034cc:	89b9      	ldrh	r1, [r7, #12]
 80034ce:	89f8      	ldrh	r0, [r7, #14]
 80034d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4623      	mov	r3, r4
 80034e0:	f7ff ff8c 	bl	80033fc <TFT_printString>
}
 80034e4:	bf00      	nop
 80034e6:	3724      	adds	r7, #36	; 0x24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <TFT_drawHorizontalLine>:

void TFT_drawHorizontalLine(uint16 x, uint16 y, uint8 length, TFTColor_t Color, uint8 thickness)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	80fb      	strh	r3, [r7, #6]
 80034fe:	4603      	mov	r3, r0
 8003500:	80bb      	strh	r3, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
 8003506:	4613      	mov	r3, r2
 8003508:	803b      	strh	r3, [r7, #0]
    for(uint8 counter=0; counter< thickness; counter++)
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e024      	b.n	800355a <TFT_drawHorizontalLine+0x6e>
    {
        setDisplayRegion( x, y+counter, x+length, y+counter);
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	b29a      	uxth	r2, r3
 8003514:	88bb      	ldrh	r3, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	b299      	uxth	r1, r3
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	b29a      	uxth	r2, r3
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4413      	add	r3, r2
 8003522:	b29c      	uxth	r4, r3
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	b29a      	uxth	r2, r3
 8003528:	88bb      	ldrh	r3, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	88f8      	ldrh	r0, [r7, #6]
 8003530:	4622      	mov	r2, r4
 8003532:	f7ff fe8e 	bl	8003252 <setDisplayRegion>
        for(uint16 pixels=0; pixels < length; pixels++)
 8003536:	2300      	movs	r3, #0
 8003538:	81bb      	strh	r3, [r7, #12]
 800353a:	e006      	b.n	800354a <TFT_drawHorizontalLine+0x5e>
            setColor(Color);
 800353c:	883b      	ldrh	r3, [r7, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fe72 	bl	8003228 <setColor>
        for(uint16 pixels=0; pixels < length; pixels++)
 8003544:	89bb      	ldrh	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	81bb      	strh	r3, [r7, #12]
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	b29b      	uxth	r3, r3
 800354e:	89ba      	ldrh	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d3f3      	bcc.n	800353c <TFT_drawHorizontalLine+0x50>
    for(uint8 counter=0; counter< thickness; counter++)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	3301      	adds	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3d5      	bcc.n	8003510 <TFT_drawHorizontalLine+0x24>
    }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}

0800356e <TFT_drawVerticalLine>:

void TFT_drawVerticalLine(uint16 x, uint16 y, uint8 length, TFTColor_t Color, uint8 thickness)
{
 800356e:	b590      	push	{r4, r7, lr}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	4604      	mov	r4, r0
 8003576:	4608      	mov	r0, r1
 8003578:	4611      	mov	r1, r2
 800357a:	461a      	mov	r2, r3
 800357c:	4623      	mov	r3, r4
 800357e:	80fb      	strh	r3, [r7, #6]
 8003580:	4603      	mov	r3, r0
 8003582:	80bb      	strh	r3, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
 8003588:	4613      	mov	r3, r2
 800358a:	803b      	strh	r3, [r7, #0]
    for(uint8 counter=0; counter< thickness; counter++)
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e024      	b.n	80035dc <TFT_drawVerticalLine+0x6e>
    {
        setDisplayRegion( x+counter, y, x+counter, y+length);
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	b29a      	uxth	r2, r3
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4413      	add	r3, r2
 800359a:	b298      	uxth	r0, r3
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4413      	add	r3, r2
 80035a4:	b29c      	uxth	r4, r3
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	88bb      	ldrh	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	88b9      	ldrh	r1, [r7, #4]
 80035b2:	4622      	mov	r2, r4
 80035b4:	f7ff fe4d 	bl	8003252 <setDisplayRegion>
        for(uint16 pixels=0; pixels < length; pixels++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	81bb      	strh	r3, [r7, #12]
 80035bc:	e006      	b.n	80035cc <TFT_drawVerticalLine+0x5e>
            setColor(Color);
 80035be:	883b      	ldrh	r3, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe31 	bl	8003228 <setColor>
        for(uint16 pixels=0; pixels < length; pixels++)
 80035c6:	89bb      	ldrh	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	81bb      	strh	r3, [r7, #12]
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	89ba      	ldrh	r2, [r7, #12]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3f3      	bcc.n	80035be <TFT_drawVerticalLine+0x50>
    for(uint8 counter=0; counter< thickness; counter++)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	3301      	adds	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3d5      	bcc.n	8003592 <TFT_drawVerticalLine+0x24>
    }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <TFT_drawOutlineRectangle>:

void TFT_drawOutlineRectangle(uint16 x, uint16 y, uint16 width, uint16 hight, TFTColor_t color, uint8 thickness)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	80fb      	strh	r3, [r7, #6]
 8003602:	4603      	mov	r3, r0
 8003604:	80bb      	strh	r3, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	807b      	strh	r3, [r7, #2]
 800360a:	4613      	mov	r3, r2
 800360c:	803b      	strh	r3, [r7, #0]
    TFT_drawVerticalLine  ( x       , y      , hight, color, thickness);
 800360e:	883b      	ldrh	r3, [r7, #0]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8b3c      	ldrh	r4, [r7, #24]
 8003614:	88b9      	ldrh	r1, [r7, #4]
 8003616:	88f8      	ldrh	r0, [r7, #6]
 8003618:	7f3b      	ldrb	r3, [r7, #28]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4623      	mov	r3, r4
 800361e:	f7ff ffa6 	bl	800356e <TFT_drawVerticalLine>
    TFT_drawHorizontalLine( x       , y+hight, width, color, thickness);
 8003622:	88ba      	ldrh	r2, [r7, #4]
 8003624:	883b      	ldrh	r3, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	b299      	uxth	r1, r3
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	8b3c      	ldrh	r4, [r7, #24]
 8003630:	88f8      	ldrh	r0, [r7, #6]
 8003632:	7f3b      	ldrb	r3, [r7, #28]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4623      	mov	r3, r4
 8003638:	f7ff ff58 	bl	80034ec <TFT_drawHorizontalLine>
    TFT_drawVerticalLine  ( x+ width, y      , hight, color, thickness);
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	4413      	add	r3, r2
 8003642:	b298      	uxth	r0, r3
 8003644:	883b      	ldrh	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8b3c      	ldrh	r4, [r7, #24]
 800364a:	88b9      	ldrh	r1, [r7, #4]
 800364c:	7f3b      	ldrb	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4623      	mov	r3, r4
 8003652:	f7ff ff8c 	bl	800356e <TFT_drawVerticalLine>
    TFT_drawHorizontalLine( x       , y      , width, color, thickness);
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8b3c      	ldrh	r4, [r7, #24]
 800365c:	88b9      	ldrh	r1, [r7, #4]
 800365e:	88f8      	ldrh	r0, [r7, #6]
 8003660:	7f3b      	ldrb	r3, [r7, #28]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4623      	mov	r3, r4
 8003666:	f7ff ff41 	bl	80034ec <TFT_drawHorizontalLine>
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
	...

08003674 <convertNumToString>:

void convertNumToString(uint32 num, uint8* string)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    uint8 index=0;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
    while(num)
 8003682:	e019      	b.n	80036b8 <convertNumToString+0x44>
    {
        string[index] = (num%10) + '0';
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <convertNumToString+0x78>)
 8003688:	fba3 2301 	umull	r2, r3, r3, r1
 800368c:	08da      	lsrs	r2, r3, #3
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	1aca      	subs	r2, r1, r3
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	440b      	add	r3, r1
 80036a0:	3230      	adds	r2, #48	; 0x30
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
        num /=10;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <convertNumToString+0x78>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	08db      	lsrs	r3, r3, #3
 80036b0:	607b      	str	r3, [r7, #4]
        index++;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	3301      	adds	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
    while(num)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e2      	bne.n	8003684 <convertNumToString+0x10>
    }
    string[index] ='\0';
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    reverseString(string);
 80036c8:	6838      	ldr	r0, [r7, #0]
 80036ca:	f000 f811 	bl	80036f0 <reverseString>
    if(*string == NULL)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <convertNumToString+0x70>
    {
        string[0] ='0';
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2230      	movs	r2, #48	; 0x30
 80036da:	701a      	strb	r2, [r3, #0]
        string[1] ='\0';
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
    }
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	cccccccd 	.word	0xcccccccd

080036f0 <reverseString>:

void reverseString(uint8 * string)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
    if(*string != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d025      	beq.n	800374c <reverseString+0x5c>
    {
        uint8 start =0, end =strlen(string) -1;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fc fd33 	bl	8000170 <strlen>
 800370a:	4603      	mov	r3, r0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	73bb      	strb	r3, [r7, #14]
        while (start < end)
 8003712:	e017      	b.n	8003744 <reverseString+0x54>
        {
            uint8 temp =string[start];
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	737b      	strb	r3, [r7, #13]
            string[start] = string[end];
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	441a      	add	r2, r3
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	440b      	add	r3, r1
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	701a      	strb	r2, [r3, #0]
            string[end] = temp;
 800372e:	7bbb      	ldrb	r3, [r7, #14]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	7b7a      	ldrb	r2, [r7, #13]
 8003736:	701a      	strb	r2, [r3, #0]
            start++;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	3301      	adds	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
            end--;
 800373e:	7bbb      	ldrb	r3, [r7, #14]
 8003740:	3b01      	subs	r3, #1
 8003742:	73bb      	strb	r3, [r7, #14]
        while (start < end)
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	7bbb      	ldrb	r3, [r7, #14]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3e3      	bcc.n	8003714 <reverseString+0x24>
        }
    }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <DIO_setPinDirection>:



/* Configures the direction (input or output) of a specific pin on a specific port.*/
void DIO_setPinDirection(uint8 Port, uint8 Pin, uint8 Mode)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
 800375e:	460b      	mov	r3, r1
 8003760:	71bb      	strb	r3, [r7, #6]
 8003762:	4613      	mov	r3, r2
 8003764:	717b      	strb	r3, [r7, #5]
    // Select the GPIO port based on the input parameter
    switch (Port)
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	2b02      	cmp	r3, #2
 800376a:	f000 80d4 	beq.w	8003916 <DIO_setPinDirection+0x1c2>
 800376e:	2b02      	cmp	r3, #2
 8003770:	f300 813a 	bgt.w	80039e8 <DIO_setPinDirection+0x294>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <DIO_setPinDirection+0x2a>
 8003778:	2b01      	cmp	r3, #1
 800377a:	d066      	beq.n	800384a <DIO_setPinDirection+0xf6>
            }
            break;

        default:
            // do nothing for invalid GPIO port
            break;
 800377c:	e134      	b.n	80039e8 <DIO_setPinDirection+0x294>
            if(Mode == INPUT_PULLDOWN)
 800377e:	797b      	ldrb	r3, [r7, #5]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d10d      	bne.n	80037a0 <DIO_setPinDirection+0x4c>
                CLR_BIT(GPIOA_ODR,Pin);
 8003784:	4b9e      	ldr	r3, [pc, #632]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	79ba      	ldrb	r2, [r7, #6]
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f202 	lsl.w	r2, r1, r2
 8003790:	43d2      	mvns	r2, r2
 8003792:	4611      	mov	r1, r2
 8003794:	4a9a      	ldr	r2, [pc, #616]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 8003796:	400b      	ands	r3, r1
 8003798:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 800379a:	2308      	movs	r3, #8
 800379c:	717b      	strb	r3, [r7, #5]
 800379e:	e01a      	b.n	80037d6 <DIO_setPinDirection+0x82>
            else if(Mode == INPUT_PULLUP)
 80037a0:	797b      	ldrb	r3, [r7, #5]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d10c      	bne.n	80037c0 <DIO_setPinDirection+0x6c>
                SET_BIT(GPIOA_ODR,Pin);
 80037a6:	4b96      	ldr	r3, [pc, #600]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	79ba      	ldrb	r2, [r7, #6]
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f202 	lsl.w	r2, r1, r2
 80037b2:	4611      	mov	r1, r2
 80037b4:	4a92      	ldr	r2, [pc, #584]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 80037ba:	2308      	movs	r3, #8
 80037bc:	717b      	strb	r3, [r7, #5]
 80037be:	e00a      	b.n	80037d6 <DIO_setPinDirection+0x82>
                CLR_BIT(GPIOA_ODR,Pin); // To reset ODR value in case
 80037c0:	4b8f      	ldr	r3, [pc, #572]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	79ba      	ldrb	r2, [r7, #6]
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	43d2      	mvns	r2, r2
 80037ce:	4611      	mov	r1, r2
 80037d0:	4a8b      	ldr	r2, [pc, #556]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6013      	str	r3, [r2, #0]
            if (Pin <= 7)
 80037d6:	79bb      	ldrb	r3, [r7, #6]
 80037d8:	2b07      	cmp	r3, #7
 80037da:	d817      	bhi.n	800380c <DIO_setPinDirection+0xb8>
                GPIOA_CRL &= ~(0b1111 << (Pin * 4));
 80037dc:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <DIO_setPinDirection+0x2b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	79ba      	ldrb	r2, [r7, #6]
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	210f      	movs	r1, #15
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	43d2      	mvns	r2, r2
 80037ec:	4611      	mov	r1, r2
 80037ee:	4a85      	ldr	r2, [pc, #532]	; (8003a04 <DIO_setPinDirection+0x2b0>)
 80037f0:	400b      	ands	r3, r1
 80037f2:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= (Mode << (Pin * 4));
 80037f4:	4b83      	ldr	r3, [pc, #524]	; (8003a04 <DIO_setPinDirection+0x2b0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	7979      	ldrb	r1, [r7, #5]
 80037fa:	79ba      	ldrb	r2, [r7, #6]
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	4611      	mov	r1, r2
 8003804:	4a7f      	ldr	r2, [pc, #508]	; (8003a04 <DIO_setPinDirection+0x2b0>)
 8003806:	430b      	orrs	r3, r1
 8003808:	6013      	str	r3, [r2, #0]
            break;
 800380a:	e0ef      	b.n	80039ec <DIO_setPinDirection+0x298>
            else if (Pin <= 15)
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f200 80ec 	bhi.w	80039ec <DIO_setPinDirection+0x298>
                Pin -= 8;
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	3b08      	subs	r3, #8
 8003818:	71bb      	strb	r3, [r7, #6]
                GPIOA_CRH &= ~(0b1111 << (Pin * 4));
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <DIO_setPinDirection+0x2b4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	79ba      	ldrb	r2, [r7, #6]
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	210f      	movs	r1, #15
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	43d2      	mvns	r2, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4a76      	ldr	r2, [pc, #472]	; (8003a08 <DIO_setPinDirection+0x2b4>)
 800382e:	400b      	ands	r3, r1
 8003830:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= (Mode << (Pin * 4));
 8003832:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <DIO_setPinDirection+0x2b4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	7979      	ldrb	r1, [r7, #5]
 8003838:	79ba      	ldrb	r2, [r7, #6]
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4611      	mov	r1, r2
 8003842:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <DIO_setPinDirection+0x2b4>)
 8003844:	430b      	orrs	r3, r1
 8003846:	6013      	str	r3, [r2, #0]
            break;
 8003848:	e0d0      	b.n	80039ec <DIO_setPinDirection+0x298>
            if(Mode == INPUT_PULLDOWN)
 800384a:	797b      	ldrb	r3, [r7, #5]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d10d      	bne.n	800386c <DIO_setPinDirection+0x118>
                CLR_BIT(GPIOB_ODR,Pin);
 8003850:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <DIO_setPinDirection+0x2b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	79ba      	ldrb	r2, [r7, #6]
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f202 	lsl.w	r2, r1, r2
 800385c:	43d2      	mvns	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4a6a      	ldr	r2, [pc, #424]	; (8003a0c <DIO_setPinDirection+0x2b8>)
 8003862:	400b      	ands	r3, r1
 8003864:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 8003866:	2308      	movs	r3, #8
 8003868:	717b      	strb	r3, [r7, #5]
 800386a:	e01a      	b.n	80038a2 <DIO_setPinDirection+0x14e>
            else if(Mode == INPUT_PULLUP)
 800386c:	797b      	ldrb	r3, [r7, #5]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d10c      	bne.n	800388c <DIO_setPinDirection+0x138>
                SET_BIT(GPIOB_ODR,Pin);
 8003872:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <DIO_setPinDirection+0x2b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	79ba      	ldrb	r2, [r7, #6]
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4611      	mov	r1, r2
 8003880:	4a62      	ldr	r2, [pc, #392]	; (8003a0c <DIO_setPinDirection+0x2b8>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 8003886:	2308      	movs	r3, #8
 8003888:	717b      	strb	r3, [r7, #5]
 800388a:	e00a      	b.n	80038a2 <DIO_setPinDirection+0x14e>
                CLR_BIT(GPIOA_ODR,Pin); // To reset ODR value in case of reconfiguration
 800388c:	4b5c      	ldr	r3, [pc, #368]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	79ba      	ldrb	r2, [r7, #6]
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	43d2      	mvns	r2, r2
 800389a:	4611      	mov	r1, r2
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 800389e:	400b      	ands	r3, r1
 80038a0:	6013      	str	r3, [r2, #0]
            if (Pin <= 7)
 80038a2:	79bb      	ldrb	r3, [r7, #6]
 80038a4:	2b07      	cmp	r3, #7
 80038a6:	d817      	bhi.n	80038d8 <DIO_setPinDirection+0x184>
                GPIOB_CRL &= ~(0b1111 << (Pin * 4));
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <DIO_setPinDirection+0x2bc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	79ba      	ldrb	r2, [r7, #6]
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	210f      	movs	r1, #15
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	43d2      	mvns	r2, r2
 80038b8:	4611      	mov	r1, r2
 80038ba:	4a55      	ldr	r2, [pc, #340]	; (8003a10 <DIO_setPinDirection+0x2bc>)
 80038bc:	400b      	ands	r3, r1
 80038be:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= (Mode << (Pin * 4));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <DIO_setPinDirection+0x2bc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	7979      	ldrb	r1, [r7, #5]
 80038c6:	79ba      	ldrb	r2, [r7, #6]
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <DIO_setPinDirection+0x2bc>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6013      	str	r3, [r2, #0]
            break;
 80038d6:	e08b      	b.n	80039f0 <DIO_setPinDirection+0x29c>
            else if (Pin <= 15)
 80038d8:	79bb      	ldrb	r3, [r7, #6]
 80038da:	2b0f      	cmp	r3, #15
 80038dc:	f200 8088 	bhi.w	80039f0 <DIO_setPinDirection+0x29c>
                Pin -= 8;
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	3b08      	subs	r3, #8
 80038e4:	71bb      	strb	r3, [r7, #6]
                GPIOB_CRH &= ~(0b1111 << (Pin * 4));
 80038e6:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <DIO_setPinDirection+0x2c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	79ba      	ldrb	r2, [r7, #6]
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	210f      	movs	r1, #15
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	43d2      	mvns	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <DIO_setPinDirection+0x2c0>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= (Mode << (Pin * 4));
 80038fe:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <DIO_setPinDirection+0x2c0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	7979      	ldrb	r1, [r7, #5]
 8003904:	79ba      	ldrb	r2, [r7, #6]
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4611      	mov	r1, r2
 800390e:	4a41      	ldr	r2, [pc, #260]	; (8003a14 <DIO_setPinDirection+0x2c0>)
 8003910:	430b      	orrs	r3, r1
 8003912:	6013      	str	r3, [r2, #0]
            break;
 8003914:	e06c      	b.n	80039f0 <DIO_setPinDirection+0x29c>
            if(Mode == INPUT_PULLDOWN)
 8003916:	797b      	ldrb	r3, [r7, #5]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d10d      	bne.n	8003938 <DIO_setPinDirection+0x1e4>
                CLR_BIT(GPIOC_ODR,Pin);
 800391c:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <DIO_setPinDirection+0x2c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	79ba      	ldrb	r2, [r7, #6]
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	43d2      	mvns	r2, r2
 800392a:	4611      	mov	r1, r2
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <DIO_setPinDirection+0x2c4>)
 800392e:	400b      	ands	r3, r1
 8003930:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 8003932:	2308      	movs	r3, #8
 8003934:	717b      	strb	r3, [r7, #5]
 8003936:	e01a      	b.n	800396e <DIO_setPinDirection+0x21a>
            else if(Mode == INPUT_PULLUP)
 8003938:	797b      	ldrb	r3, [r7, #5]
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d10c      	bne.n	8003958 <DIO_setPinDirection+0x204>
                SET_BIT(GPIOC_ODR,Pin);
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <DIO_setPinDirection+0x2c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	79ba      	ldrb	r2, [r7, #6]
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	4611      	mov	r1, r2
 800394c:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <DIO_setPinDirection+0x2c4>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6013      	str	r3, [r2, #0]
                Mode = 0b1000;
 8003952:	2308      	movs	r3, #8
 8003954:	717b      	strb	r3, [r7, #5]
 8003956:	e00a      	b.n	800396e <DIO_setPinDirection+0x21a>
                CLR_BIT(GPIOA_ODR,Pin); // To reset ODR value in case of reconfiguration
 8003958:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	79ba      	ldrb	r2, [r7, #6]
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	43d2      	mvns	r2, r2
 8003966:	4611      	mov	r1, r2
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <DIO_setPinDirection+0x2ac>)
 800396a:	400b      	ands	r3, r1
 800396c:	6013      	str	r3, [r2, #0]
            if (Pin <= 7)
 800396e:	79bb      	ldrb	r3, [r7, #6]
 8003970:	2b07      	cmp	r3, #7
 8003972:	d81b      	bhi.n	80039ac <DIO_setPinDirection+0x258>
                GPIOC_CRL &= ~(0b1111 << (Pin * 4));
 8003974:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	79ba      	ldrb	r2, [r7, #6]
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	210f      	movs	r1, #15
 8003980:	fa01 f202 	lsl.w	r2, r1, r2
 8003984:	43d2      	mvns	r2, r2
 8003986:	4611      	mov	r1, r2
 8003988:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800398c:	400b      	ands	r3, r1
 800398e:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= (Mode << (Pin * 4));
 8003990:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	7979      	ldrb	r1, [r7, #5]
 8003998:	79ba      	ldrb	r2, [r7, #6]
 800399a:	0092      	lsls	r2, r2, #2
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80039a6:	430b      	orrs	r3, r1
 80039a8:	6013      	str	r3, [r2, #0]
            break;
 80039aa:	e023      	b.n	80039f4 <DIO_setPinDirection+0x2a0>
            else if (Pin <= 15)
 80039ac:	79bb      	ldrb	r3, [r7, #6]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	d820      	bhi.n	80039f4 <DIO_setPinDirection+0x2a0>
                Pin -= 8;
 80039b2:	79bb      	ldrb	r3, [r7, #6]
 80039b4:	3b08      	subs	r3, #8
 80039b6:	71bb      	strb	r3, [r7, #6]
                GPIOC_CRH &= ~(0b1111 << (Pin * 4));
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <DIO_setPinDirection+0x2c8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	79ba      	ldrb	r2, [r7, #6]
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	210f      	movs	r1, #15
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	43d2      	mvns	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <DIO_setPinDirection+0x2c8>)
 80039cc:	400b      	ands	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= (Mode << (Pin * 4));
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <DIO_setPinDirection+0x2c8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	7979      	ldrb	r1, [r7, #5]
 80039d6:	79ba      	ldrb	r2, [r7, #6]
 80039d8:	0092      	lsls	r2, r2, #2
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	4611      	mov	r1, r2
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <DIO_setPinDirection+0x2c8>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6013      	str	r3, [r2, #0]
            break;
 80039e6:	e005      	b.n	80039f4 <DIO_setPinDirection+0x2a0>
            break;
 80039e8:	bf00      	nop
 80039ea:	e004      	b.n	80039f6 <DIO_setPinDirection+0x2a2>
            break;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <DIO_setPinDirection+0x2a2>
            break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <DIO_setPinDirection+0x2a2>
            break;
 80039f4:	bf00      	nop
    }
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	4001080c 	.word	0x4001080c
 8003a04:	40010800 	.word	0x40010800
 8003a08:	40010804 	.word	0x40010804
 8003a0c:	40010c0c 	.word	0x40010c0c
 8003a10:	40010c00 	.word	0x40010c00
 8003a14:	40010c04 	.word	0x40010c04
 8003a18:	0011000c 	.word	0x0011000c
 8003a1c:	00110004 	.word	0x00110004

08003a20 <DIO_setPinValue>:



/* Set the binary value of a specific pin in a specific GPIO port.*/
void DIO_setPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	71bb      	strb	r3, [r7, #6]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	717b      	strb	r3, [r7, #5]
    /* Select the appropriate GPIO port */
    switch(Port)
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d040      	beq.n	8003aba <DIO_setPinValue+0x9a>
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	dc60      	bgt.n	8003afe <DIO_setPinValue+0xde>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <DIO_setPinValue+0x26>
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d01d      	beq.n	8003a80 <DIO_setPinValue+0x60>
                SET_BIT(GPIOC_ODR, Pin);
            else if(Value == LOW)
                CLR_BIT(GPIOC_ODR, Pin);
            break;
    }
}
 8003a44:	e05b      	b.n	8003afe <DIO_setPinValue+0xde>
            if(Value == HIGH)
 8003a46:	797b      	ldrb	r3, [r7, #5]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10a      	bne.n	8003a62 <DIO_setPinValue+0x42>
                SET_BIT(GPIOA_ODR, Pin);
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <DIO_setPinValue+0xe8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	79ba      	ldrb	r2, [r7, #6]
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <DIO_setPinValue+0xe8>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6013      	str	r3, [r2, #0]
            break;
 8003a60:	e048      	b.n	8003af4 <DIO_setPinValue+0xd4>
            else if(Value == LOW)
 8003a62:	797b      	ldrb	r3, [r7, #5]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d145      	bne.n	8003af4 <DIO_setPinValue+0xd4>
                CLR_BIT(GPIOA_ODR, Pin);
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <DIO_setPinValue+0xe8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	79ba      	ldrb	r2, [r7, #6]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	43d2      	mvns	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <DIO_setPinValue+0xe8>)
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	6013      	str	r3, [r2, #0]
            break;
 8003a7e:	e039      	b.n	8003af4 <DIO_setPinValue+0xd4>
            if(Value == HIGH)
 8003a80:	797b      	ldrb	r3, [r7, #5]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d10a      	bne.n	8003a9c <DIO_setPinValue+0x7c>
                SET_BIT(GPIOB_ODR, Pin);
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <DIO_setPinValue+0xec>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	79ba      	ldrb	r2, [r7, #6]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	4611      	mov	r1, r2
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <DIO_setPinValue+0xec>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6013      	str	r3, [r2, #0]
            break;
 8003a9a:	e02d      	b.n	8003af8 <DIO_setPinValue+0xd8>
            else if(Value == LOW)
 8003a9c:	797b      	ldrb	r3, [r7, #5]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d12a      	bne.n	8003af8 <DIO_setPinValue+0xd8>
                CLR_BIT(GPIOB_ODR, Pin);
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <DIO_setPinValue+0xec>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	79ba      	ldrb	r2, [r7, #6]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	43d2      	mvns	r2, r2
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <DIO_setPinValue+0xec>)
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	6013      	str	r3, [r2, #0]
            break;
 8003ab8:	e01e      	b.n	8003af8 <DIO_setPinValue+0xd8>
            if(Value == HIGH)
 8003aba:	797b      	ldrb	r3, [r7, #5]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10a      	bne.n	8003ad6 <DIO_setPinValue+0xb6>
                SET_BIT(GPIOC_ODR, Pin);
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <DIO_setPinValue+0xf0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	79ba      	ldrb	r2, [r7, #6]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	4611      	mov	r1, r2
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <DIO_setPinValue+0xf0>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6013      	str	r3, [r2, #0]
            break;
 8003ad4:	e012      	b.n	8003afc <DIO_setPinValue+0xdc>
            else if(Value == LOW)
 8003ad6:	797b      	ldrb	r3, [r7, #5]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <DIO_setPinValue+0xdc>
                CLR_BIT(GPIOC_ODR, Pin);
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <DIO_setPinValue+0xf0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	79ba      	ldrb	r2, [r7, #6]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	43d2      	mvns	r2, r2
 8003aea:	4611      	mov	r1, r2
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <DIO_setPinValue+0xf0>)
 8003aee:	400b      	ands	r3, r1
 8003af0:	6013      	str	r3, [r2, #0]
            break;
 8003af2:	e003      	b.n	8003afc <DIO_setPinValue+0xdc>
            break;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <DIO_setPinValue+0xde>
            break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <DIO_setPinValue+0xde>
            break;
 8003afc:	bf00      	nop
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	4001080c 	.word	0x4001080c
 8003b0c:	40010c0c 	.word	0x40010c0c
 8003b10:	0011000c 	.word	0x0011000c

08003b14 <DIO_getPinValue>:


 /* Get the binary value of a specific pin in a specific GPIO port. */
uint8 DIO_getPinValue(uint8 Port, uint8 Pin)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	71fb      	strb	r3, [r7, #7]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71bb      	strb	r3, [r7, #6]
    uint8 pinValue = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
    
    switch(Port)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d01e      	beq.n	8003b6c <DIO_getPinValue+0x58>
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	dc28      	bgt.n	8003b84 <DIO_getPinValue+0x70>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <DIO_getPinValue+0x28>
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00c      	beq.n	8003b54 <DIO_getPinValue+0x40>
 8003b3a:	e023      	b.n	8003b84 <DIO_getPinValue+0x70>
    {
        case DIO_GPIOA:
            /* Read the binary value of the pin from GPIOA */
            pinValue = GET_BIT(GPIOA_IDR, Pin);
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <DIO_getPinValue+0x7c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	79ba      	ldrb	r2, [r7, #6]
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	401a      	ands	r2, r3
 8003b4a:	79bb      	ldrb	r3, [r7, #6]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	73fb      	strb	r3, [r7, #15]
            break;
 8003b52:	e017      	b.n	8003b84 <DIO_getPinValue+0x70>
        
        case DIO_GPIOB:
            /* Read the binary value of the pin from GPIOB */
            pinValue = GET_BIT(GPIOB_IDR, Pin);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <DIO_getPinValue+0x80>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	79ba      	ldrb	r2, [r7, #6]
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	401a      	ands	r2, r3
 8003b62:	79bb      	ldrb	r3, [r7, #6]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	73fb      	strb	r3, [r7, #15]
            break;
 8003b6a:	e00b      	b.n	8003b84 <DIO_getPinValue+0x70>
        
        case DIO_GPIOC:
            /* Read the binary value of the pin from GPIOC */
            pinValue = GET_BIT(GPIOC_IDR, Pin);
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <DIO_getPinValue+0x84>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	79ba      	ldrb	r2, [r7, #6]
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	401a      	ands	r2, r3
 8003b7a:	79bb      	ldrb	r3, [r7, #6]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	73fb      	strb	r3, [r7, #15]
            break;
 8003b82:	bf00      	nop
    }
    
    /* Return the binary value of the pin */
    return pinValue;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40010808 	.word	0x40010808
 8003b94:	40010c08 	.word	0x40010c08
 8003b98:	00110008 	.word	0x00110008

08003b9c <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
    EXTI_callBack[0]();
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <EXTI0_IRQHandler+0x1c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4798      	blx	r3
    
    /*  Clear pending Bit       */
    SET_BIT(EXTI->PR,0);
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <EXTI0_IRQHandler+0x20>)
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <EXTI0_IRQHandler+0x20>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6153      	str	r3, [r2, #20]
    
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000140 	.word	0x20000140
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
    EXTI_callBack[1]();
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <EXTI1_IRQHandler+0x1c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4798      	blx	r3
    
    /*  Clear pending Bit       */
    SET_BIT(EXTI->PR,1);
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <EXTI1_IRQHandler+0x20>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <EXTI1_IRQHandler+0x20>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6153      	str	r3, [r2, #20]
    
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000140 	.word	0x20000140
 8003be0:	40010400 	.word	0x40010400

08003be4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    EXTI_callBack[2]();
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <EXTI2_IRQHandler+0x1c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4798      	blx	r3
    
    /*  Clear pending Bit       */
    SET_BIT(EXTI->PR,2);
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <EXTI2_IRQHandler+0x20>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <EXTI2_IRQHandler+0x20>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6153      	str	r3, [r2, #20]
    
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000140 	.word	0x20000140
 8003c04:	40010400 	.word	0x40010400

08003c08 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
    EXTI_callBack[3]();
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <EXTI3_IRQHandler+0x1c>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4798      	blx	r3
    
    /*  Clear pending Bit       */
    SET_BIT(EXTI->PR,3);
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <EXTI3_IRQHandler+0x20>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <EXTI3_IRQHandler+0x20>)
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	6153      	str	r3, [r2, #20]
    
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000140 	.word	0x20000140
 8003c28:	40010400 	.word	0x40010400

08003c2c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    EXTI_callBack[4]();
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <EXTI4_IRQHandler+0x1c>)
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	4798      	blx	r3
    
    /*  Clear pending Bit       */
    SET_BIT(EXTI->PR,4);
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <EXTI4_IRQHandler+0x20>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <EXTI4_IRQHandler+0x20>)
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	6153      	str	r3, [r2, #20]
    
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000140 	.word	0x20000140
 8003c4c:	40010400 	.word	0x40010400

08003c50 <GPT_init>:
#include "../Inc/MCAL//GPT/GPT_config.h"
#include "../Inc/MCAL//GPT/GPT_interface.h"

// Initialize the General-Purpose Timer (GPT) with the specified configuration.
void GPT_init(TimerNUM Timerx, TimerConfig_t* TimerxCfg)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
    CLR_BIT(Timer[Timerx]->CR1, 0);  // Disable the timer before configuration.
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <GPT_init+0x128>)
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	4943      	ldr	r1, [pc, #268]	; (8003d78 <GPT_init+0x128>)
 8003c6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]


    if (TimerxCfg->AutoReloadBuffer == ENABLED)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	78db      	ldrb	r3, [r3, #3]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10c      	bne.n	8003c96 <GPT_init+0x46>
        SET_BIT(Timer[Timerx]->CR1, 7);
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <GPT_init+0x128>)
 8003c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	493b      	ldr	r1, [pc, #236]	; (8003d78 <GPT_init+0x128>)
 8003c8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e00b      	b.n	8003cae <GPT_init+0x5e>
    else
        CLR_BIT(Timer[Timerx]->CR1, 7);
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4a37      	ldr	r2, [pc, #220]	; (8003d78 <GPT_init+0x128>)
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	4935      	ldr	r1, [pc, #212]	; (8003d78 <GPT_init+0x128>)
 8003ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	601a      	str	r2, [r3, #0]

    // Configure the timer's prescaler based on the pre-defined mode or custom value.
    // If TIMER_PRESCALER_CALCULATE is AUTO, calculate and set the prescaler.
    // Else, directly set the custom prescaler value from TimerxCfg.
    #if TIMER_PRESCALER_CALCULATE == TIMER_PRESCALER_AUTO
        setPrescaler(Timerx);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f9a1 	bl	8003ff8 <setPrescaler>
    #else
        Timer[Timerx]->PSC = TimerxCfg->prescaler;
    #endif
    

    if (TimerxCfg->Direction == UPCounter)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	789b      	ldrb	r3, [r3, #2]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <GPT_init+0xa0>
    {
        CLR_BIT(Timer[Timerx]->CR1, 4);          // Set as Up Counter
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <GPT_init+0x128>)
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	492b      	ldr	r1, [pc, #172]	; (8003d78 <GPT_init+0x128>)
 8003ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cd0:	f022 0210 	bic.w	r2, r2, #16
 8003cd4:	601a      	str	r2, [r3, #0]
        MOD_2BIT(Timer[Timerx]->CR1, 5, 0b00);   // Set counting mode to edge-aligned
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <GPT_init+0x128>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4925      	ldr	r1, [pc, #148]	; (8003d78 <GPT_init+0x128>)
 8003ce4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e01b      	b.n	8003d28 <GPT_init+0xd8>
    }
    else if (TimerxCfg->Direction == DownCounter)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	789b      	ldrb	r3, [r3, #2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d117      	bne.n	8003d28 <GPT_init+0xd8>
    {
        SET_BIT(Timer[Timerx]->CR1, 4);          // Set as Down Counter
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <GPT_init+0x128>)
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	491c      	ldr	r1, [pc, #112]	; (8003d78 <GPT_init+0x128>)
 8003d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d0a:	f042 0210 	orr.w	r2, r2, #16
 8003d0e:	601a      	str	r2, [r3, #0]
        MOD_2BIT(Timer[Timerx]->CR1, 5, 0b00);   // Set counting mode to edge-aligned
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <GPT_init+0x128>)
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	4916      	ldr	r1, [pc, #88]	; (8003d78 <GPT_init+0x128>)
 8003d1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d26:	601a      	str	r2, [r3, #0]
    else
    {
        // To implement center Aligned mode.
    }

    SET_BIT(Timer[Timerx]->CR1, 2);  // Only counter overflow/underflow generates an update interrupt if enabled.
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <GPT_init+0x128>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4910      	ldr	r1, [pc, #64]	; (8003d78 <GPT_init+0x128>)
 8003d36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d3a:	f042 0204 	orr.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
    CLR_BIT(Timer[Timerx]->CR1, 1);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <GPT_init+0x128>)
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	490a      	ldr	r1, [pc, #40]	; (8003d78 <GPT_init+0x128>)
 8003d4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d52:	f022 0202 	bic.w	r2, r2, #2
 8003d56:	601a      	str	r2, [r3, #0]

    SET_BIT(Timer[Timerx]->CR1, 0);  // Enable the timer after configuration.
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <GPT_init+0x128>)
 8003d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4904      	ldr	r1, [pc, #16]	; (8003d78 <GPT_init+0x128>)
 8003d66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000048 	.word	0x20000048

08003d7c <GPT_initTickTimer>:

// TO initialize Specific Timer to work as Tick counting
// The function Initializes the necessary peripherals including RCC and NVIC.
void GPT_initTickTimer(uint16 TickMillisecond)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
    RCC_enableClk (RCC_APB1, RCC_TIM2 + TICK_TIMER);
 8003d86:	2100      	movs	r1, #0
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f000 fa43 	bl	8004214 <RCC_enableClk>
    NVIC_enableInterrupt(NVIC_TIM2  + TICK_TIMER);
 8003d8e:	201c      	movs	r0, #28
 8003d90:	f000 f9f6 	bl	8004180 <NVIC_enableInterrupt>
    
    TimerConfig_t TickTImerConfig = {7,UPCounter,DISABLED};
 8003d94:	2307      	movs	r3, #7
 8003d96:	81bb      	strh	r3, [r7, #12]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73bb      	strb	r3, [r7, #14]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
    
    GPT_init(TICK_TIMER, &TickTImerConfig);
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	4619      	mov	r1, r3
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7ff ff52 	bl	8003c50 <GPT_init>
    
    if(TickMillisecond < 65)
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d80d      	bhi.n	8003dce <GPT_initTickTimer+0x52>
        GPT_setIntervalPeriodicMicroSec(TICK_TIMER,(TickMillisecond * 1000), updateTimTicks);
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	461a      	mov	r2, r3
 8003db6:	0152      	lsls	r2, r2, #5
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <GPT_initTickTimer+0x68>)
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f000 f80e 	bl	8003de8 <GPT_setIntervalPeriodicMicroSec>
    else
        GPT_setIntervalPeriodicMilliSec(TICK_TIMER, TickMillisecond, updateTimTicks);
    
}
 8003dcc:	e005      	b.n	8003dda <GPT_initTickTimer+0x5e>
        GPT_setIntervalPeriodicMilliSec(TICK_TIMER, TickMillisecond, updateTimTicks);
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <GPT_initTickTimer+0x68>)
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f000 f861 	bl	8003e9c <GPT_setIntervalPeriodicMilliSec>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	08003fdd 	.word	0x08003fdd

08003de8 <GPT_setIntervalPeriodicMicroSec>:
}


// Set a periodic timer interval in microseconds using the specified timer.
void GPT_setIntervalPeriodicMicroSec(TimerNUM Timerx, uint16 NoMicroSec, void (*ptr)(void))
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	603a      	str	r2, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
 8003df4:	460b      	mov	r3, r1
 8003df6:	80bb      	strh	r3, [r7, #4]
    CLR_BIT(Timer[Timerx]->CR1, 0);                       // Disable the timer before configuration.
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4921      	ldr	r1, [pc, #132]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    CLR_BIT(Timer[Timerx]->SR , 0);                       // Clear the timer status register.
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	491b      	ldr	r1, [pc, #108]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	611a      	str	r2, [r3, #16]
                     
    TimerMilliSecHold[Timerx] = 0;                        // Reset the millisecond count.
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <GPT_setIntervalPeriodicMicroSec+0xa8>)
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    TimerCallBcak[Timerx] = ptr;                          // Set the callback function.
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4917      	ldr	r1, [pc, #92]	; (8003e94 <GPT_setIntervalPeriodicMicroSec+0xac>)
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Timer[Timerx]->ARR = NoMicroSec;                      // Set the auto-reload value.
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	88ba      	ldrh	r2, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
    TimerIntervalMode[Timerx] = TIMER_INTERVAL_PERIODIC;  // Set interval mode to periodic.
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <GPT_setIntervalPeriodicMicroSec+0xb0>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	54d1      	strb	r1, [r2, r3]

    SET_BIT(Timer[Timerx]->CR1 , 0);                      // Enable the timer.
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	490b      	ldr	r1, [pc, #44]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
    SET_BIT(Timer[Timerx]->DIER, 0);                      // Enable timer interrupt.
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	4905      	ldr	r1, [pc, #20]	; (8003e8c <GPT_setIntervalPeriodicMicroSec+0xa4>)
 8003e76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000048 	.word	0x20000048
 8003e90:	20000190 	.word	0x20000190
 8003e94:	20000180 	.word	0x20000180
 8003e98:	2000018c 	.word	0x2000018c

08003e9c <GPT_setIntervalPeriodicMilliSec>:
}


// Set a periodic timer interval in milliseconds using the specified timer.
void GPT_setIntervalPeriodicMilliSec(TimerNUM Timerx, uint16 NoMilliSec, void (*ptr)(void))
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	603a      	str	r2, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	80bb      	strh	r3, [r7, #4]
    CLR_BIT(Timer[Timerx]->CR1, 0);                       // Disable the timer before configuration.
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4928      	ldr	r1, [pc, #160]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    CLR_BIT(Timer[Timerx]->SR , 0);                       // Clear the timer status register.
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4922      	ldr	r1, [pc, #136]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003ed2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	611a      	str	r2, [r3, #16]

    if (NoMilliSec > 0)
 8003edc:	88bb      	ldrh	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00e      	beq.n	8003f00 <GPT_setIntervalPeriodicMilliSec+0x64>
    {
        NoMilliSecPeriodic[Timerx] = NoMilliSec - 1;              // Calculate the periodic millisecond value.
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <GPT_setIntervalPeriodicMilliSec+0xc4>)
 8003eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        TimerMilliSecHold[Timerx] = NoMilliSecPeriodic[Timerx];   // Set the millisecond count.
 8003ef0:	79fa      	ldrb	r2, [r7, #7]
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	491a      	ldr	r1, [pc, #104]	; (8003f60 <GPT_setIntervalPeriodicMilliSec+0xc4>)
 8003ef6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003efa:	491a      	ldr	r1, [pc, #104]	; (8003f64 <GPT_setIntervalPeriodicMilliSec+0xc8>)
 8003efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    TimerCallBcak[Timerx] = ptr;                          // Set the callback function.
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	4919      	ldr	r1, [pc, #100]	; (8003f68 <GPT_setIntervalPeriodicMilliSec+0xcc>)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Timer[Timerx]->ARR = 1000;                            // Set the auto-reload value.
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
    TimerIntervalMode[Timerx] = TIMER_INTERVAL_PERIODIC;  // Set interval mode to periodic.
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <GPT_setIntervalPeriodicMilliSec+0xd0>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	54d1      	strb	r1, [r2, r3]

    SET_BIT(Timer[Timerx]->CR1 , 0);                      // Enable the timer.
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	490b      	ldr	r1, [pc, #44]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
    SET_BIT(Timer[Timerx]->DIER, 0);                      // Enable timer interrupt.
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	4905      	ldr	r1, [pc, #20]	; (8003f5c <GPT_setIntervalPeriodicMilliSec+0xc0>)
 8003f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	60da      	str	r2, [r3, #12]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000048 	.word	0x20000048
 8003f60:	2000019c 	.word	0x2000019c
 8003f64:	20000190 	.word	0x20000190
 8003f68:	20000180 	.word	0x20000180
 8003f6c:	2000018c 	.word	0x2000018c

08003f70 <GPT_getRemainingTime>:
    return elapsedTime;
}

// Returns the remaining time in timer counts.
uint16 GPT_getRemainingTime(TimerNUM Timerx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
    uint16 remainingTime;

    // If the timer is an up counter, remaining time is the difference between ARR and counter value.
    // If the timer is a down counter, remaining time is the current counter value.
    if (GET_BIT(Timer[Timerx]->CR1, 4) == 1)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <GPT_getRemainingTime+0x54>)
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d106      	bne.n	8003f9c <GPT_getRemainingTime+0x2c>
        remainingTime = Timer[Timerx]->CNT;
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <GPT_getRemainingTime+0x54>)
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	81fb      	strh	r3, [r7, #14]
 8003f9a:	e00d      	b.n	8003fb8 <GPT_getRemainingTime+0x48>
    else
        remainingTime = Timer[Timerx]->ARR - Timer[Timerx]->CNT;
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <GPT_getRemainingTime+0x54>)
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <GPT_getRemainingTime+0x54>)
 8003fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	81fb      	strh	r3, [r7, #14]

    return remainingTime;
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000048 	.word	0x20000048

08003fc8 <GPT_getTicks>:

// Returns Ticks counter if timer was initialized as Tick Counting
uint32 GPT_getTicks()
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
    return Tick;
 8003fcc:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <GPT_getTicks+0x10>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	200001a8 	.word	0x200001a8

08003fdc <updateTimTicks>:


void updateTimTicks()
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
    Tick++;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <updateTimTicks+0x18>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a03      	ldr	r2, [pc, #12]	; (8003ff4 <updateTimTicks+0x18>)
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200001a8 	.word	0x200001a8

08003ff8 <setPrescaler>:


// Set the prescaler value for the specified timer based on the APB1 clock frequency.
void setPrescaler(TimerNUM Timerx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
    uint16 prescaler = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	81fb      	strh	r3, [r7, #14]

    // Calculate the prescaler value based on the APB1 clock frequency.
    // If APB1 clock is not divided, calculate the prescaler directly.
    // Otherwise, multiply clock freq by 2 by shifting it left by 1 and then calculate the prescaler.
    #if APB1_PRESCALER == APB1_NOT_DIVIDED
        prescaler = (RCC_APB1_CLK_FRQ / 1000000) - 1; 
 8004006:	2307      	movs	r3, #7
 8004008:	81fb      	strh	r3, [r7, #14]
    #else
        prescaler = ((RCC_APB1_CLK_FRQ << 1) / 1000000) - 1;
    #endif

    Timer[Timerx]->PSC = prescaler;  // Set the calculated prescaler value.
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <setPrescaler+0x28>)
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	89fa      	ldrh	r2, [r7, #14]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000048 	.word	0x20000048

08004024 <TIM2_IRQHandler>:


// Interrupt handler for Timer 2 events.
void TIM2_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
    CLR_BIT(Timer[0]->SR, 0);      // Clear the timer status register.
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <TIM2_IRQHandler+0x60>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <TIM2_IRQHandler+0x60>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	611a      	str	r2, [r3, #16]
                
    // Check if the timer has completed its interval cycle if above milliseconds.
    if (TimerMilliSecHold[0] == 0)
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <TIM2_IRQHandler+0x64>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d119      	bne.n	8004074 <TIM2_IRQHandler+0x50>
    {
        // Execute the callback function if it is not NULL.
        if (TimerCallBcak[0] != NULL)
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <TIM2_IRQHandler+0x68>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <TIM2_IRQHandler+0x2a>
            TimerCallBcak[0]();
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <TIM2_IRQHandler+0x68>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4798      	blx	r3
        
        // Handle single-shot or periodic interval modes.
        if (TimerIntervalMode[0] == TIMER_INTERVAL_SINGLE)
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <TIM2_IRQHandler+0x6c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <TIM2_IRQHandler+0x46>
            CLR_BIT(Timer[0]->CR1, 0);     // Disable the timer.
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <TIM2_IRQHandler+0x60>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <TIM2_IRQHandler+0x60>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
        else
            TimerMilliSecHold[0] = NoMilliSecPeriodic[0];  // Reset the periodic millisecond count.
    }
    else
        TimerMilliSecHold[0]--;  // Decrement the millisecond hold count.
}
 8004068:	e009      	b.n	800407e <TIM2_IRQHandler+0x5a>
            TimerMilliSecHold[0] = NoMilliSecPeriodic[0];  // Reset the periodic millisecond count.
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <TIM2_IRQHandler+0x70>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a06      	ldr	r2, [pc, #24]	; (8004088 <TIM2_IRQHandler+0x64>)
 8004070:	6013      	str	r3, [r2, #0]
}
 8004072:	e004      	b.n	800407e <TIM2_IRQHandler+0x5a>
        TimerMilliSecHold[0]--;  // Decrement the millisecond hold count.
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <TIM2_IRQHandler+0x64>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	4a03      	ldr	r2, [pc, #12]	; (8004088 <TIM2_IRQHandler+0x64>)
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000048 	.word	0x20000048
 8004088:	20000190 	.word	0x20000190
 800408c:	20000180 	.word	0x20000180
 8004090:	2000018c 	.word	0x2000018c
 8004094:	2000019c 	.word	0x2000019c

08004098 <TIM3_IRQHandler>:


// Interrupt handler for Timer 3 events.
void TIM3_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
    CLR_BIT(Timer[1]->SR, 0);      // Clear the timer status register.
 800409c:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <TIM3_IRQHandler+0x60>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <TIM3_IRQHandler+0x60>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	611a      	str	r2, [r3, #16]
    
    // Check if the timer has completed its interval.
    if (TimerMilliSecHold[1] == 0)
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <TIM3_IRQHandler+0x64>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d119      	bne.n	80040e8 <TIM3_IRQHandler+0x50>
    {
        // Execute the callback function if it is not NULL.
        if (TimerCallBcak[1] != NULL)
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <TIM3_IRQHandler+0x68>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <TIM3_IRQHandler+0x2a>
            TimerCallBcak[1]();
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <TIM3_IRQHandler+0x68>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4798      	blx	r3
        
        // Handle single-shot or periodic interval modes.
        if (TimerIntervalMode[1] == TIMER_INTERVAL_SINGLE)
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <TIM3_IRQHandler+0x6c>)
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <TIM3_IRQHandler+0x46>
            CLR_BIT(Timer[1]->CR1, 0);     // Disable the timer.
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <TIM3_IRQHandler+0x60>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <TIM3_IRQHandler+0x60>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
        else
            TimerMilliSecHold[1] = NoMilliSecPeriodic[1];  // Reset the periodic millisecond count.
    }
    else
        TimerMilliSecHold[1]--;  // Decrement the millisecond hold count.
}
 80040dc:	e009      	b.n	80040f2 <TIM3_IRQHandler+0x5a>
            TimerMilliSecHold[1] = NoMilliSecPeriodic[1];  // Reset the periodic millisecond count.
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <TIM3_IRQHandler+0x70>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4a06      	ldr	r2, [pc, #24]	; (80040fc <TIM3_IRQHandler+0x64>)
 80040e4:	6053      	str	r3, [r2, #4]
}
 80040e6:	e004      	b.n	80040f2 <TIM3_IRQHandler+0x5a>
        TimerMilliSecHold[1]--;  // Decrement the millisecond hold count.
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <TIM3_IRQHandler+0x64>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <TIM3_IRQHandler+0x64>)
 80040f0:	6053      	str	r3, [r2, #4]
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000048 	.word	0x20000048
 80040fc:	20000190 	.word	0x20000190
 8004100:	20000180 	.word	0x20000180
 8004104:	2000018c 	.word	0x2000018c
 8004108:	2000019c 	.word	0x2000019c

0800410c <TIM4_IRQHandler>:

// Interrupt handler for Timer 4 events.
void TIM4_IRQHandler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
    CLR_BIT(Timer[2]->SR, 0);      // Clear the timer status register.
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <TIM4_IRQHandler+0x60>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <TIM4_IRQHandler+0x60>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	611a      	str	r2, [r3, #16]
    
    // Check if the timer has completed its interval.
    if (TimerMilliSecHold[2] == 0)
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <TIM4_IRQHandler+0x64>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d119      	bne.n	800415c <TIM4_IRQHandler+0x50>
    {
        // Execute the callback function if it is not NULL.
        if (TimerCallBcak[2] != NULL)
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <TIM4_IRQHandler+0x68>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <TIM4_IRQHandler+0x2a>
            TimerCallBcak[2]();
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <TIM4_IRQHandler+0x68>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4798      	blx	r3
        
        // Handle single-shot or periodic interval modes.
        if (TimerIntervalMode[2] == TIMER_INTERVAL_SINGLE)
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <TIM4_IRQHandler+0x6c>)
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <TIM4_IRQHandler+0x46>
            CLR_BIT(Timer[2]->CR1, 0);     // Disable the timer.
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <TIM4_IRQHandler+0x60>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <TIM4_IRQHandler+0x60>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
        else
            TimerMilliSecHold[2] = NoMilliSecPeriodic[2];  // Reset the periodic millisecond count.
    }
    else
        TimerMilliSecHold[2]--;  // Decrement the millisecond hold count.
}
 8004150:	e009      	b.n	8004166 <TIM4_IRQHandler+0x5a>
            TimerMilliSecHold[2] = NoMilliSecPeriodic[2];  // Reset the periodic millisecond count.
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <TIM4_IRQHandler+0x70>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4a06      	ldr	r2, [pc, #24]	; (8004170 <TIM4_IRQHandler+0x64>)
 8004158:	6093      	str	r3, [r2, #8]
}
 800415a:	e004      	b.n	8004166 <TIM4_IRQHandler+0x5a>
        TimerMilliSecHold[2]--;  // Decrement the millisecond hold count.
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <TIM4_IRQHandler+0x64>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a03      	ldr	r2, [pc, #12]	; (8004170 <TIM4_IRQHandler+0x64>)
 8004164:	6093      	str	r3, [r2, #8]
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000048 	.word	0x20000048
 8004170:	20000190 	.word	0x20000190
 8004174:	20000180 	.word	0x20000180
 8004178:	2000018c 	.word	0x2000018c
 800417c:	2000019c 	.word	0x2000019c

08004180 <NVIC_enableInterrupt>:



// This function enables the interrupt specified by IntNum parameter
void NVIC_enableInterrupt (uint8 IntNum)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
    // Check if IntNum is between 0 and 31 (inclusive)
    if ( IntNum <= 31 )
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b1f      	cmp	r3, #31
 800418e:	d805      	bhi.n	800419c <NVIC_enableInterrupt+0x1c>
    {
        // Set the corresponding bit in NVIC_ISER0 register to enable the interrupt
        NVIC_ISER0 = ( 1 << IntNum );
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	2201      	movs	r2, #1
 8004194:	409a      	lsls	r2, r3
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <NVIC_enableInterrupt+0x3c>)
 8004198:	601a      	str	r2, [r3, #0]
    else 
    {
        // If IntNum is out of range, return an error
        /*Return Error*/
    }
}
 800419a:	e00a      	b.n	80041b2 <NVIC_enableInterrupt+0x32>
    else if ( IntNum <= 63 )
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b3f      	cmp	r3, #63	; 0x3f
 80041a0:	d807      	bhi.n	80041b2 <NVIC_enableInterrupt+0x32>
        IntNum -= 32 ;
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	3b20      	subs	r3, #32
 80041a6:	71fb      	strb	r3, [r7, #7]
        NVIC_ISER1 = ( 1 << IntNum );
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	2201      	movs	r2, #1
 80041ac:	409a      	lsls	r2, r3
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <NVIC_enableInterrupt+0x40>)
 80041b0:	601a      	str	r2, [r3, #0]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000e104 	.word	0xe000e104

080041c4 <RCC_initSysClk>:



/* This function initializes the system clock */
void RCC_initSysClk(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
    #elif RCC_CLK_TYPE == RCC_HSE_RC
        RCC_CR   = 0x00050000 ; // Enable HSE Clock with bypass.
        RCC_CFGR = 0x00000001 ; // HSE selected as system clock.    
    
    #elif RCC_CLK_TYPE == RCC_HSI
        RCC_CR   = 0x00000081 ; // Enable HSI.
 80041c8:	4b10      	ldr	r3, [pc, #64]	; (800420c <RCC_initSysClk+0x48>)
 80041ca:	2281      	movs	r2, #129	; 0x81
 80041cc:	601a      	str	r2, [r3, #0]
        RCC_CFGR = 0x00000000 ; // HSI selected as system clock.    
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <RCC_initSysClk+0x4c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    #else
         #error("Wrong Clock Type")
        
    #endif

            MOD_4BIT(RCC_CFGR, 4 , AHB_PRESCALER) ; /* Set AHB bus prescaler value  */
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <RCC_initSysClk+0x4c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <RCC_initSysClk+0x4c>)
 80041da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041de:	6013      	str	r3, [r2, #0]
            MOD_3BIT(RCC_CFGR, 8 , APB1_PRESCALER); /* Set APB1 bus prescaler value */
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <RCC_initSysClk+0x4c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <RCC_initSysClk+0x4c>)
 80041e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041ea:	6013      	str	r3, [r2, #0]
            MOD_3BIT(RCC_CFGR, 11, APB2_PRESCALER); /* Set APB2 bus prescaler value */
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <RCC_initSysClk+0x4c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a07      	ldr	r2, [pc, #28]	; (8004210 <RCC_initSysClk+0x4c>)
 80041f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041f6:	6013      	str	r3, [r2, #0]
            MOD_2BIT(RCC_CFGR, 14, ADC_PRESCALER) ; /* Set ADC bus prescaler value  */
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <RCC_initSysClk+0x4c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <RCC_initSysClk+0x4c>)
 80041fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004202:	6013      	str	r3, [r2, #0]

}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40021000 	.word	0x40021000
 8004210:	40021004 	.word	0x40021004

08004214 <RCC_enableClk>:

/* Function to enable clock for a specific peripheral on a specific bus */
void RCC_enableClk(uint8 busId, uint8 perId)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	460a      	mov	r2, r1
 800421e:	71fb      	strb	r3, [r7, #7]
 8004220:	4613      	mov	r3, r2
 8004222:	71bb      	strb	r3, [r7, #6]
    /* Check if perId is valid (<= 31) */
    if(perId <= 31)
 8004224:	79bb      	ldrb	r3, [r7, #6]
 8004226:	2b1f      	cmp	r3, #31
 8004228:	d82b      	bhi.n	8004282 <RCC_enableClk+0x6e>
    {
        /* Enable clock for peripheral based on busId */
        switch(busId)
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d01c      	beq.n	800426a <RCC_enableClk+0x56>
 8004230:	2b02      	cmp	r3, #2
 8004232:	dc25      	bgt.n	8004280 <RCC_enableClk+0x6c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <RCC_enableClk+0x2a>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d00b      	beq.n	8004254 <RCC_enableClk+0x40>
            case RCC_APB2: 
                SET_BIT(RCC_APB2ENR,perId);     
                break;  
            default:        
                /* Return Error */                      
                break; //May cause error if default case was not implemented (compiler dependence).
 800423c:	e020      	b.n	8004280 <RCC_enableClk+0x6c>
                SET_BIT(RCC_AHBENR ,perId);     
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <RCC_enableClk+0x78>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	79ba      	ldrb	r2, [r7, #6]
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	4611      	mov	r1, r2
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <RCC_enableClk+0x78>)
 800424e:	430b      	orrs	r3, r1
 8004250:	6013      	str	r3, [r2, #0]
                break;
 8004252:	e016      	b.n	8004282 <RCC_enableClk+0x6e>
                SET_BIT(RCC_APB1ENR,perId);     
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <RCC_enableClk+0x7c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	79ba      	ldrb	r2, [r7, #6]
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4611      	mov	r1, r2
 8004262:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <RCC_enableClk+0x7c>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6013      	str	r3, [r2, #0]
                break;      
 8004268:	e00b      	b.n	8004282 <RCC_enableClk+0x6e>
                SET_BIT(RCC_APB2ENR,perId);     
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RCC_enableClk+0x80>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	79ba      	ldrb	r2, [r7, #6]
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	4611      	mov	r1, r2
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <RCC_enableClk+0x80>)
 800427a:	430b      	orrs	r3, r1
 800427c:	6013      	str	r3, [r2, #0]
                break;  
 800427e:	e000      	b.n	8004282 <RCC_enableClk+0x6e>
                break; //May cause error if default case was not implemented (compiler dependence).
 8004280:	bf00      	nop
    }
    else 
    {
        /* Return Error*/
    }
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40021014 	.word	0x40021014
 8004290:	4002101c 	.word	0x4002101c
 8004294:	40021018 	.word	0x40021018

08004298 <SPI1_init>:
#include "../Inc/MCAL//SPI/SPI_interface.h"
#include "../Inc/MCAL//SPI/SPI_config.h"
#include "../Inc/MCAL//SPI/SPI_private.h"


void SPI1_init() {
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
    // Set the SPI_CR1 register
    SPI1->CR1 = 
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <SPI1_init+0x4c>)
 800429e:	f241 0207 	movw	r2, #4103	; 0x1007
 80042a2:	601a      	str	r2, [r3, #0]
                (SPI1_OUTPUT_ENABLE_IN_BI_DIR_MODE << 14) |
                (SPI1_BIDIRECTIONAL_DATA_MODE << 15);


    // Set the SPI_SR register
    SPI1->SR = 0;
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <SPI1_init+0x4c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]

    // Set the SPI_DR register
    SPI1->DR = 0;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <SPI1_init+0x4c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	60da      	str	r2, [r3, #12]

    // Set the SPI_CRCPR register
    SPI1->CRCPR = 0;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <SPI1_init+0x4c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]

    // Set the SPI_RXCRCR register
    SPI1->RXCRCR = 0;
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <SPI1_init+0x4c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]

    // Set the SPI_TXCRCR register
    SPI1->TXCRCR = 0;
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <SPI1_init+0x4c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]

    // Set the SPI_I2SCFGR register
    SPI1->I2SCFGR = 0;
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <SPI1_init+0x4c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	61da      	str	r2, [r3, #28]

    // Set the SPI_I2SPR register
    SPI1->I2SPR = 0;
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <SPI1_init+0x4c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	621a      	str	r2, [r3, #32]
    
    // Enable SPI_1 
    SET_BIT(SPI1->CR1,6);
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SPI1_init+0x4c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <SPI1_init+0x4c>)
 80042d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d8:	6013      	str	r3, [r2, #0]
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40013000 	.word	0x40013000

080042e8 <SPI1_sendReceiveByteSync>:
    SET_BIT(SPI2->CR1,6);
}

// This function sends a byte of data using SPI1 and receives a byte in response synchronously.
void SPI1_sendReceiveByteSync (uint8 SPI1_ByteToSend, uint8 * SPI1_ByteToReceive)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
    #if SPI1_SET_SLAVE_PIN_SOFTWARE == 1
    // If software control of the slave pin is enabled, set it low to indicate the start of the transaction.
    DIO_setPinValue(SPI1_SLAVE_PIN, LOW);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	2000      	movs	r0, #0
 80042fa:	f7ff fb91 	bl	8003a20 <DIO_setPinValue>
    #endif
    
    // Send the byte of data over SPI1.
    SPI1->DR =SPI1_ByteToSend;
 80042fe:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <SPI1_sendReceiveByteSync+0x48>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	60d3      	str	r3, [r2, #12]
    
    // Wait for the SPI1 transmit buffer to become empty.
    while(GET_BIT(SPI1->SR,7)==1);
 8004304:	bf00      	nop
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <SPI1_sendReceiveByteSync+0x48>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	09db      	lsrs	r3, r3, #7
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d0f8      	beq.n	8004306 <SPI1_sendReceiveByteSync+0x1e>
    
    // Read the byte of data received over SPI1.
    *SPI1_ByteToReceive = SPI1->DR ;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <SPI1_sendReceiveByteSync+0x48>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	701a      	strb	r2, [r3, #0]
    
    #if SPI1_SET_SLAVE_PIN_SOFTWARE == 1
    // If software control of the slave pin is enabled, set it high to indicate the end of the transaction.
    DIO_setPinValue(SPI1_SLAVE_PIN, HIGH);
 800431e:	2201      	movs	r2, #1
 8004320:	2100      	movs	r1, #0
 8004322:	2000      	movs	r0, #0
 8004324:	f7ff fb7c 	bl	8003a20 <DIO_setPinValue>
    #endif
    
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40013000 	.word	0x40013000

08004334 <SPI1_IRQHandler>:
}



void SPI1_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
    // Check if RXNE flag is set
    if(GET_BIT(SPI1->SR,0)==1)
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <SPI1_IRQHandler+0x4c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <SPI1_IRQHandler+0x32>
    {
        // Call the callback function with the received byte
        if(SPI1_callBack!=NULL)
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <SPI1_IRQHandler+0x50>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <SPI1_IRQHandler+0x26>
        {
            SPI1_callBack((SPI1->DR));
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <SPI1_IRQHandler+0x50>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <SPI1_IRQHandler+0x4c>)
 8004352:	68d2      	ldr	r2, [r2, #12]
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	4610      	mov	r0, r2
 8004358:	4798      	blx	r3
        }
        // Clear the RXNE flag
        CLR_BIT(SPI1->SR,0);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <SPI1_IRQHandler+0x4c>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <SPI1_IRQHandler+0x4c>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6093      	str	r3, [r2, #8]
    }
    
    // Check if TXE flag is set
    if(GET_BIT(SPI1->SR,1)==1)
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <SPI1_IRQHandler+0x4c>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <SPI1_IRQHandler+0x46>
    {
        // Set the flag indicating the SPI is ready to send data
        SPI1_ReadyToSend = 1;
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SPI1_IRQHandler+0x54>)
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
    }
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40013000 	.word	0x40013000
 8004384:	200001ac 	.word	0x200001ac
 8004388:	20000054 	.word	0x20000054

0800438c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
    // Check if RXNE flag is set
    if(GET_BIT(SPI2->SR,0)==1)
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <SPI2_IRQHandler+0x4c>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d110      	bne.n	80043be <SPI2_IRQHandler+0x32>
    {
        // Call the callback function with the received byte
        if(SPI2_callBack!=NULL)
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <SPI2_IRQHandler+0x50>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <SPI2_IRQHandler+0x26>
        {
            SPI2_callBack((SPI2->DR));
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <SPI2_IRQHandler+0x50>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <SPI2_IRQHandler+0x4c>)
 80043aa:	68d2      	ldr	r2, [r2, #12]
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	4610      	mov	r0, r2
 80043b0:	4798      	blx	r3
        }
        // Clear the RXNE flag
        CLR_BIT(SPI2->SR,0);
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <SPI2_IRQHandler+0x4c>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <SPI2_IRQHandler+0x4c>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6093      	str	r3, [r2, #8]
    }
    
    // Check if TXE flag is set
    if(GET_BIT(SPI2->SR,1)==1)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <SPI2_IRQHandler+0x4c>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <SPI2_IRQHandler+0x46>
    {
        // Set the flag indicating the SPI is ready to send data
        SPI2_ReadyToSend = 1;
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <SPI2_IRQHandler+0x54>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    }
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40003800 	.word	0x40003800
 80043dc:	200001b0 	.word	0x200001b0
 80043e0:	20000055 	.word	0x20000055

080043e4 <STK_init>:
#endif


// Initialize the SysTick timer.
void STK_init ()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
    // Set number of Ticks for one microsecond.
     microSecToTicksRatio = (float32)CPU_INPUT_CLOCK / 1000000;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <STK_init+0x34>)
 80043ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80043ee:	601a      	str	r2, [r3, #0]
     
    #if STK_CLOCK_PRESCALER == STK_AHB_DIV8
    microSecToTicksRatio = microSecToTicksRatio / 8;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <STK_init+0x34>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc f883 	bl	8000504 <__aeabi_fdiv>
 80043fe:	4603      	mov	r3, r0
 8004400:	461a      	mov	r2, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <STK_init+0x34>)
 8004404:	601a      	str	r2, [r3, #0]
    #endif 
    
    /*Enable SysTick*/
    STK->CTRL=0b1;
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <STK_init+0x38>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]
    
    // Set SYSTick availability flag
    STK_INTERVAL_MODE = STK_FREE;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <STK_init+0x3c>)
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
    /*Configure the SysTick timer with the selected Clock*/
    #if STK_CLOCK_PRESCALER == STK_AHB
    SET_BIT(STK->CTRL,2);
    #endif
    
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200001bc 	.word	0x200001bc
 800441c:	e000e010 	.word	0xe000e010
 8004420:	200001b8 	.word	0x200001b8

08004424 <STK_delayMicroSec>:


// Delay for a specified number of microseconds using the SysTick timer.
void STK_delayMicroSec ( uint32 NoMicroSec )
{
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    // Set SYSTick Busy flag
    STK_INTERVAL_MODE = STK_BUSY;
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <STK_delayMicroSec+0x7c>)
 800442e:	2203      	movs	r2, #3
 8004430:	701a      	strb	r2, [r3, #0]

    // Enable SYSTick.
    SET_BIT(STK->CTRL,0);
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6013      	str	r3, [r2, #0]
    
    // Disable Interrupt.
    CLR_BIT(STK->CTRL,1);
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004444:	f023 0302 	bic.w	r3, r3, #2
 8004448:	6013      	str	r3, [r2, #0]

    // Assign number of TIcks To load register.
    STK->LOAD = (NoMicroSec *microSecToTicksRatio);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fb ff4e 	bl	80002ec <__aeabi_ui2f>
 8004450:	4602      	mov	r2, r0
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <STK_delayMicroSec+0x84>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f7fb ff9f 	bl	800039c <__aeabi_fmul>
 800445e:	4603      	mov	r3, r0
 8004460:	4c10      	ldr	r4, [pc, #64]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc f8ea 	bl	800063c <__aeabi_f2uiz>
 8004468:	4603      	mov	r3, r0
 800446a:	6063      	str	r3, [r4, #4]
    
    // Wait the Time delay.
    while(GET_BIT(STK->CTRL,16) == 0);
 800446c:	bf00      	nop
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f9      	beq.n	800446e <STK_delayMicroSec+0x4a>
    
    // Disable SYSTick and reset its value.
    CLR_BIT(STK->CTRL,0);
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <STK_delayMicroSec+0x80>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6013      	str	r3, [r2, #0]
    STK->LOAD = 0;
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <STK_delayMicroSec+0x80>)
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
    STK->VAL  = 0;
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <STK_delayMicroSec+0x80>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]

    // Set SYSTick availability flag
    STK_INTERVAL_MODE = STK_FREE;
 8004492:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <STK_delayMicroSec+0x7c>)
 8004494:	2202      	movs	r2, #2
 8004496:	701a      	strb	r2, [r3, #0]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}
 80044a0:	200001b8 	.word	0x200001b8
 80044a4:	e000e010 	.word	0xe000e010
 80044a8:	200001bc 	.word	0x200001bc

080044ac <STK_delayMilliSec>:


// Delay for a specified number of milliseconds using the SysTick timer.
void STK_delayMilliSec ( uint32 NoMilliSec )
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    // Set SYSTick Busy flag
    STK_INTERVAL_MODE = STK_BUSY;
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <STK_delayMilliSec+0x8c>)
 80044b6:	2203      	movs	r2, #3
 80044b8:	701a      	strb	r2, [r3, #0]

    for(uint32 counter=0;counter <NoMilliSec;counter++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e031      	b.n	8004524 <STK_delayMilliSec+0x78>
    {
    // Enable SYSTick.
    SET_BIT(STK->CTRL,0);
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <STK_delayMilliSec+0x90>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <STK_delayMilliSec+0x90>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6013      	str	r3, [r2, #0]

    // Disable Interrupt.
    CLR_BIT(STK->CTRL,1);
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <STK_delayMilliSec+0x90>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <STK_delayMilliSec+0x90>)
 80044d2:	f023 0302 	bic.w	r3, r3, #2
 80044d6:	6013      	str	r3, [r2, #0]

    // Assign number of TIcks To load register.
    STK->LOAD = (1000 *microSecToTicksRatio); //No Ticks equals to equation
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <STK_delayMilliSec+0x94>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4919      	ldr	r1, [pc, #100]	; (8004544 <STK_delayMilliSec+0x98>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb ff5c 	bl	800039c <__aeabi_fmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4c15      	ldr	r4, [pc, #84]	; (800453c <STK_delayMilliSec+0x90>)
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc f8a7 	bl	800063c <__aeabi_f2uiz>
 80044ee:	4603      	mov	r3, r0
 80044f0:	6063      	str	r3, [r4, #4]
    
    // Wait the Time delay.
    while(GET_BIT(STK->CTRL,16) == 0);
 80044f2:	bf00      	nop
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <STK_delayMilliSec+0x90>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f9      	beq.n	80044f4 <STK_delayMilliSec+0x48>
    
    // Disable SYSTick and reset its value.
    CLR_BIT(STK->CTRL,0);
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <STK_delayMilliSec+0x90>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <STK_delayMilliSec+0x90>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	6013      	str	r3, [r2, #0]
    STK->LOAD =0;
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <STK_delayMilliSec+0x90>)
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
    STK->VAL  =0;   
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <STK_delayMilliSec+0x90>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]

    // Set SYSTick availability flag
    STK_INTERVAL_MODE = STK_FREE;
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <STK_delayMilliSec+0x8c>)
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]
    for(uint32 counter=0;counter <NoMilliSec;counter++)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d3c9      	bcc.n	80044c0 <STK_delayMilliSec+0x14>
    }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	200001b8 	.word	0x200001b8
 800453c:	e000e010 	.word	0xe000e010
 8004540:	200001bc 	.word	0x200001bc
 8004544:	447a0000 	.word	0x447a0000

08004548 <SysTick_Handler>:
    return 0;
}

// SysTick interrupt handler function.
void SysTick_Handler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
    // Check if SysTick interval mode is single interval.
    if (STK_INTERVAL_MODE == STK_SINGLE_INTERVAL)
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <SysTick_Handler+0x38>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <SysTick_Handler+0x24>
    {
        // Stop the timer and clear the registers.
        STK->CTRL = 0;
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <SysTick_Handler+0x3c>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
        STK->LOAD = 0;
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <SysTick_Handler+0x3c>)
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
        STK->VAL  = 0;
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <SysTick_Handler+0x3c>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]

        // Set SYSTick availability flag
        STK_INTERVAL_MODE = STK_FREE;
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <SysTick_Handler+0x38>)
 8004568:	2202      	movs	r2, #2
 800456a:	701a      	strb	r2, [r3, #0]
    }

    // Call the callback function.
    if(STK_callBack != NULL)
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SysTick_Handler+0x40>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <SysTick_Handler+0x32>
        STK_callBack();
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SysTick_Handler+0x40>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4798      	blx	r3
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200001b8 	.word	0x200001b8
 8004584:	e000e010 	.word	0xe000e010
 8004588:	200001b4 	.word	0x200001b4

0800458c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800458c:	480d      	ldr	r0, [pc, #52]	; (80045c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800458e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004594:	480c      	ldr	r0, [pc, #48]	; (80045c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004596:	490d      	ldr	r1, [pc, #52]	; (80045cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004598:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <LoopForever+0xe>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800459c:	e002      	b.n	80045a4 <LoopCopyDataInit>

0800459e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800459e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045a2:	3304      	adds	r3, #4

080045a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045a8:	d3f9      	bcc.n	800459e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045ac:	4c0a      	ldr	r4, [pc, #40]	; (80045d8 <LoopForever+0x16>)
  movs r3, #0
 80045ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045b0:	e001      	b.n	80045b6 <LoopFillZerobss>

080045b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b4:	3204      	adds	r2, #4

080045b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045b8:	d3fb      	bcc.n	80045b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80045ba:	f000 f811 	bl	80045e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045be:	f7fe fa07 	bl	80029d0 <main>

080045c2 <LoopForever>:

LoopForever:
  b LoopForever
 80045c2:	e7fe      	b.n	80045c2 <LoopForever>
  ldr   r0, =_estack
 80045c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80045c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045cc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80045d0:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 80045d4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80045d8:	200001c0 	.word	0x200001c0

080045dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC1_2_IRQHandler>
	...

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	2600      	movs	r6, #0
 80045e4:	4d0c      	ldr	r5, [pc, #48]	; (8004618 <__libc_init_array+0x38>)
 80045e6:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	42a6      	cmp	r6, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	f000 f81a 	bl	8004628 <_init>
 80045f4:	2600      	movs	r6, #0
 80045f6:	4d0a      	ldr	r5, [pc, #40]	; (8004620 <__libc_init_array+0x40>)
 80045f8:	4c0a      	ldr	r4, [pc, #40]	; (8004624 <__libc_init_array+0x44>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	42a6      	cmp	r6, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f855 3b04 	ldr.w	r3, [r5], #4
 8004608:	4798      	blx	r3
 800460a:	3601      	adds	r6, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004612:	4798      	blx	r3
 8004614:	3601      	adds	r6, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	08004944 	.word	0x08004944
 800461c:	08004944 	.word	0x08004944
 8004620:	08004944 	.word	0x08004944
 8004624:	08004948 	.word	0x08004948

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
